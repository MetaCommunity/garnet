#0Y UTF-8

(PROGN (SETQ *PACKAGE* (SYSTEM::%FIND-PACKAGE "INTERACTORS")))
(PROGN
 (EXPORT
  '(START-ANIMATOR STOP-ANIMATOR ABORT-ANIMATOR ANIMATOR-INTERACTOR
    ANIMATOR-WRAP ANIMATOR-BOUNCE RESET-ALL-TIMER-PROCESSES MAIN-EVENT-LOOP
    EXIT-MAIN-EVENT-LOOP *GARNET-BREAK-KEY* INTERACTION-COMPLETE
    WAIT-INTERACTION-COMPLETE CHANGE-ACTIVE START-INTERACTOR ABORT-INTERACTOR
    STOP-INTERACTOR NOTICE-INTERACTOR-SLOT-CHANGED PRIORITY-LEVEL
    NORMAL-PRIORITY-LEVEL HIGH-PRIORITY-LEVEL RUNNING-PRIORITY-LEVEL
    PRIORITY-LEVEL-LIST RESET-INTER-LEVELS PRINT-INTER-LEVELS
    PRINT-INTER-WINDOWS TRACE-INTER UNTRACE-INTER *DEBUG-NEXT-INTER*
    DO-ALL-INTERACTORS *CURRENT-EVENT* *GARNET-BREAK-KEY* EVENT-X EVENT-Y
    EVENT-CHAR EVENT-CODE EVENT-MOUSEP EVENT-DOWNP EVENT-WINDOW EVENT-TIMESTAMP
    MAKE-EVENT *DOUBLE-CLICK-TIME* BIND-KEY UNBIND-KEY UNBIND-ALL-KEYS
    SET-DEFAULT-KEY-TRANSLATIONS TRANSCRIPT-EVENTS-TO-FILE CLOSE-TRANSCRIPT
    TRANSCRIPT-EVENTS-FROM-FILE CLIP-AND-MAP BEEP INSERT-TEXT-INTO-STRING
    WARP-POINTER POP-UP-WIN-AND-START-INTERACTOR RETURN-FINAL-SELECTION-OBJS
    DESELECTOBJ SELECTOBJ INTERACTOR INTERACTOR-WINDOW BUTTON-INTERACTOR
    TEXT-INTERACTOR TWO-POINT-INTERACTOR MOVE-GROW-INTERACTOR MENU-INTERACTOR
    ANGLE-INTERACTOR)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *CHANGED-INTERACTORS*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *INTERS-WITH-T-WINDOW*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *VISIBLE-MODAL-WINDOWS*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *SPECIAL-GRAB-UP-INTER*)))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'CHECK-AND-HANDLE-CHANGED-INTERS)
 (SYSTEM::%PUTD 'CHECK-AND-HANDLE-CHANGED-INTERS
  (SYSTEM::MAKE-MACRO
   (FUNCTION CHECK-AND-HANDLE-CHANGED-INTERS
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (> (LENGTH SYSTEM::<MACRO-FORM>) 1.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* NIL
       (BLOCK CHECK-AND-HANDLE-CHANGED-INTERS
        `(WHEN *CHANGED-INTERACTORS* (HANDLE-ALL-CHANGED-INTERACTORS))))))))))
(PROGN (SYSTEM::C-DEFUN 'BEEP (SYSTEM::LAMBDA-LIST-TO-SIGNATURE 'NIL)))
(PROGN
 (SYSTEM::C-DEFUN 'WARP-POINTER
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(WINDOW X Y))))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *INT-DEBUG*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *INT-TRACE*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *DEBUG-NEXT-INTER*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *SPECIAL-TRACE-VALUES*)))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'IF-DEBUG)
 (SYSTEM::%PUTD 'IF-DEBUG
  (SYSTEM::MAKE-MACRO
   (FUNCTION IF-DEBUG
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (< (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((INTER (CADR . #1=(SYSTEM::<MACRO-FORM>))) (BODY (CDDR . #1#)))
       (BLOCK IF-DEBUG
        `(WHEN (AND *INT-DEBUG* (TRACE-TEST ,INTER))
          (LET ((*PRINT-PRETTY* NIL)) ,@BODY))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'DEBUG-P)
 (SYSTEM::%PUTD 'DEBUG-P
  (SYSTEM::MAKE-MACRO
   (FUNCTION DEBUG-P
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((INTER (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK DEBUG-P `(AND *INT-DEBUG* (TRACE-TEST ,INTER))))))))))
(PROGN
 (SYSTEM::C-DEFUN 'TRACE-TEST (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(INTER))))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL INTERACTOR)))
(PROGN
 (SYSTEM::C-DEFUN 'TRACE-NEXT-INTER-TO-RUN
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(AN-INTERACTOR))))
(PROGN
 (SYSTEM::C-DEFUN 'TRACE-INTER
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(&OPTIONAL (TRACE-WHAT :STATUS)))))
(PROGN
 (SYSTEM::C-DEFUN 'UNTRACE-INTER
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(&OPTIONAL UNTRACE-WHAT))))
(PROGN
 (SYSTEM::C-DEFUN 'ERROR-PRINT
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SLOTDESC VALUE SHOULDBE INTER))))
(PROGN
 (SYSTEM::C-DEFUN 'COUNT-INTERACTORS (SYSTEM::LAMBDA-LIST-TO-SIGNATURE 'NIL)))
(PROGN
 (SYSTEM::C-DEFUN 'COUNT-INTERACTORS-INTERNAL
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(ROOT))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'CHECK-AND-HANDLE-DEBUG-NEXT-INTER)
 (SYSTEM::%PUTD 'CHECK-AND-HANDLE-DEBUG-NEXT-INTER
  (SYSTEM::MAKE-MACRO
   (FUNCTION CHECK-AND-HANDLE-DEBUG-NEXT-INTER
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (> (LENGTH SYSTEM::<MACRO-FORM>) 1.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* NIL
       (BLOCK CHECK-AND-HANDLE-DEBUG-NEXT-INTER
        `(WHEN *DEBUG-NEXT-INTER*
          (HANDLE-DEBUG-NEXT-INTER AN-INTERACTOR))))))))))
(PROGN
 (SYSTEM::C-DEFUN 'HANDLE-DEBUG-NEXT-INTER
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(AN-INTERACTOR))))
(PROGN
 (SYSTEM::C-DEFUN 'DBPRINTER
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SLOT OBJ VAL FEEDBACKP))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'DBPRINT)
 (SYSTEM::%PUTD 'DBPRINT
  (SYSTEM::MAKE-MACRO
   (FUNCTION DBPRINT
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 5.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET*
       ((SLOT (CADR . #1=(SYSTEM::<MACRO-FORM>))) (OBJ (CADDR . #1#))
        (VAL (CADDDR . #1#)) (INTER (FIFTH . #1#)))
       (BLOCK DBPRINT
        `(IF-DEBUG ,INTER (DBPRINTER ,SLOT ,OBJ ,VAL NIL))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'DBPRINT-EITHER)
 (SYSTEM::%PUTD 'DBPRINT-EITHER
  (SYSTEM::MAKE-MACRO
   (FUNCTION DBPRINT-EITHER
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 6.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET*
       ((SLOT (CADR . #1=(SYSTEM::<MACRO-FORM>))) (OBJ (CADDR . #1#))
        (VAL (CADDDR . #1#)) (INTER (FIFTH . #1#))
        (FEEDBACKP (CADR (CDDDDR . #1#))))
       (BLOCK DBPRINT-EITHER
        `(IF-DEBUG ,INTER (DBPRINTER ,SLOT ,OBJ ,VAL ,FEEDBACKP))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'DBPRINT-SEL)
 (SYSTEM::%PUTD 'DBPRINT-SEL
  (SYSTEM::MAKE-MACRO
   (FUNCTION DBPRINT-SEL
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 5.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET*
       ((SLOT (CADR . #1=(SYSTEM::<MACRO-FORM>))) (OBJ (CADDR . #1#))
        (VAL (CADDDR . #1#)) (INTER (FIFTH . #1#)))
       (BLOCK DBPRINT-SEL
        `(IF-DEBUG ,INTER (DBPRINTER ,SLOT ,OBJ ,VAL NIL))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'DBPRINT-FEED)
 (SYSTEM::%PUTD 'DBPRINT-FEED
  (SYSTEM::MAKE-MACRO
   (FUNCTION DBPRINT-FEED
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 5.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET*
       ((SLOT (CADR . #1=(SYSTEM::<MACRO-FORM>))) (OBJ (CADDR . #1#))
        (VAL (CADDDR . #1#)) (INTER (FIFTH . #1#)))
       (BLOCK DBPRINT-FEED
        `(IF-DEBUG ,INTER (DBPRINTER ,SLOT ,OBJ ,VAL T))))))))))
(PROGN
 (SYSTEM::C-DEFUN 'DBSTRPRINTER
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(OBJ FEEDBACKP))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'DBPRINT-STR)
 (SYSTEM::%PUTD 'DBPRINT-STR
  (SYSTEM::MAKE-MACRO
   (FUNCTION DBPRINT-STR
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 4.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET*
       ((OBJ (CADR . #1=(SYSTEM::<MACRO-FORM>))) (INTER (CADDR . #1#))
        (FEEDBACKP (CADDDR . #1#)))
       (BLOCK DBPRINT-STR
        `(IF-DEBUG ,INTER (DBSTRPRINTER ,OBJ ,FEEDBACKP))))))))))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL PRIORITY-LEVEL-LIST)))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'DELETEPLACE)
 (SYSTEM::%PUTD 'DELETEPLACE
  (SYSTEM::MAKE-MACRO
   (FUNCTION DELETEPLACE
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 3.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((ITEM (CADR . #1=(SYSTEM::<MACRO-FORM>))) (PLACE (CADDR . #1#)))
       (BLOCK DELETEPLACE `(SETF ,PLACE (DELETE ,ITEM ,PLACE))))))))))
(PROGN
 (LET NIL
  (LET
   ((#1=#:G33363
     (CONS 'EVENT
      (SVREF (GET 'STRUCTURE-OBJECT 'SYSTEM::DEFSTRUCT-DESCRIPTION) 0.))))
   (DEFUN MAKE-EVENT
    (&KEY WINDOW (CHAR :LEFTDOWN) (CODE 1.) (MOUSEP T) (DOWNP T) (X 0.) (Y 0.)
     (TIMESTAMP 0.) STATE AGGIE)
    (LET ((SYSTEM::OBJECT (SYSTEM::%MAKE-STRUCTURE #1# 11.)))
     (SETF (SYSTEM::%STRUCTURE-REF 'EVENT SYSTEM::OBJECT 1.) (THE T WINDOW))
     (SETF (SYSTEM::%STRUCTURE-REF 'EVENT SYSTEM::OBJECT 2.) (THE T CHAR))
     (SETF (SYSTEM::%STRUCTURE-REF 'EVENT SYSTEM::OBJECT 3.) (THE T CODE))
     (SETF (SYSTEM::%STRUCTURE-REF 'EVENT SYSTEM::OBJECT 4.) (THE T MOUSEP))
     (SETF (SYSTEM::%STRUCTURE-REF 'EVENT SYSTEM::OBJECT 5.) (THE T DOWNP))
     (SETF (SYSTEM::%STRUCTURE-REF 'EVENT SYSTEM::OBJECT 6.) (THE T X))
     (SETF (SYSTEM::%STRUCTURE-REF 'EVENT SYSTEM::OBJECT 7.) (THE T Y))
     (SETF (SYSTEM::%STRUCTURE-REF 'EVENT SYSTEM::OBJECT 8.) (THE T TIMESTAMP))
     (SETF (SYSTEM::%STRUCTURE-REF 'EVENT SYSTEM::OBJECT 9.) (THE T STATE))
     (SETF (SYSTEM::%STRUCTURE-REF 'EVENT SYSTEM::OBJECT 10.) (THE T AGGIE))
     SYSTEM::OBJECT))
   (SYSTEM::%PUT 'EVENT 'SYSTEM::DEFSTRUCT-DESCRIPTION
    (VECTOR #1# 'T 'MAKE-EVENT
     `(#(WINDOW (:WINDOW) 1. (NIL) NIL T NIL)
       #(CHAR (:CHAR) 2. (NIL . :LEFTDOWN) :LEFTDOWN T NIL)
       #(CODE (:CODE) 3. (NIL . 1.) 1. T NIL)
       #(MOUSEP (:MOUSEP) 4. (NIL . T) T T NIL)
       #(DOWNP (:DOWNP) 5. (NIL . T) T T NIL) #(X (:X) 6. (NIL . 0.) 0. T NIL)
       #(Y (:Y) 7. (NIL . 0.) 0. T NIL)
       #(TIMESTAMP (:TIMESTAMP) 8. (NIL . 0.) 0. T NIL)
       #(STATE (:STATE) 9. (NIL) NIL T NIL)
       #(AGGIE (:AGGIE) 10. (NIL) NIL T NIL)))))
  (CLOS::DEFINE-STRUCTURE-CLASS 'EVENT) (PROCLAIM '(INLINE EVENT-P))
  (DEFUN EVENT-P (SYSTEM::OBJECT)
   (SYSTEM::%STRUCTURE-TYPE-P 'EVENT SYSTEM::OBJECT))
  (PROCLAIM '(INLINE COPY-EVENT))
  (DEFUN COPY-EVENT (STRUCTURE) (COPY-STRUCTURE STRUCTURE))
  (PROCLAIM '(FUNCTION EVENT-WINDOW (EVENT) T))
  (PROCLAIM '(INLINE EVENT-WINDOW))
  (DEFUN EVENT-WINDOW #2=(SYSTEM::OBJECT)
   (THE T (SYSTEM::%STRUCTURE-REF 'EVENT SYSTEM::OBJECT 1.)))
  (SYSTEM::%PUT 'EVENT-WINDOW #3='SYSTEM::DEFSTRUCT-READER 'EVENT)
  (PROCLAIM '(FUNCTION EVENT-CHAR (EVENT) T)) (PROCLAIM '(INLINE EVENT-CHAR))
  (DEFUN EVENT-CHAR #2#
   (THE T (SYSTEM::%STRUCTURE-REF 'EVENT SYSTEM::OBJECT 2.)))
  (SYSTEM::%PUT 'EVENT-CHAR #3# 'EVENT)
  (PROCLAIM '(FUNCTION EVENT-CODE (EVENT) T)) (PROCLAIM '(INLINE EVENT-CODE))
  (DEFUN EVENT-CODE #2#
   (THE T (SYSTEM::%STRUCTURE-REF 'EVENT SYSTEM::OBJECT 3.)))
  (SYSTEM::%PUT 'EVENT-CODE #3# 'EVENT)
  (PROCLAIM '(FUNCTION EVENT-MOUSEP (EVENT) T))
  (PROCLAIM '(INLINE EVENT-MOUSEP))
  (DEFUN EVENT-MOUSEP #2#
   (THE T (SYSTEM::%STRUCTURE-REF 'EVENT SYSTEM::OBJECT 4.)))
  (SYSTEM::%PUT 'EVENT-MOUSEP #3# 'EVENT)
  (PROCLAIM '(FUNCTION EVENT-DOWNP (EVENT) T)) (PROCLAIM '(INLINE EVENT-DOWNP))
  (DEFUN EVENT-DOWNP #2#
   (THE T (SYSTEM::%STRUCTURE-REF 'EVENT SYSTEM::OBJECT 5.)))
  (SYSTEM::%PUT 'EVENT-DOWNP #3# 'EVENT)
  (PROCLAIM '(FUNCTION EVENT-X (EVENT) T)) (PROCLAIM '(INLINE EVENT-X))
  (DEFUN EVENT-X #2# (THE T (SYSTEM::%STRUCTURE-REF 'EVENT SYSTEM::OBJECT 6.)))
  (SYSTEM::%PUT 'EVENT-X #3# 'EVENT) (PROCLAIM '(FUNCTION EVENT-Y (EVENT) T))
  (PROCLAIM '(INLINE EVENT-Y))
  (DEFUN EVENT-Y #2# (THE T (SYSTEM::%STRUCTURE-REF 'EVENT SYSTEM::OBJECT 7.)))
  (SYSTEM::%PUT 'EVENT-Y #3# 'EVENT)
  (PROCLAIM '(FUNCTION EVENT-TIMESTAMP (EVENT) T))
  (PROCLAIM '(INLINE EVENT-TIMESTAMP))
  (DEFUN EVENT-TIMESTAMP #2#
   (THE T (SYSTEM::%STRUCTURE-REF 'EVENT SYSTEM::OBJECT 8.)))
  (SYSTEM::%PUT 'EVENT-TIMESTAMP #3# 'EVENT)
  (PROCLAIM '(FUNCTION EVENT-STATE (EVENT) T)) (PROCLAIM '(INLINE EVENT-STATE))
  (DEFUN EVENT-STATE #2#
   (THE T (SYSTEM::%STRUCTURE-REF 'EVENT SYSTEM::OBJECT 9.)))
  (SYSTEM::%PUT 'EVENT-STATE #3# 'EVENT)
  (PROCLAIM '(FUNCTION EVENT-AGGIE (EVENT) T)) (PROCLAIM '(INLINE EVENT-AGGIE))
  (DEFUN EVENT-AGGIE #2#
   (THE T (SYSTEM::%STRUCTURE-REF 'EVENT SYSTEM::OBJECT 10.)))
  (SYSTEM::%PUT 'EVENT-AGGIE #3# 'EVENT)
  (DEFSETF EVENT-WINDOW #4=(SYSTEM::STRUCT) #5=(SYSTEM::VALUE)
   (LIST #6='SYSTEM::%STRUCTURE-STORE ''EVENT SYSTEM::STRUCT 1. SYSTEM::VALUE))
  (SYSTEM::%PUT 'EVENT-WINDOW #7='SYSTEM::DEFSTRUCT-WRITER 'EVENT)
  (DEFSETF EVENT-CHAR #4# #5#
   (LIST #6# ''EVENT SYSTEM::STRUCT 2. SYSTEM::VALUE))
  (SYSTEM::%PUT 'EVENT-CHAR #7# 'EVENT)
  (DEFSETF EVENT-CODE #4# #5#
   (LIST #6# ''EVENT SYSTEM::STRUCT 3. SYSTEM::VALUE))
  (SYSTEM::%PUT 'EVENT-CODE #7# 'EVENT)
  (DEFSETF EVENT-MOUSEP #4# #5#
   (LIST #6# ''EVENT SYSTEM::STRUCT 4. SYSTEM::VALUE))
  (SYSTEM::%PUT 'EVENT-MOUSEP #7# 'EVENT)
  (DEFSETF EVENT-DOWNP #4# #5#
   (LIST #6# ''EVENT SYSTEM::STRUCT 5. SYSTEM::VALUE))
  (SYSTEM::%PUT 'EVENT-DOWNP #7# 'EVENT)
  (DEFSETF EVENT-X #4# #5# (LIST #6# ''EVENT SYSTEM::STRUCT 6. SYSTEM::VALUE))
  (SYSTEM::%PUT 'EVENT-X #7# 'EVENT)
  (DEFSETF EVENT-Y #4# #5# (LIST #6# ''EVENT SYSTEM::STRUCT 7. SYSTEM::VALUE))
  (SYSTEM::%PUT 'EVENT-Y #7# 'EVENT)
  (DEFSETF EVENT-TIMESTAMP #4# #5#
   (LIST #6# ''EVENT SYSTEM::STRUCT 8. SYSTEM::VALUE))
  (SYSTEM::%PUT 'EVENT-TIMESTAMP #7# 'EVENT)
  (DEFSETF EVENT-STATE #4# #5#
   (LIST #6# ''EVENT SYSTEM::STRUCT 9. SYSTEM::VALUE))
  (SYSTEM::%PUT 'EVENT-STATE #7# 'EVENT)
  (DEFSETF EVENT-AGGIE #4# #5#
   (LIST #6# ''EVENT SYSTEM::STRUCT 10. SYSTEM::VALUE))
  (SYSTEM::%PUT 'EVENT-AGGIE #7# 'EVENT)
  (SETF (DOCUMENTATION 'EVENT 'STRUCTURE) NIL)
  (DEFMETHOD PRINT-OBJECT ((SYSTEM::STRUCT EVENT) STREAM)
   (PROGN (PRINT-EVENT SYSTEM::STRUCT STREAM SYSTEM::*PRIN-LEVEL*)))
  'EVENT))
(PROGN
 (SYSTEM::C-DEFUN 'MAKE-EVENT
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE
   '(&KEY WINDOW (CHAR :LEFTDOWN) (CODE 1.) (MOUSEP T) (DOWNP T) (X 0.) (Y 0.)
     (TIMESTAMP 0.) STATE AGGIE))))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE EVENT-P)))
(PROGN
 (SYSTEM::C-DEFUN 'EVENT-P
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(SYSTEM::OBJECT))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN EVENT-P))
    (BLOCK EVENT-P (SYSTEM::%STRUCTURE-TYPE-P 'EVENT SYSTEM::OBJECT)))))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE COPY-EVENT)))
(PROGN
 (SYSTEM::C-DEFUN 'COPY-EVENT
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(STRUCTURE))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN COPY-EVENT))
    (BLOCK COPY-EVENT (COPY-STRUCTURE STRUCTURE)))))
(PROGN (SYSTEM::C-PROCLAIM '(FUNCTION EVENT-WINDOW (EVENT) T)))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE EVENT-WINDOW)))
(PROGN
 (SYSTEM::C-DEFUN 'EVENT-WINDOW
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(SYSTEM::OBJECT))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN EVENT-WINDOW))
    (BLOCK EVENT-WINDOW
     (THE T (SYSTEM::%STRUCTURE-REF 'EVENT SYSTEM::OBJECT 1.))))))
(PROGN (SYSTEM::C-PROCLAIM '(FUNCTION EVENT-CHAR (EVENT) T)))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE EVENT-CHAR)))
(PROGN
 (SYSTEM::C-DEFUN 'EVENT-CHAR
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(SYSTEM::OBJECT))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN EVENT-CHAR))
    (BLOCK EVENT-CHAR
     (THE T (SYSTEM::%STRUCTURE-REF 'EVENT SYSTEM::OBJECT 2.))))))
(PROGN (SYSTEM::C-PROCLAIM '(FUNCTION EVENT-CODE (EVENT) T)))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE EVENT-CODE)))
(PROGN
 (SYSTEM::C-DEFUN 'EVENT-CODE
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(SYSTEM::OBJECT))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN EVENT-CODE))
    (BLOCK EVENT-CODE
     (THE T (SYSTEM::%STRUCTURE-REF 'EVENT SYSTEM::OBJECT 3.))))))
(PROGN (SYSTEM::C-PROCLAIM '(FUNCTION EVENT-MOUSEP (EVENT) T)))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE EVENT-MOUSEP)))
(PROGN
 (SYSTEM::C-DEFUN 'EVENT-MOUSEP
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(SYSTEM::OBJECT))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN EVENT-MOUSEP))
    (BLOCK EVENT-MOUSEP
     (THE T (SYSTEM::%STRUCTURE-REF 'EVENT SYSTEM::OBJECT 4.))))))
(PROGN (SYSTEM::C-PROCLAIM '(FUNCTION EVENT-DOWNP (EVENT) T)))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE EVENT-DOWNP)))
(PROGN
 (SYSTEM::C-DEFUN 'EVENT-DOWNP
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(SYSTEM::OBJECT))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN EVENT-DOWNP))
    (BLOCK EVENT-DOWNP
     (THE T (SYSTEM::%STRUCTURE-REF 'EVENT SYSTEM::OBJECT 5.))))))
(PROGN (SYSTEM::C-PROCLAIM '(FUNCTION EVENT-X (EVENT) T)))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE EVENT-X)))
(PROGN
 (SYSTEM::C-DEFUN 'EVENT-X
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(SYSTEM::OBJECT))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN EVENT-X))
    (BLOCK EVENT-X
     (THE T (SYSTEM::%STRUCTURE-REF 'EVENT SYSTEM::OBJECT 6.))))))
(PROGN (SYSTEM::C-PROCLAIM '(FUNCTION EVENT-Y (EVENT) T)))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE EVENT-Y)))
(PROGN
 (SYSTEM::C-DEFUN 'EVENT-Y
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(SYSTEM::OBJECT))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN EVENT-Y))
    (BLOCK EVENT-Y
     (THE T (SYSTEM::%STRUCTURE-REF 'EVENT SYSTEM::OBJECT 7.))))))
(PROGN (SYSTEM::C-PROCLAIM '(FUNCTION EVENT-TIMESTAMP (EVENT) T)))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE EVENT-TIMESTAMP)))
(PROGN
 (SYSTEM::C-DEFUN 'EVENT-TIMESTAMP
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(SYSTEM::OBJECT))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN EVENT-TIMESTAMP))
    (BLOCK EVENT-TIMESTAMP
     (THE T (SYSTEM::%STRUCTURE-REF 'EVENT SYSTEM::OBJECT 8.))))))
(PROGN (SYSTEM::C-PROCLAIM '(FUNCTION EVENT-STATE (EVENT) T)))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE EVENT-STATE)))
(PROGN
 (SYSTEM::C-DEFUN 'EVENT-STATE
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(SYSTEM::OBJECT))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN EVENT-STATE))
    (BLOCK EVENT-STATE
     (THE T (SYSTEM::%STRUCTURE-REF 'EVENT SYSTEM::OBJECT 9.))))))
(PROGN (SYSTEM::C-PROCLAIM '(FUNCTION EVENT-AGGIE (EVENT) T)))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE EVENT-AGGIE)))
(PROGN
 (SYSTEM::C-DEFUN 'EVENT-AGGIE
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(SYSTEM::OBJECT))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN EVENT-AGGIE))
    (BLOCK EVENT-AGGIE
     (THE T (SYSTEM::%STRUCTURE-REF 'EVENT SYSTEM::OBJECT 10.))))))
(PROGN
 (LET NIL (REMPROP 'EVENT-WINDOW 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'EVENT-WINDOW 'SYSTEM::SETF-EXPANDER
   (LIST* -1. 1.
    (FUNCTION SETF-EVENT-WINDOW
     (LAMBDA (SYSTEM::%ACCESS-ARGLIST SYSTEM::VALUE)
      (LET* ((SYSTEM::STRUCT (CADR SYSTEM::%ACCESS-ARGLIST)))
       (BLOCK EVENT-WINDOW
        (LIST 'SYSTEM::%STRUCTURE-STORE ''EVENT SYSTEM::STRUCT 1.
         SYSTEM::VALUE)))))))
  (SYSTEM::%SET-DOCUMENTATION 'EVENT-WINDOW 'SETF NIL) 'EVENT-WINDOW))
(PROGN
 (LET NIL (REMPROP 'EVENT-CHAR 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'EVENT-CHAR 'SYSTEM::SETF-EXPANDER
   (LIST* -1. 1.
    (FUNCTION SETF-EVENT-CHAR
     (LAMBDA (SYSTEM::%ACCESS-ARGLIST SYSTEM::VALUE)
      (LET* ((SYSTEM::STRUCT (CADR SYSTEM::%ACCESS-ARGLIST)))
       (BLOCK EVENT-CHAR
        (LIST 'SYSTEM::%STRUCTURE-STORE ''EVENT SYSTEM::STRUCT 2.
         SYSTEM::VALUE)))))))
  (SYSTEM::%SET-DOCUMENTATION 'EVENT-CHAR 'SETF NIL) 'EVENT-CHAR))
(PROGN
 (LET NIL (REMPROP 'EVENT-CODE 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'EVENT-CODE 'SYSTEM::SETF-EXPANDER
   (LIST* -1. 1.
    (FUNCTION SETF-EVENT-CODE
     (LAMBDA (SYSTEM::%ACCESS-ARGLIST SYSTEM::VALUE)
      (LET* ((SYSTEM::STRUCT (CADR SYSTEM::%ACCESS-ARGLIST)))
       (BLOCK EVENT-CODE
        (LIST 'SYSTEM::%STRUCTURE-STORE ''EVENT SYSTEM::STRUCT 3.
         SYSTEM::VALUE)))))))
  (SYSTEM::%SET-DOCUMENTATION 'EVENT-CODE 'SETF NIL) 'EVENT-CODE))
(PROGN
 (LET NIL (REMPROP 'EVENT-MOUSEP 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'EVENT-MOUSEP 'SYSTEM::SETF-EXPANDER
   (LIST* -1. 1.
    (FUNCTION SETF-EVENT-MOUSEP
     (LAMBDA (SYSTEM::%ACCESS-ARGLIST SYSTEM::VALUE)
      (LET* ((SYSTEM::STRUCT (CADR SYSTEM::%ACCESS-ARGLIST)))
       (BLOCK EVENT-MOUSEP
        (LIST 'SYSTEM::%STRUCTURE-STORE ''EVENT SYSTEM::STRUCT 4.
         SYSTEM::VALUE)))))))
  (SYSTEM::%SET-DOCUMENTATION 'EVENT-MOUSEP 'SETF NIL) 'EVENT-MOUSEP))
(PROGN
 (LET NIL (REMPROP 'EVENT-DOWNP 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'EVENT-DOWNP 'SYSTEM::SETF-EXPANDER
   (LIST* -1. 1.
    (FUNCTION SETF-EVENT-DOWNP
     (LAMBDA (SYSTEM::%ACCESS-ARGLIST SYSTEM::VALUE)
      (LET* ((SYSTEM::STRUCT (CADR SYSTEM::%ACCESS-ARGLIST)))
       (BLOCK EVENT-DOWNP
        (LIST 'SYSTEM::%STRUCTURE-STORE ''EVENT SYSTEM::STRUCT 5.
         SYSTEM::VALUE)))))))
  (SYSTEM::%SET-DOCUMENTATION 'EVENT-DOWNP 'SETF NIL) 'EVENT-DOWNP))
(PROGN
 (LET NIL (REMPROP 'EVENT-X 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'EVENT-X 'SYSTEM::SETF-EXPANDER
   (LIST* -1. 1.
    (FUNCTION SETF-EVENT-X
     (LAMBDA (SYSTEM::%ACCESS-ARGLIST SYSTEM::VALUE)
      (LET* ((SYSTEM::STRUCT (CADR SYSTEM::%ACCESS-ARGLIST)))
       (BLOCK EVENT-X
        (LIST 'SYSTEM::%STRUCTURE-STORE ''EVENT SYSTEM::STRUCT 6.
         SYSTEM::VALUE)))))))
  (SYSTEM::%SET-DOCUMENTATION 'EVENT-X 'SETF NIL) 'EVENT-X))
(PROGN
 (LET NIL (REMPROP 'EVENT-Y 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'EVENT-Y 'SYSTEM::SETF-EXPANDER
   (LIST* -1. 1.
    (FUNCTION SETF-EVENT-Y
     (LAMBDA (SYSTEM::%ACCESS-ARGLIST SYSTEM::VALUE)
      (LET* ((SYSTEM::STRUCT (CADR SYSTEM::%ACCESS-ARGLIST)))
       (BLOCK EVENT-Y
        (LIST 'SYSTEM::%STRUCTURE-STORE ''EVENT SYSTEM::STRUCT 7.
         SYSTEM::VALUE)))))))
  (SYSTEM::%SET-DOCUMENTATION 'EVENT-Y 'SETF NIL) 'EVENT-Y))
(PROGN
 (LET NIL (REMPROP 'EVENT-TIMESTAMP 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'EVENT-TIMESTAMP 'SYSTEM::SETF-EXPANDER
   (LIST* -1. 1.
    (FUNCTION SETF-EVENT-TIMESTAMP
     (LAMBDA (SYSTEM::%ACCESS-ARGLIST SYSTEM::VALUE)
      (LET* ((SYSTEM::STRUCT (CADR SYSTEM::%ACCESS-ARGLIST)))
       (BLOCK EVENT-TIMESTAMP
        (LIST 'SYSTEM::%STRUCTURE-STORE ''EVENT SYSTEM::STRUCT 8.
         SYSTEM::VALUE)))))))
  (SYSTEM::%SET-DOCUMENTATION 'EVENT-TIMESTAMP 'SETF NIL) 'EVENT-TIMESTAMP))
(PROGN
 (LET NIL (REMPROP 'EVENT-STATE 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'EVENT-STATE 'SYSTEM::SETF-EXPANDER
   (LIST* -1. 1.
    (FUNCTION SETF-EVENT-STATE
     (LAMBDA (SYSTEM::%ACCESS-ARGLIST SYSTEM::VALUE)
      (LET* ((SYSTEM::STRUCT (CADR SYSTEM::%ACCESS-ARGLIST)))
       (BLOCK EVENT-STATE
        (LIST 'SYSTEM::%STRUCTURE-STORE ''EVENT SYSTEM::STRUCT 9.
         SYSTEM::VALUE)))))))
  (SYSTEM::%SET-DOCUMENTATION 'EVENT-STATE 'SETF NIL) 'EVENT-STATE))
(PROGN
 (LET NIL (REMPROP 'EVENT-AGGIE 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'EVENT-AGGIE 'SYSTEM::SETF-EXPANDER
   (LIST* -1. 1.
    (FUNCTION SETF-EVENT-AGGIE
     (LAMBDA (SYSTEM::%ACCESS-ARGLIST SYSTEM::VALUE)
      (LET* ((SYSTEM::STRUCT (CADR SYSTEM::%ACCESS-ARGLIST)))
       (BLOCK EVENT-AGGIE
        (LIST 'SYSTEM::%STRUCTURE-STORE ''EVENT SYSTEM::STRUCT 10.
         SYSTEM::VALUE)))))))
  (SYSTEM::%SET-DOCUMENTATION 'EVENT-AGGIE 'SETF NIL) 'EVENT-AGGIE))
(PROGN
 (SYSTEM::C-DEFUN 'PRINT-OBJECT
  #S(SYSTEM::SIGNATURE :REQ-NUM 2. :OPT-NUM 0. :REST-P NIL :KEYS-P NIL
     :KEYWORDS NIL :ALLOW-P NIL)))
(PROGN
 (SYSTEM::C-DEFUN 'PRINT-EVENT
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(EVENT STREAM DEPTH))))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *CURRENT-EVENT*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL ALL-INTER-WINDOWS)))
(PROGN
 (SYSTEM::C-DEFUN 'CHANGE-ACTIVE
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE
   '(INTER-OR-LEVEL &OPTIONAL (NEW-VALUE (G-VALUE INTER-OR-LEVEL :ACTIVE))))))
(PROGN
 (SYSTEM::C-DEFUN 'START-INTERACTOR
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(AN-INTERACTOR &OPTIONAL (EVENT T)))))
(PROGN
 (SYSTEM::C-DEFUN 'INTERNAL-START-INTERACTOR
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(AN-INTERACTOR EVENT))))
(PROGN
 (SYSTEM::C-DEFUN 'ABORT-INTERACTOR
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(INTER))))
(PROGN
 (SYSTEM::C-DEFUN 'INTERNAL-ABORT-INTERACTOR
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(INTER))))
(PROGN
 (SYSTEM::C-DEFUN 'STOP-INTERACTOR
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(INTER))))
(PROGN
 (SYSTEM::C-DEFUN 'TOP-INTERACTOR-INITIALIZE
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SELF))))
(PROGN
 (SYSTEM::C-DEFUN 'ADD-INTERACTOR-TO-LEVEL-WIN
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(INTER LEVEL WIN MULTIWIN))))
(PROGN
 (SYSTEM::C-DEFUN 'ADD-INTERACTOR-TO-LEVEL
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(INTER LEVEL JUST-MOVING))))
(PROGN
 (SYSTEM::C-DEFUN 'REMOVE-INTERACTOR-FROM-LEVEL-WIN
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(INTER LEVEL WIN MULTIWIN))))
(PROGN
 (SYSTEM::C-DEFUN 'REMOVE-INTERACTOR-FROM-LEVEL
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(INTER LEVEL JUST-MOVING))))
(PROGN
 (SYSTEM::C-DEFUN 'CAREFUL-REMOVE-INTERACTOR-FROM-LEVEL
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(INTER LEVEL OLD-WINDOW))))
(PROGN
 (SYSTEM::C-DEFUN 'GET-INTERACTOR-WINDOWS
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(INTER))))
(PROGN
 (SYSTEM::C-DEFUN 'CREATE-LEVEL-FOR-WIN
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(GLO-LEVEL WIN))))
(PROGN
 (SYSTEM::C-DEFUN 'CHECK-IF-UNGRAB-WIN
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(WIN))))
(PROGN
 (SYSTEM::C-DEFUN 'PRINT-INTER-LEVELS
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(&KEY LEVEL WINDOW))))
(PROGN
 (SYSTEM::C-DEFUN 'DO-ALL-INTERACTORS
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE
   '(FUNC &OPTIONAL (ROOT-INTER INTERACTOR)))))
(PROGN
 (SYSTEM::C-DEFUN 'RESET-INTER-LEVELS
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(&OPTIONAL LEVEL))))
(PROGN
 (SYSTEM::C-DEFUN 'CHECK-ACTOR-DELETE-WINDOW
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(WIN ACTOR))))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *COPY-ARRAY*)))
(PROGN
 (SYSTEM::C-DEFUN 'DESTROY-ALL-INTERACTORS
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(WINDOW))))
(PROGN
 (SYSTEM::C-DEFUN 'TURN-ON-MOUSE-MOVED
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(ACTOR))))
(PROGN
 (SYSTEM::C-DEFUN 'TURN-OFF-MOUSE-MOVED
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(ACTOR))))
(PROGN
 (SYSTEM::C-DEFUN 'ADD-TO-LEVEL
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE
   '(AN-INTERACTOR RUNNING-P NEED-MOUSE-MOVED JUST-MOVING))))
(PROGN
 (SYSTEM::C-DEFUN 'REMOVE-FROM-LEVEL
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(AN-INTERACTOR RUNNING-P JUST-MOVING))))
(PROGN
 (SYSTEM::C-DEFUN 'MOVE-LEVELS
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE
   '(AN-INTERACTOR FROM-RUNNING-P TO-RUNNING-P NEEDMOUSEMOVED))))
(PROGN
 (SYSTEM::C-DEFUN 'REMOVE-FROM-ALL-LEVELS
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(AN-INTERACTOR))))
(PROGN
 (SYSTEM::C-DEFUN 'CHECK-INTERACTOR-TYPE
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA TYP))))
(PROGN
 (SYSTEM::C-DEFUN 'CHECK-REQUIRED-SLOTS
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA))))
(PROGN
 (SYSTEM::C-DEFUN 'HANDLE-INTER-LIST-FOR-WINDOW
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(OLD-WINDOW NEW-WINDOW INTER))))
(PROGN
 (SYSTEM::C-DEFUN 'ADD-TO-LEVEL-AND-MAYBE-START
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA))))
(PROGN
 (SYSTEM::C-DEFUN 'SET-UP-DEFAULTS
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA))))
(PROGN
 (SYSTEM::C-DEFUN 'HANDLE-NEW-WINDOW-FOR-T-INTERS
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(WIN))))
(PROGN
 (SYSTEM::C-DEFUN 'GET-GOB-OF-WHERE
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(WHERE))))
(PROGN
 (SYSTEM::C-DEFUN 'INTER-UPDATE-SLOT-INVALIDATED
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(INTER SLOT SAVE))))
(PROGN
 (SYSTEM::C-DEFUN 'HANDLE-ALL-CHANGED-INTERACTORS
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE 'NIL)))
(PROGN
 (SYSTEM::C-DEFUN 'HANDLE-INTERACTOR-SLOT-CHANGED
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(INTER))))
(PROGN
 (SYSTEM::C-DEFUN 'SORT-INTERS (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(I1 I2))))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *GLOBAL-FIRST-ACCELERATORS*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *GLOBAL-ACCELERATORS*)))
(PROGN
 (SYSTEM::C-DEFUN 'PROCESS-EVENT (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(EVENT))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'BUTTON-PRESSED)
 (SYSTEM::%PUTD 'BUTTON-PRESSED
  (SYSTEM::MAKE-MACRO
   (FUNCTION BUTTON-PRESSED
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((EVENT (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK BUTTON-PRESSED `(PROCESS-EVENT ,EVENT)))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'BUTTON-RELEASED)
 (SYSTEM::%PUTD 'BUTTON-RELEASED
  (SYSTEM::MAKE-MACRO
   (FUNCTION BUTTON-RELEASED
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((EVENT (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK BUTTON-RELEASED `(PROCESS-EVENT ,EVENT)))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'KEY-PRESSED)
 (SYSTEM::%PUTD 'KEY-PRESSED
  (SYSTEM::MAKE-MACRO
   (FUNCTION KEY-PRESSED
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((EVENT (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK KEY-PRESSED `(PROCESS-EVENT ,EVENT)))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'MOUSE-MOVED)
 (SYSTEM::%PUTD 'MOUSE-MOVED
  (SYSTEM::MAKE-MACRO
   (FUNCTION MOUSE-MOVED
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((EVENT (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK MOUSE-MOVED `(PROCESS-EVENT ,EVENT)))))))))
(PROGN
 (SYSTEM::C-DEFUN 'GETNEXTITEM
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(ITEM SEQUENCE))))
(PROGN
 (SYSTEM::C-DEFUN 'GET-RUNNING-WHERE
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(AN-INTERACTOR))))
(PROGN
 (SYSTEM::C-DEFUN 'CHECKOBJTYPE
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(OBJ TYPE))))
(PROGN
 (SYSTEM::C-DEFUN 'LIST-ELEMENT-OF-BRANCH
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(AGG CONTROL SLOT TYPE WIN X Y))))
(PROGN
 (SYSTEM::C-DEFUN 'LIST-LEAF-ELEMENT-OF-BRANCH
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(AGG CONTROL SLOT TYPE WIN X Y))))
(PROGN
 (SYSTEM::C-DEFUN 'CHECK-LEAF-BUT-RETURN-ELEMENT-BRANCH
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE
   '(AGG AN-INTERACTOR CONTROL TYPE WIN X Y))))
(PROGN
 (SYSTEM::C-DEFUN 'CHECK-LOCATION
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(EVENT WHICH-WHERE AN-INTERACTOR))))
(PROGN
 (SYSTEM::C-DEFUN 'CONVERT-MOUSE-DOWN
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(BUTTON-CODE))))
(PROGN
 (SYSTEM::C-DEFUN 'COMPARE-AND-GET-POSSIBLE-STOP-EVENT
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(EVENT EVENT-DESIRED))))
(PROGN
 (SYSTEM::C-DEFUN 'SET-INVENTED-STOP-EVENT
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(AN-INTERACTOR))))
(PROGN
 (SYSTEM::C-DEFUN 'CHECK-EVENT
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(ACTUAL-EVENT WHICH-EVENT INTERACT))))
(PROGN
 (SYSTEM::C-DEFUN 'INT-CHECK-EVENT
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(ACTUAL-EVENT WHICH-EVENT INTERACT))))
(PROGN
 (SYSTEM::C-DEFUN 'FIX-RUNNING-WHERE
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(AN-INTERACTOR NEW-OBJ-OVER))))
(PROGN
 (SYSTEM::C-DEFUN 'GOTORUNNINGSTATE
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(AN-INTERACTOR NEEDMOUSEMOVED))))
(PROGN
 (SYSTEM::C-DEFUN 'GOTOSTARTSTATE
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(AN-INTERACTOR SET-WAITING-LEVEL))))
(PROGN
 (SYSTEM::C-DEFUN 'GENERAL-GO
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(AN-INTERACTOR EVENT))))
(PROGN
 (SYSTEM::C-DEFUN 'DESTROY-ME-METHOD-INTERACTOR
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(AN-INTERACTOR &OPTIONAL (ERASE T)))))
(PROGN
 (SYSTEM::C-DEFUN 'DESTROY-METHOD-INTERACTOR
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(AN-INTERACTOR &OPTIONAL (ERASE T)))))