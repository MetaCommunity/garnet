#0Y UTF-8

(PROGN (SETQ *PACKAGE* (SYSTEM::%FIND-PACKAGE "GEM")))
(PROGN (EXPORT '(INIT-DEVICE)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *ROOT-WINDOW*)))
(PROGN
 (DEFVAR *METHOD-NAMES* NIL
  "Holds the method names.  This is used to create the Gem interface
   macros."))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *METHOD-NAMES*)))
(PROGN
 (DEFVAR *DEVICE-INITIALIZERS* NIL
  "An a-list which associates device types with the function to be called
     to initialize them."))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *DEVICE-INITIALIZERS*)))
(PROGN
 (SYSTEM::C-DEFUN 'ATTACH-METHOD
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(DEVICE METHOD-NAME METHOD))))
(PROGN
 (SYSTEM::C-DEFUN 'SET-WINDOW-METHODS
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(WINDOW DEVICE))))
(PROGN
 (DEFUN FIND-OR-CREATE-NAME (NAME)
  (LET ((POS (POSITION NAME *METHOD-NAMES*)))
   (UNLESS POS
    (IF *METHOD-NAMES* (SETF (CDR (LAST *METHOD-NAMES*)) (LIST NAME))
     (SETF *METHOD-NAMES* (LIST NAME)))
    (SETF POS (1- (LENGTH *METHOD-NAMES*))))
   POS)))
(PROGN
 (SYSTEM::C-DEFUN 'FIND-OR-CREATE-NAME
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(NAME))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'GEM-METHOD)
 (SYSTEM::%PUTD 'GEM-METHOD
  (SYSTEM::MAKE-MACRO
   (FUNCTION GEM-METHOD
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 3.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET*
       ((METHOD-NAME (CADR . #1=(SYSTEM::<MACRO-FORM>))) (ARGS (CADDR . #1#)))
       (BLOCK GEM-METHOD
        (LET
         ((MACRO-NAME (INTERN (SYMBOL-NAME METHOD-NAME) (FIND-PACKAGE "GEM")))
          (HAS-REST (FIND '&REST ARGS)))
         `(PROGN (FIND-OR-CREATE-NAME ,METHOD-NAME)
           (DEFUN ,MACRO-NAME (,@ARGS)
            (,(IF HAS-REST 'APPLY 'FUNCALL)
             (AREF (G-VALUE ,(CAR ARGS) :METHODS)
              ,(FIND-OR-CREATE-NAME METHOD-NAME))
             ,@(IF (OR HAS-REST (INTERSECTION '(&KEY &OPTIONAL) ARGS))
                (DO ((HEAD ARGS (CDR HEAD)) (IN-KEY NIL) (FINAL NIL))
                 ((NULL HEAD) (NREVERSE FINAL))
                 (CASE (CAR HEAD) ((&OPTIONAL &REST)) (&KEY (SETF IN-KEY T))
                  (T
                   (LET ((SYMBOL (CAR HEAD)))
                    (IF (LISTP SYMBOL) (SETF SYMBOL (CAR SYMBOL)))
                    (IF IN-KEY
                     (PUSH
                      (INTERN (SYMBOL-NAME SYMBOL) (FIND-PACKAGE #2="KEYWORD"))
                      FINAL))
                    (PUSH SYMBOL FINAL)))))
                ARGS)))
           (EVAL-WHEN (EVAL LOAD COMPILE) (EXPORT ',MACRO-NAME))))))))))))
(PROGN
 (SYSTEM::C-DEFUN 'INIT-DEVICE
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(DEVICE-TYPE DISPLAY-NAME))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'ADJUST)
 (SYSTEM::%PUTD 'ADJUST
  (SYSTEM::MAKE-MACRO
   (FUNCTION ADJUST
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((NAME (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK ADJUST
        `(PROGN
          (ATTACH-METHOD X-DEVICE
           (INTERN ,(SYMBOL-NAME NAME) (FIND-PACKAGE #1="KEYWORD"))
           (SYMBOL-FUNCTION
            (INTERN (CONCATENATE 'STRING #2="X-" ,(SYMBOL-NAME NAME))
             (FIND-PACKAGE #3="GEM"))))
          (SET-WINDOW-METHODS OPAL::WINDOW X-DEVICE))))))))))
(PROGN
 (SYSTEM::C-DEFUN 'TRACE-GEM (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(DEVICE))))
(PROGN
 (SYSTEM::C-DEFUN 'UNTRACE-GEM (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(DEVICE))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'THE-DISPLAY)
 (SYSTEM::%PUTD 'THE-DISPLAY
  (SYSTEM::MAKE-MACRO
   (FUNCTION THE-DISPLAY
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((WINDOW (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK THE-DISPLAY
        `(OPAL::DISPLAY-INFO-DISPLAY (G-VALUE ,WINDOW :DISPLAY-INFO))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'THE-DRAWABLE)
 (SYSTEM::%PUTD 'THE-DRAWABLE
  (SYSTEM::MAKE-MACRO
   (FUNCTION THE-DRAWABLE
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((WINDOW (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK THE-DRAWABLE
        `(OR (G-LOCAL-VALUE ,WINDOW :BUFFER)
          (G-VALUE ,WINDOW :DRAWABLE))))))))))