#0Y UTF-8

(PROGN (SETQ *PACKAGE* (SYSTEM::%FIND-PACKAGE "GARNET-UTILS")))
(PROGN
 (EXPORT
  '(WHILE UNTIL DO2LISTS DOLIST2 M M1 STRING+ ADD-TO-LIST VERIFY-BINDING
    SAFE-FUNCTIONP PROBE-DIRECTORY PI/2 PI3/2 2PI -2PI SHORT-PI)))
(PROGN (SYSTEM::C-PROCLAIM-CONSTANT 'PI/2 '(/ PI 2.)))
(PROGN (SYSTEM::C-PROCLAIM-CONSTANT 'PI3/2 '(* 3. (/ PI 2.))))
(PROGN (SYSTEM::C-PROCLAIM-CONSTANT '2PI '(* 2. PI)))
(PROGN (SYSTEM::C-PROCLAIM-CONSTANT '-2PI '(- (* 2. PI))))
(PROGN (SYSTEM::C-PROCLAIM-CONSTANT 'SHORT-PI '(COERCE PI 'SHORT-FLOAT)))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'WHILE)
 (SYSTEM::%PUTD 'WHILE
  (SYSTEM::MAKE-MACRO
   (FUNCTION WHILE
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (< (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((TEST (CADR . #1=(SYSTEM::<MACRO-FORM>))) (BODY (CDDR . #1#)))
       (BLOCK WHILE `(LOOP (IF (NOT ,TEST) (RETURN)) ,@BODY)))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'UNTIL)
 (SYSTEM::%PUTD 'UNTIL
  (SYSTEM::MAKE-MACRO
   (FUNCTION UNTIL
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (< (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((TEST (CADR . #1=(SYSTEM::<MACRO-FORM>))) (BODY (CDDR . #1#)))
       (BLOCK UNTIL `(LOOP ,@BODY (IF ,TEST (RETURN)))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'DO2LISTS)
 (SYSTEM::%PUTD 'DO2LISTS
  (SYSTEM::MAKE-MACRO
   (FUNCTION DO2LISTS
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (< (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET*
       ((VAR1 (CAADR . #1=(SYSTEM::<MACRO-FORM>))) (LIST1 (CADADR . #1#))
        (VAR2 (CAR #2=(CDDADR . #1#))) (LIST2 (CADR . #3=(#2#)))
        (#4=#:G1380 (CDDR . #3#)) (EITHER? (GETF #4# :EITHER? NIL))
        (BODY (CDDR . #1#)))
       (SYSTEM::KEYWORD-TEST #4# '(:EITHER?))
       (BLOCK DO2LISTS
        (LET
         ((LIST1VAR (GENSYM)) (LIST2VAR (GENSYM))
          (DONE-TEST (IF EITHER? 'AND 'OR)))
         `(LET ((,LIST1VAR ,LIST1) (,LIST2VAR ,LIST2) ,VAR1 ,VAR2)
           (WHILE (,DONE-TEST ,LIST1VAR ,LIST2VAR) (SETQ ,VAR1 (CAR ,LIST1VAR))
            (SETQ ,VAR2 (CAR ,LIST2VAR)) (SETQ ,LIST1VAR (CDR ,LIST1VAR))
            (SETQ ,LIST2VAR (CDR ,LIST2VAR)) ,@BODY)))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'DOLIST2)
 (SYSTEM::%PUTD 'DOLIST2
  (SYSTEM::MAKE-MACRO
   (FUNCTION DOLIST2
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (< (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET*
       ((VAR1 (CAADR . #1=(SYSTEM::<MACRO-FORM>))) (VAR2 (CADADR . #1#))
        (LIST (CAR (CDDADR . #1#))) (BODY (CDDR . #1#)))
       (BLOCK DOLIST2
        (LET ((LISTVAR (GENSYM)))
         `(LET ((,LISTVAR ,LIST) ,VAR1 ,VAR2)
           (WHILE ,LISTVAR (SETQ ,VAR1 (CAR ,LISTVAR))
            (SETQ ,VAR2 (CADR ,LISTVAR)) (SETQ ,LISTVAR (CDDR ,LISTVAR))
            ,@BODY)))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'M)
 (SYSTEM::%PUTD 'M
  (SYSTEM::MAKE-MACRO
   (FUNCTION M
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((S-EXPR (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK M `(PPRINT (MACROEXPAND ',S-EXPR))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'M1)
 (SYSTEM::%PUTD 'M1
  (SYSTEM::MAKE-MACRO
   (FUNCTION M1
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((S-EXPR (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK M1 `(PPRINT (MACROEXPAND-1 ',S-EXPR))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'STRING+)
 (SYSTEM::%PUTD 'STRING+
  (SYSTEM::MAKE-MACRO
   (FUNCTION STRING+
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (LET* ((ARGS (CDR SYSTEM::<MACRO-FORM>)))
      (BLOCK STRING+ `(CONCATENATE 'STRING ,@ARGS))))))))
(PROGN
 (SYSTEM::C-DEFUN 'ADD-TO-LIST
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(ELEMENT LIST &OPTIONAL WHERE LOCATOR))))
(PROGN
 (SYSTEM::C-DEFUN 'VERIFY-BINDING
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(STRING))))
(PROGN
 (SYSTEM::C-DEFUN 'VERIFY-BINDING-AUX
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(STRING START))))
(PROGN
 (SYSTEM::C-DEFUN 'SAFE-FUNCTIONP (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(FN))))
(PROGN
 (SYSTEM::C-DEFUN 'PROBE-DIRECTORY
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(FILENAME))))