#0Y UTF-8

(PROGN (SETQ *PACKAGE* (SYSTEM::%FIND-PACKAGE "OPAL")))
(PROGN
 (SYSTEM::C-DEFUN 'BETWEEN (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(V LOW HIGH))))
(PROGN
 (SYSTEM::C-DEFUN 'RECTANGLE-CONFLICTP
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE
   '(LOWX1 HIGHX1 LOWY1 HIGHY1 LOWX2 HIGHX2 LOWY2 HIGHY2))))
(PROGN
 (LET NIL
  (LET
   ((#1=#:G52332
     (CONS 'NODE
      (SVREF (GET 'STRUCTURE-OBJECT 'SYSTEM::DEFSTRUCT-DESCRIPTION) 0.))))
   (DEFUN MAKE-NODE
    (&KEY KEY INFO-LIST PREV NEXT LEFT-CHILD RIGHT-CHILD PARENT)
    (LET ((SYSTEM::OBJECT (SYSTEM::%MAKE-STRUCTURE #1# 8.)))
     (SETF (SYSTEM::%STRUCTURE-REF 'NODE SYSTEM::OBJECT 1.) (THE T KEY))
     (SETF (SYSTEM::%STRUCTURE-REF 'NODE SYSTEM::OBJECT 2.) (THE T INFO-LIST))
     (SETF (SYSTEM::%STRUCTURE-REF 'NODE SYSTEM::OBJECT 3.) (THE T PREV))
     (SETF (SYSTEM::%STRUCTURE-REF 'NODE SYSTEM::OBJECT 4.) (THE T NEXT))
     (SETF (SYSTEM::%STRUCTURE-REF 'NODE SYSTEM::OBJECT 5.) (THE T LEFT-CHILD))
     (SETF (SYSTEM::%STRUCTURE-REF 'NODE SYSTEM::OBJECT 6.)
      (THE T RIGHT-CHILD))
     (SETF (SYSTEM::%STRUCTURE-REF 'NODE SYSTEM::OBJECT 7.) (THE T PARENT))
     SYSTEM::OBJECT))
   (SYSTEM::%PUT 'NODE 'SYSTEM::DEFSTRUCT-DESCRIPTION
    (VECTOR #1# 'T 'MAKE-NODE
     `(#(KEY (:KEY) 1. (NIL) NIL T NIL)
       #(INFO-LIST (:INFO-LIST) 2. (NIL) NIL T NIL)
       #(PREV (:PREV) 3. (NIL) NIL T NIL) #(NEXT (:NEXT) 4. (NIL) NIL T NIL)
       #(LEFT-CHILD (:LEFT-CHILD) 5. (NIL) NIL T NIL)
       #(RIGHT-CHILD (:RIGHT-CHILD) 6. (NIL) NIL T NIL)
       #(PARENT (:PARENT) 7. (NIL) NIL T NIL)))))
  (CLOS::DEFINE-STRUCTURE-CLASS 'NODE) (PROCLAIM '(INLINE NODE-P))
  (DEFUN NODE-P (SYSTEM::OBJECT)
   (SYSTEM::%STRUCTURE-TYPE-P 'NODE SYSTEM::OBJECT))
  (PROCLAIM '(INLINE COPY-NODE))
  (DEFUN COPY-NODE (STRUCTURE) (COPY-STRUCTURE STRUCTURE))
  (PROCLAIM '(FUNCTION NODE-KEY (NODE) T)) (PROCLAIM '(INLINE NODE-KEY))
  (DEFUN NODE-KEY #2=(SYSTEM::OBJECT)
   (THE T (SYSTEM::%STRUCTURE-REF 'NODE SYSTEM::OBJECT 1.)))
  (SYSTEM::%PUT 'NODE-KEY #3='SYSTEM::DEFSTRUCT-READER 'NODE)
  (PROCLAIM '(FUNCTION NODE-INFO-LIST (NODE) T))
  (PROCLAIM '(INLINE NODE-INFO-LIST))
  (DEFUN NODE-INFO-LIST #2#
   (THE T (SYSTEM::%STRUCTURE-REF 'NODE SYSTEM::OBJECT 2.)))
  (SYSTEM::%PUT 'NODE-INFO-LIST #3# 'NODE)
  (PROCLAIM '(FUNCTION NODE-PREV (NODE) T)) (PROCLAIM '(INLINE NODE-PREV))
  (DEFUN NODE-PREV #2#
   (THE T (SYSTEM::%STRUCTURE-REF 'NODE SYSTEM::OBJECT 3.)))
  (SYSTEM::%PUT 'NODE-PREV #3# 'NODE) (PROCLAIM '(FUNCTION NODE-NEXT (NODE) T))
  (PROCLAIM '(INLINE NODE-NEXT))
  (DEFUN NODE-NEXT #2#
   (THE T (SYSTEM::%STRUCTURE-REF 'NODE SYSTEM::OBJECT 4.)))
  (SYSTEM::%PUT 'NODE-NEXT #3# 'NODE)
  (PROCLAIM '(FUNCTION NODE-LEFT-CHILD (NODE) T))
  (PROCLAIM '(INLINE NODE-LEFT-CHILD))
  (DEFUN NODE-LEFT-CHILD #2#
   (THE T (SYSTEM::%STRUCTURE-REF 'NODE SYSTEM::OBJECT 5.)))
  (SYSTEM::%PUT 'NODE-LEFT-CHILD #3# 'NODE)
  (PROCLAIM '(FUNCTION NODE-RIGHT-CHILD (NODE) T))
  (PROCLAIM '(INLINE NODE-RIGHT-CHILD))
  (DEFUN NODE-RIGHT-CHILD #2#
   (THE T (SYSTEM::%STRUCTURE-REF 'NODE SYSTEM::OBJECT 6.)))
  (SYSTEM::%PUT 'NODE-RIGHT-CHILD #3# 'NODE)
  (PROCLAIM '(FUNCTION NODE-PARENT (NODE) T)) (PROCLAIM '(INLINE NODE-PARENT))
  (DEFUN NODE-PARENT #2#
   (THE T (SYSTEM::%STRUCTURE-REF 'NODE SYSTEM::OBJECT 7.)))
  (SYSTEM::%PUT 'NODE-PARENT #3# 'NODE)
  (DEFSETF NODE-KEY #4=(SYSTEM::STRUCT) #5=(SYSTEM::VALUE)
   (LIST #6='SYSTEM::%STRUCTURE-STORE ''NODE SYSTEM::STRUCT 1. SYSTEM::VALUE))
  (SYSTEM::%PUT 'NODE-KEY #7='SYSTEM::DEFSTRUCT-WRITER 'NODE)
  (DEFSETF NODE-INFO-LIST #4# #5#
   (LIST #6# ''NODE SYSTEM::STRUCT 2. SYSTEM::VALUE))
  (SYSTEM::%PUT 'NODE-INFO-LIST #7# 'NODE)
  (DEFSETF NODE-PREV #4# #5# (LIST #6# ''NODE SYSTEM::STRUCT 3. SYSTEM::VALUE))
  (SYSTEM::%PUT 'NODE-PREV #7# 'NODE)
  (DEFSETF NODE-NEXT #4# #5# (LIST #6# ''NODE SYSTEM::STRUCT 4. SYSTEM::VALUE))
  (SYSTEM::%PUT 'NODE-NEXT #7# 'NODE)
  (DEFSETF NODE-LEFT-CHILD #4# #5#
   (LIST #6# ''NODE SYSTEM::STRUCT 5. SYSTEM::VALUE))
  (SYSTEM::%PUT 'NODE-LEFT-CHILD #7# 'NODE)
  (DEFSETF NODE-RIGHT-CHILD #4# #5#
   (LIST #6# ''NODE SYSTEM::STRUCT 6. SYSTEM::VALUE))
  (SYSTEM::%PUT 'NODE-RIGHT-CHILD #7# 'NODE)
  (DEFSETF NODE-PARENT #4# #5#
   (LIST #6# ''NODE SYSTEM::STRUCT 7. SYSTEM::VALUE))
  (SYSTEM::%PUT 'NODE-PARENT #7# 'NODE)
  (SETF (DOCUMENTATION 'NODE 'STRUCTURE) NIL)
  (CLOS::DEFSTRUCT-REMOVE-PRINT-OBJECT-METHOD 'NODE) 'NODE))
(PROGN
 (SYSTEM::C-DEFUN 'MAKE-NODE
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE
   '(&KEY KEY INFO-LIST PREV NEXT LEFT-CHILD RIGHT-CHILD PARENT))))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE NODE-P)))
(PROGN
 (SYSTEM::C-DEFUN 'NODE-P
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(SYSTEM::OBJECT))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN NODE-P))
    (BLOCK NODE-P (SYSTEM::%STRUCTURE-TYPE-P 'NODE SYSTEM::OBJECT)))))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE COPY-NODE)))
(PROGN
 (SYSTEM::C-DEFUN 'COPY-NODE (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(STRUCTURE))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN COPY-NODE))
    (BLOCK COPY-NODE (COPY-STRUCTURE STRUCTURE)))))
(PROGN (SYSTEM::C-PROCLAIM '(FUNCTION NODE-KEY (NODE) T)))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE NODE-KEY)))
(PROGN
 (SYSTEM::C-DEFUN 'NODE-KEY
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(SYSTEM::OBJECT))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN NODE-KEY))
    (BLOCK NODE-KEY
     (THE T (SYSTEM::%STRUCTURE-REF 'NODE SYSTEM::OBJECT 1.))))))
(PROGN (SYSTEM::C-PROCLAIM '(FUNCTION NODE-INFO-LIST (NODE) T)))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE NODE-INFO-LIST)))
(PROGN
 (SYSTEM::C-DEFUN 'NODE-INFO-LIST
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(SYSTEM::OBJECT))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN NODE-INFO-LIST))
    (BLOCK NODE-INFO-LIST
     (THE T (SYSTEM::%STRUCTURE-REF 'NODE SYSTEM::OBJECT 2.))))))
(PROGN (SYSTEM::C-PROCLAIM '(FUNCTION NODE-PREV (NODE) T)))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE NODE-PREV)))
(PROGN
 (SYSTEM::C-DEFUN 'NODE-PREV
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(SYSTEM::OBJECT))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN NODE-PREV))
    (BLOCK NODE-PREV
     (THE T (SYSTEM::%STRUCTURE-REF 'NODE SYSTEM::OBJECT 3.))))))
(PROGN (SYSTEM::C-PROCLAIM '(FUNCTION NODE-NEXT (NODE) T)))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE NODE-NEXT)))
(PROGN
 (SYSTEM::C-DEFUN 'NODE-NEXT
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(SYSTEM::OBJECT))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN NODE-NEXT))
    (BLOCK NODE-NEXT
     (THE T (SYSTEM::%STRUCTURE-REF 'NODE SYSTEM::OBJECT 4.))))))
(PROGN (SYSTEM::C-PROCLAIM '(FUNCTION NODE-LEFT-CHILD (NODE) T)))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE NODE-LEFT-CHILD)))
(PROGN
 (SYSTEM::C-DEFUN 'NODE-LEFT-CHILD
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(SYSTEM::OBJECT))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN NODE-LEFT-CHILD))
    (BLOCK NODE-LEFT-CHILD
     (THE T (SYSTEM::%STRUCTURE-REF 'NODE SYSTEM::OBJECT 5.))))))
(PROGN (SYSTEM::C-PROCLAIM '(FUNCTION NODE-RIGHT-CHILD (NODE) T)))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE NODE-RIGHT-CHILD)))
(PROGN
 (SYSTEM::C-DEFUN 'NODE-RIGHT-CHILD
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(SYSTEM::OBJECT))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN NODE-RIGHT-CHILD))
    (BLOCK NODE-RIGHT-CHILD
     (THE T (SYSTEM::%STRUCTURE-REF 'NODE SYSTEM::OBJECT 6.))))))
(PROGN (SYSTEM::C-PROCLAIM '(FUNCTION NODE-PARENT (NODE) T)))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE NODE-PARENT)))
(PROGN
 (SYSTEM::C-DEFUN 'NODE-PARENT
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(SYSTEM::OBJECT))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN NODE-PARENT))
    (BLOCK NODE-PARENT
     (THE T (SYSTEM::%STRUCTURE-REF 'NODE SYSTEM::OBJECT 7.))))))
(PROGN
 (LET NIL (REMPROP 'NODE-KEY 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'NODE-KEY 'SYSTEM::SETF-EXPANDER
   (LIST* -1. 1.
    (FUNCTION SETF-NODE-KEY
     (LAMBDA (SYSTEM::%ACCESS-ARGLIST SYSTEM::VALUE)
      (LET* ((SYSTEM::STRUCT (CADR SYSTEM::%ACCESS-ARGLIST)))
       (BLOCK NODE-KEY
        (LIST 'SYSTEM::%STRUCTURE-STORE ''NODE SYSTEM::STRUCT 1.
         SYSTEM::VALUE)))))))
  (SYSTEM::%SET-DOCUMENTATION 'NODE-KEY 'SETF NIL) 'NODE-KEY))
(PROGN
 (LET NIL (REMPROP 'NODE-INFO-LIST 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'NODE-INFO-LIST 'SYSTEM::SETF-EXPANDER
   (LIST* -1. 1.
    (FUNCTION SETF-NODE-INFO-LIST
     (LAMBDA (SYSTEM::%ACCESS-ARGLIST SYSTEM::VALUE)
      (LET* ((SYSTEM::STRUCT (CADR SYSTEM::%ACCESS-ARGLIST)))
       (BLOCK NODE-INFO-LIST
        (LIST 'SYSTEM::%STRUCTURE-STORE ''NODE SYSTEM::STRUCT 2.
         SYSTEM::VALUE)))))))
  (SYSTEM::%SET-DOCUMENTATION 'NODE-INFO-LIST 'SETF NIL) 'NODE-INFO-LIST))
(PROGN
 (LET NIL (REMPROP 'NODE-PREV 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'NODE-PREV 'SYSTEM::SETF-EXPANDER
   (LIST* -1. 1.
    (FUNCTION SETF-NODE-PREV
     (LAMBDA (SYSTEM::%ACCESS-ARGLIST SYSTEM::VALUE)
      (LET* ((SYSTEM::STRUCT (CADR SYSTEM::%ACCESS-ARGLIST)))
       (BLOCK NODE-PREV
        (LIST 'SYSTEM::%STRUCTURE-STORE ''NODE SYSTEM::STRUCT 3.
         SYSTEM::VALUE)))))))
  (SYSTEM::%SET-DOCUMENTATION 'NODE-PREV 'SETF NIL) 'NODE-PREV))
(PROGN
 (LET NIL (REMPROP 'NODE-NEXT 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'NODE-NEXT 'SYSTEM::SETF-EXPANDER
   (LIST* -1. 1.
    (FUNCTION SETF-NODE-NEXT
     (LAMBDA (SYSTEM::%ACCESS-ARGLIST SYSTEM::VALUE)
      (LET* ((SYSTEM::STRUCT (CADR SYSTEM::%ACCESS-ARGLIST)))
       (BLOCK NODE-NEXT
        (LIST 'SYSTEM::%STRUCTURE-STORE ''NODE SYSTEM::STRUCT 4.
         SYSTEM::VALUE)))))))
  (SYSTEM::%SET-DOCUMENTATION 'NODE-NEXT 'SETF NIL) 'NODE-NEXT))
(PROGN
 (LET NIL (REMPROP 'NODE-LEFT-CHILD 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'NODE-LEFT-CHILD 'SYSTEM::SETF-EXPANDER
   (LIST* -1. 1.
    (FUNCTION SETF-NODE-LEFT-CHILD
     (LAMBDA (SYSTEM::%ACCESS-ARGLIST SYSTEM::VALUE)
      (LET* ((SYSTEM::STRUCT (CADR SYSTEM::%ACCESS-ARGLIST)))
       (BLOCK NODE-LEFT-CHILD
        (LIST 'SYSTEM::%STRUCTURE-STORE ''NODE SYSTEM::STRUCT 5.
         SYSTEM::VALUE)))))))
  (SYSTEM::%SET-DOCUMENTATION 'NODE-LEFT-CHILD 'SETF NIL) 'NODE-LEFT-CHILD))
(PROGN
 (LET NIL (REMPROP 'NODE-RIGHT-CHILD 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'NODE-RIGHT-CHILD 'SYSTEM::SETF-EXPANDER
   (LIST* -1. 1.
    (FUNCTION SETF-NODE-RIGHT-CHILD
     (LAMBDA (SYSTEM::%ACCESS-ARGLIST SYSTEM::VALUE)
      (LET* ((SYSTEM::STRUCT (CADR SYSTEM::%ACCESS-ARGLIST)))
       (BLOCK NODE-RIGHT-CHILD
        (LIST 'SYSTEM::%STRUCTURE-STORE ''NODE SYSTEM::STRUCT 6.
         SYSTEM::VALUE)))))))
  (SYSTEM::%SET-DOCUMENTATION 'NODE-RIGHT-CHILD 'SETF NIL) 'NODE-RIGHT-CHILD))
(PROGN
 (LET NIL (REMPROP 'NODE-PARENT 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'NODE-PARENT 'SYSTEM::SETF-EXPANDER
   (LIST* -1. 1.
    (FUNCTION SETF-NODE-PARENT
     (LAMBDA (SYSTEM::%ACCESS-ARGLIST SYSTEM::VALUE)
      (LET* ((SYSTEM::STRUCT (CADR SYSTEM::%ACCESS-ARGLIST)))
       (BLOCK NODE-PARENT
        (LIST 'SYSTEM::%STRUCTURE-STORE ''NODE SYSTEM::STRUCT 7.
         SYSTEM::VALUE)))))))
  (SYSTEM::%SET-DOCUMENTATION 'NODE-PARENT 'SETF NIL) 'NODE-PARENT))
(PROGN
 (SYSTEM::C-DEFUN 'MAKE-BINARY-TREE
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(KEY= KEY< INFO-ITEM=))))
(PROGN
 (SYSTEM::C-DEFUN 'MAKE-RECTANGLE-CONFLICT-OBJECT
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE 'NIL)))