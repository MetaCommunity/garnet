#0Y UTF-8

(PROGN (SETQ *PACKAGE* (SYSTEM::%FIND-PACKAGE "KR")))
(PROGN
 (EXPORT
  '(SCHEMA CREATE-INSTANCE CREATE-PROTOTYPE CREATE-RELATION CREATE-SCHEMA
    FORMULA O-FORMULA SCHEMA-P RELATION-P IS-A-P HAS-SLOT-P FORMULA-P S-VALUE
    G-VALUE G-CACHED-VALUE G-LOCAL-VALUE GV GVL GV-LOCAL GET-VALUE
    GET-LOCAL-VALUE DOVALUES DOSLOTS DEFINE-METHOD KR-SEND
    CALL-PROTOTYPE-METHOD APPLY-PROTOTYPE-METHOD METHOD-TRACE
    WITH-CONSTANTS-DISABLED WITH-TYPES-DISABLED WITH-DEMONS-DISABLED
    WITH-DEMON-DISABLED WITH-DEMON-ENABLED CHANGE-FORMULA MOVE-FORMULA
    RECOMPUTE-FORMULA COPY-FORMULA KR-PATH MARK-AS-CHANGED MARK-AS-INVALID PS
    CALL-ON-PS-SLOTS NAME-FOR-SCHEMA DECLARE-CONSTANT SLOT-CONSTANT-P
    DESTROY-SLOT DESTROY-SCHEMA DESTROY-CONSTRAINT DEF-KR-TYPE G-TYPE S-TYPE
    CHECK-SLOT-TYPE KR-BOOLEAN GET-TYPE-DOCUMENTATION SET-TYPE-DOCUMENTATION
    GET-TYPE-DEFINITION GET-DECLARATIONS GET-SLOT-DECLARATIONS G-FORMULA-VALUE
    S-FORMULA-VALUE)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *KR-VERSION*)))
(PROGN (DEFVAR *SPECIAL-KR-OPTIMIZATION* '(OPTIMIZE (SPEED 3.) (SPACE 0.)))
 (PROCLAIM '(SPECIAL COMMON-LISP-USER::*DEFAULT-GARNET-PROCLAIM*))
 (IF (BOUNDP 'COMMON-LISP-USER::*DEFAULT-GARNET-PROCLAIM*)
  (IF COMMON-LISP-USER::*DEFAULT-GARNET-PROCLAIM*
   (PROCLAIM COMMON-LISP-USER::*DEFAULT-GARNET-PROCLAIM*))
  (PROCLAIM '(OPTIMIZE (SAFETY 1.) (SPACE 0.) (SPEED 3.)))))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *SPECIAL-KR-OPTIMIZATION*)))
(PROGN
 (SYSTEM::C-PROCLAIM '(SPECIAL COMMON-LISP-USER::*DEFAULT-GARNET-PROCLAIM*)))
(PROGN (SYSTEM::C-PROCLAIM '(OPTIMIZE (SAFETY 1.) (SPACE 0.) (SPEED 3.))))
(PROGN
 (LET NIL
  (LET
   ((#1=#:G1586
     (CONS 'SCHEMA
      (SVREF (GET 'STRUCTURE-OBJECT 'SYSTEM::DEFSTRUCT-DESCRIPTION) 0.))))
   (DEFUN MAKE-SCHEMA (&KEY NAME BINS)
    (LET ((SYSTEM::OBJECT (SYSTEM::%MAKE-STRUCTURE #1# 3.)))
     (SETF (SYSTEM::%STRUCTURE-REF 'SCHEMA SYSTEM::OBJECT 1.) (THE T NAME))
     (SETF (SYSTEM::%STRUCTURE-REF 'SCHEMA SYSTEM::OBJECT 2.) (THE T BINS))
     SYSTEM::OBJECT))
   (SYSTEM::%PUT 'SCHEMA 'SYSTEM::DEFSTRUCT-DESCRIPTION
    (VECTOR #1# 'T 'MAKE-SCHEMA
     `(#(NAME (:NAME) 1. (NIL) NIL T NIL)
       #(BINS (:BINS) 2. (NIL) NIL T NIL)))))
  (CLOS::DEFINE-STRUCTURE-CLASS 'SCHEMA) (PROCLAIM '(INLINE IS-SCHEMA))
  (DEFUN IS-SCHEMA (SYSTEM::OBJECT)
   (SYSTEM::%STRUCTURE-TYPE-P 'SCHEMA SYSTEM::OBJECT))
  (PROCLAIM '(INLINE COPY-SCHEMA))
  (DEFUN COPY-SCHEMA (STRUCTURE) (COPY-STRUCTURE STRUCTURE))
  (PROCLAIM '(FUNCTION SCHEMA-NAME (SCHEMA) T))
  (PROCLAIM '(INLINE SCHEMA-NAME))
  (DEFUN SCHEMA-NAME #2=(SYSTEM::OBJECT)
   (THE T (SYSTEM::%STRUCTURE-REF 'SCHEMA SYSTEM::OBJECT 1.)))
  (SYSTEM::%PUT 'SCHEMA-NAME #3='SYSTEM::DEFSTRUCT-READER 'SCHEMA)
  (PROCLAIM '(FUNCTION SCHEMA-BINS (SCHEMA) T))
  (PROCLAIM '(INLINE SCHEMA-BINS))
  (DEFUN SCHEMA-BINS #2#
   (THE T (SYSTEM::%STRUCTURE-REF 'SCHEMA SYSTEM::OBJECT 2.)))
  (SYSTEM::%PUT 'SCHEMA-BINS #3# 'SCHEMA)
  (DEFSETF SCHEMA-NAME #4=(SYSTEM::STRUCT) #5=(SYSTEM::VALUE)
   (LIST #6='SYSTEM::%STRUCTURE-STORE ''SCHEMA SYSTEM::STRUCT 1.
    SYSTEM::VALUE))
  (SYSTEM::%PUT 'SCHEMA-NAME #7='SYSTEM::DEFSTRUCT-WRITER 'SCHEMA)
  (DEFSETF SCHEMA-BINS #4# #5#
   (LIST #6# ''SCHEMA SYSTEM::STRUCT 2. SYSTEM::VALUE))
  (SYSTEM::%PUT 'SCHEMA-BINS #7# 'SCHEMA)
  (SETF (DOCUMENTATION 'SCHEMA 'STRUCTURE) NIL)
  (DEFMETHOD PRINT-OBJECT ((SYSTEM::STRUCT SCHEMA) STREAM)
   (PROGN (PRINT-THE-SCHEMA SYSTEM::STRUCT STREAM SYSTEM::*PRIN-LEVEL*)))
  'SCHEMA))
(PROGN
 (SYSTEM::C-DEFUN 'MAKE-SCHEMA
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(&KEY NAME BINS))))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE IS-SCHEMA)))
(PROGN
 (SYSTEM::C-DEFUN 'IS-SCHEMA
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(SYSTEM::OBJECT))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN IS-SCHEMA))
    (BLOCK IS-SCHEMA (SYSTEM::%STRUCTURE-TYPE-P 'SCHEMA SYSTEM::OBJECT)))))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE COPY-SCHEMA)))
(PROGN
 (SYSTEM::C-DEFUN 'COPY-SCHEMA
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(STRUCTURE))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN COPY-SCHEMA))
    (BLOCK COPY-SCHEMA (COPY-STRUCTURE STRUCTURE)))))
(PROGN (SYSTEM::C-PROCLAIM '(FUNCTION SCHEMA-NAME (SCHEMA) T)))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE SCHEMA-NAME)))
(PROGN
 (SYSTEM::C-DEFUN 'SCHEMA-NAME
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(SYSTEM::OBJECT))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN SCHEMA-NAME))
    (BLOCK SCHEMA-NAME
     (THE T (SYSTEM::%STRUCTURE-REF 'SCHEMA SYSTEM::OBJECT 1.))))))
(PROGN (SYSTEM::C-PROCLAIM '(FUNCTION SCHEMA-BINS (SCHEMA) T)))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE SCHEMA-BINS)))
(PROGN
 (SYSTEM::C-DEFUN 'SCHEMA-BINS
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(SYSTEM::OBJECT))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN SCHEMA-BINS))
    (BLOCK SCHEMA-BINS
     (THE T (SYSTEM::%STRUCTURE-REF 'SCHEMA SYSTEM::OBJECT 2.))))))
(PROGN
 (LET NIL (REMPROP 'SCHEMA-NAME 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'SCHEMA-NAME 'SYSTEM::SETF-EXPANDER
   (LIST* -1. 1.
    (FUNCTION SETF-SCHEMA-NAME
     (LAMBDA (SYSTEM::%ACCESS-ARGLIST SYSTEM::VALUE)
      (LET* ((SYSTEM::STRUCT (CADR SYSTEM::%ACCESS-ARGLIST)))
       (BLOCK SCHEMA-NAME
        (LIST 'SYSTEM::%STRUCTURE-STORE ''SCHEMA SYSTEM::STRUCT 1.
         SYSTEM::VALUE)))))))
  (SYSTEM::%SET-DOCUMENTATION 'SCHEMA-NAME 'SETF NIL) 'SCHEMA-NAME))
(PROGN
 (LET NIL (REMPROP 'SCHEMA-BINS 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'SCHEMA-BINS 'SYSTEM::SETF-EXPANDER
   (LIST* -1. 1.
    (FUNCTION SETF-SCHEMA-BINS
     (LAMBDA (SYSTEM::%ACCESS-ARGLIST SYSTEM::VALUE)
      (LET* ((SYSTEM::STRUCT (CADR SYSTEM::%ACCESS-ARGLIST)))
       (BLOCK SCHEMA-BINS
        (LIST 'SYSTEM::%STRUCTURE-STORE ''SCHEMA SYSTEM::STRUCT 2.
         SYSTEM::VALUE)))))))
  (SYSTEM::%SET-DOCUMENTATION 'SCHEMA-BINS 'SETF NIL) 'SCHEMA-BINS))
(PROGN
 (SYSTEM::C-DEFUN 'PRINT-OBJECT
  #S(SYSTEM::SIGNATURE :REQ-NUM 2. :OPT-NUM 0. :REST-P NIL :KEYS-P NIL
     :KEYWORDS NIL :ALLOW-P NIL)))
(PROGN
 (LET NIL
  (LET
   ((#1=#:G1663
     (CONS 'A-FORMULA
      (SVREF (GET 'SCHEMA 'SYSTEM::DEFSTRUCT-DESCRIPTION) 0.))))
   (DEFUN MAKE-A-FORMULA
    (&KEY NAME BINS DEPENDS-ON SCHEMA SLOT CACHED-VALUE PATH IS-A FUNCTION
     LAMBDA IS-A-INV META)
    (LET ((SYSTEM::OBJECT (SYSTEM::%MAKE-STRUCTURE #1# 13.)))
     (SETF (SYSTEM::%STRUCTURE-REF 'A-FORMULA SYSTEM::OBJECT 1.) (THE T NAME))
     (SETF (SYSTEM::%STRUCTURE-REF 'A-FORMULA SYSTEM::OBJECT 2.) (THE T BINS))
     (SETF (SYSTEM::%STRUCTURE-REF 'A-FORMULA SYSTEM::OBJECT 3.)
      (THE T DEPENDS-ON))
     (SETF (SYSTEM::%STRUCTURE-REF 'A-FORMULA SYSTEM::OBJECT 4.)
      (THE T SCHEMA))
     (SETF (SYSTEM::%STRUCTURE-REF 'A-FORMULA SYSTEM::OBJECT 5.) (THE T SLOT))
     (SETF (SYSTEM::%STRUCTURE-REF 'A-FORMULA SYSTEM::OBJECT 6.)
      (THE T CACHED-VALUE))
     (SETF (SYSTEM::%STRUCTURE-REF 'A-FORMULA SYSTEM::OBJECT 7.) (THE T PATH))
     (SETF (SYSTEM::%STRUCTURE-REF 'A-FORMULA SYSTEM::OBJECT 8.) (THE T IS-A))
     (SETF (SYSTEM::%STRUCTURE-REF 'A-FORMULA SYSTEM::OBJECT 9.)
      (THE T FUNCTION))
     (SETF (SYSTEM::%STRUCTURE-REF 'A-FORMULA SYSTEM::OBJECT 10.)
      (THE T LAMBDA))
     (SETF (SYSTEM::%STRUCTURE-REF 'A-FORMULA SYSTEM::OBJECT 11.)
      (THE T IS-A-INV))
     (SETF (SYSTEM::%STRUCTURE-REF 'A-FORMULA SYSTEM::OBJECT 12.) (THE T META))
     SYSTEM::OBJECT))
   (SYSTEM::%PUT 'A-FORMULA 'SYSTEM::DEFSTRUCT-DESCRIPTION
    (VECTOR #1# 'T 'MAKE-A-FORMULA
     `(#(NAME (:NAME) 1. (NIL) NIL T NIL) #(BINS (:BINS) 2. (NIL) NIL T NIL)
       #(DEPENDS-ON (:DEPENDS-ON) 3. (NIL) NIL T NIL)
       #(SCHEMA (:SCHEMA) 4. (NIL) NIL T NIL)
       #(SLOT (:SLOT) 5. (NIL) NIL T NIL)
       #(CACHED-VALUE (:CACHED-VALUE) 6. (NIL) NIL T NIL)
       #(PATH (:PATH) 7. (NIL) NIL T NIL) #(IS-A (:IS-A) 8. (NIL) NIL T NIL)
       #(FUNCTION (:FUNCTION) 9. (NIL) NIL T NIL)
       #(LAMBDA (:LAMBDA) 10. (NIL) NIL T NIL)
       #(IS-A-INV (:IS-A-INV) 11. (NIL) NIL T NIL)
       #(META (:META) 12. (NIL) NIL T NIL)))))
  (CLOS::DEFINE-STRUCTURE-CLASS 'A-FORMULA) (PROCLAIM '(INLINE A-FORMULA-P))
  (DEFUN A-FORMULA-P (SYSTEM::OBJECT)
   (SYSTEM::%STRUCTURE-TYPE-P 'A-FORMULA SYSTEM::OBJECT))
  (PROCLAIM '(INLINE COPY-A-FORMULA))
  (DEFUN COPY-A-FORMULA (STRUCTURE) (COPY-STRUCTURE STRUCTURE))
  (PROCLAIM '(FUNCTION A-FORMULA-NAME (A-FORMULA) T))
  (PROCLAIM '(INLINE A-FORMULA-NAME))
  (DEFUN A-FORMULA-NAME #2=(SYSTEM::OBJECT)
   (THE T (SYSTEM::%STRUCTURE-REF 'A-FORMULA SYSTEM::OBJECT 1.)))
  (SYSTEM::%PUT 'A-FORMULA-NAME #3='SYSTEM::DEFSTRUCT-READER 'A-FORMULA)
  (PROCLAIM '(FUNCTION A-FORMULA-BINS (A-FORMULA) T))
  (PROCLAIM '(INLINE A-FORMULA-BINS))
  (DEFUN A-FORMULA-BINS #2#
   (THE T (SYSTEM::%STRUCTURE-REF 'A-FORMULA SYSTEM::OBJECT 2.)))
  (SYSTEM::%PUT 'A-FORMULA-BINS #3# 'A-FORMULA)
  (PROCLAIM '(FUNCTION A-FORMULA-DEPENDS-ON (A-FORMULA) T))
  (PROCLAIM '(INLINE A-FORMULA-DEPENDS-ON))
  (DEFUN A-FORMULA-DEPENDS-ON #2#
   (THE T (SYSTEM::%STRUCTURE-REF 'A-FORMULA SYSTEM::OBJECT 3.)))
  (SYSTEM::%PUT 'A-FORMULA-DEPENDS-ON #3# 'A-FORMULA)
  (PROCLAIM '(FUNCTION A-FORMULA-SCHEMA (A-FORMULA) T))
  (PROCLAIM '(INLINE A-FORMULA-SCHEMA))
  (DEFUN A-FORMULA-SCHEMA #2#
   (THE T (SYSTEM::%STRUCTURE-REF 'A-FORMULA SYSTEM::OBJECT 4.)))
  (SYSTEM::%PUT 'A-FORMULA-SCHEMA #3# 'A-FORMULA)
  (PROCLAIM '(FUNCTION A-FORMULA-SLOT (A-FORMULA) T))
  (PROCLAIM '(INLINE A-FORMULA-SLOT))
  (DEFUN A-FORMULA-SLOT #2#
   (THE T (SYSTEM::%STRUCTURE-REF 'A-FORMULA SYSTEM::OBJECT 5.)))
  (SYSTEM::%PUT 'A-FORMULA-SLOT #3# 'A-FORMULA)
  (PROCLAIM '(FUNCTION A-FORMULA-CACHED-VALUE (A-FORMULA) T))
  (PROCLAIM '(INLINE A-FORMULA-CACHED-VALUE))
  (DEFUN A-FORMULA-CACHED-VALUE #2#
   (THE T (SYSTEM::%STRUCTURE-REF 'A-FORMULA SYSTEM::OBJECT 6.)))
  (SYSTEM::%PUT 'A-FORMULA-CACHED-VALUE #3# 'A-FORMULA)
  (PROCLAIM '(FUNCTION A-FORMULA-PATH (A-FORMULA) T))
  (PROCLAIM '(INLINE A-FORMULA-PATH))
  (DEFUN A-FORMULA-PATH #2#
   (THE T (SYSTEM::%STRUCTURE-REF 'A-FORMULA SYSTEM::OBJECT 7.)))
  (SYSTEM::%PUT 'A-FORMULA-PATH #3# 'A-FORMULA)
  (PROCLAIM '(FUNCTION A-FORMULA-IS-A (A-FORMULA) T))
  (PROCLAIM '(INLINE A-FORMULA-IS-A))
  (DEFUN A-FORMULA-IS-A #2#
   (THE T (SYSTEM::%STRUCTURE-REF 'A-FORMULA SYSTEM::OBJECT 8.)))
  (SYSTEM::%PUT 'A-FORMULA-IS-A #3# 'A-FORMULA)
  (PROCLAIM '(FUNCTION A-FORMULA-FUNCTION (A-FORMULA) T))
  (PROCLAIM '(INLINE A-FORMULA-FUNCTION))
  (DEFUN A-FORMULA-FUNCTION #2#
   (THE T (SYSTEM::%STRUCTURE-REF 'A-FORMULA SYSTEM::OBJECT 9.)))
  (SYSTEM::%PUT 'A-FORMULA-FUNCTION #3# 'A-FORMULA)
  (PROCLAIM '(FUNCTION A-FORMULA-LAMBDA (A-FORMULA) T))
  (PROCLAIM '(INLINE A-FORMULA-LAMBDA))
  (DEFUN A-FORMULA-LAMBDA #2#
   (THE T (SYSTEM::%STRUCTURE-REF 'A-FORMULA SYSTEM::OBJECT 10.)))
  (SYSTEM::%PUT 'A-FORMULA-LAMBDA #3# 'A-FORMULA)
  (PROCLAIM '(FUNCTION A-FORMULA-IS-A-INV (A-FORMULA) T))
  (PROCLAIM '(INLINE A-FORMULA-IS-A-INV))
  (DEFUN A-FORMULA-IS-A-INV #2#
   (THE T (SYSTEM::%STRUCTURE-REF 'A-FORMULA SYSTEM::OBJECT 11.)))
  (SYSTEM::%PUT 'A-FORMULA-IS-A-INV #3# 'A-FORMULA)
  (PROCLAIM '(FUNCTION A-FORMULA-META (A-FORMULA) T))
  (PROCLAIM '(INLINE A-FORMULA-META))
  (DEFUN A-FORMULA-META #2#
   (THE T (SYSTEM::%STRUCTURE-REF 'A-FORMULA SYSTEM::OBJECT 12.)))
  (SYSTEM::%PUT 'A-FORMULA-META #3# 'A-FORMULA)
  (DEFSETF A-FORMULA-NAME #4=(SYSTEM::STRUCT) #5=(SYSTEM::VALUE)
   (LIST #6='SYSTEM::%STRUCTURE-STORE ''A-FORMULA SYSTEM::STRUCT 1.
    SYSTEM::VALUE))
  (SYSTEM::%PUT 'A-FORMULA-NAME #7='SYSTEM::DEFSTRUCT-WRITER 'A-FORMULA)
  (DEFSETF A-FORMULA-BINS #4# #5#
   (LIST #6# ''A-FORMULA SYSTEM::STRUCT 2. SYSTEM::VALUE))
  (SYSTEM::%PUT 'A-FORMULA-BINS #7# 'A-FORMULA)
  (DEFSETF A-FORMULA-DEPENDS-ON #4# #5#
   (LIST #6# ''A-FORMULA SYSTEM::STRUCT 3. SYSTEM::VALUE))
  (SYSTEM::%PUT 'A-FORMULA-DEPENDS-ON #7# 'A-FORMULA)
  (DEFSETF A-FORMULA-SCHEMA #4# #5#
   (LIST #6# ''A-FORMULA SYSTEM::STRUCT 4. SYSTEM::VALUE))
  (SYSTEM::%PUT 'A-FORMULA-SCHEMA #7# 'A-FORMULA)
  (DEFSETF A-FORMULA-SLOT #4# #5#
   (LIST #6# ''A-FORMULA SYSTEM::STRUCT 5. SYSTEM::VALUE))
  (SYSTEM::%PUT 'A-FORMULA-SLOT #7# 'A-FORMULA)
  (DEFSETF A-FORMULA-CACHED-VALUE #4# #5#
   (LIST #6# ''A-FORMULA SYSTEM::STRUCT 6. SYSTEM::VALUE))
  (SYSTEM::%PUT 'A-FORMULA-CACHED-VALUE #7# 'A-FORMULA)
  (DEFSETF A-FORMULA-PATH #4# #5#
   (LIST #6# ''A-FORMULA SYSTEM::STRUCT 7. SYSTEM::VALUE))
  (SYSTEM::%PUT 'A-FORMULA-PATH #7# 'A-FORMULA)
  (DEFSETF A-FORMULA-IS-A #4# #5#
   (LIST #6# ''A-FORMULA SYSTEM::STRUCT 8. SYSTEM::VALUE))
  (SYSTEM::%PUT 'A-FORMULA-IS-A #7# 'A-FORMULA)
  (DEFSETF A-FORMULA-FUNCTION #4# #5#
   (LIST #6# ''A-FORMULA SYSTEM::STRUCT 9. SYSTEM::VALUE))
  (SYSTEM::%PUT 'A-FORMULA-FUNCTION #7# 'A-FORMULA)
  (DEFSETF A-FORMULA-LAMBDA #4# #5#
   (LIST #6# ''A-FORMULA SYSTEM::STRUCT 10. SYSTEM::VALUE))
  (SYSTEM::%PUT 'A-FORMULA-LAMBDA #7# 'A-FORMULA)
  (DEFSETF A-FORMULA-IS-A-INV #4# #5#
   (LIST #6# ''A-FORMULA SYSTEM::STRUCT 11. SYSTEM::VALUE))
  (SYSTEM::%PUT 'A-FORMULA-IS-A-INV #7# 'A-FORMULA)
  (DEFSETF A-FORMULA-META #4# #5#
   (LIST #6# ''A-FORMULA SYSTEM::STRUCT 12. SYSTEM::VALUE))
  (SYSTEM::%PUT 'A-FORMULA-META #7# 'A-FORMULA)
  (SETF (DOCUMENTATION 'A-FORMULA 'STRUCTURE) NIL)
  (DEFMETHOD PRINT-OBJECT ((SYSTEM::STRUCT A-FORMULA) STREAM)
   (PROGN (PRINT-THE-SCHEMA SYSTEM::STRUCT STREAM SYSTEM::*PRIN-LEVEL*)))
  'A-FORMULA))
(PROGN
 (SYSTEM::C-DEFUN 'MAKE-A-FORMULA
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE
   '(&KEY NAME BINS DEPENDS-ON SCHEMA SLOT CACHED-VALUE PATH IS-A FUNCTION
     LAMBDA IS-A-INV META))))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE A-FORMULA-P)))
(PROGN
 (SYSTEM::C-DEFUN 'A-FORMULA-P
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(SYSTEM::OBJECT))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN A-FORMULA-P))
    (BLOCK A-FORMULA-P
     (SYSTEM::%STRUCTURE-TYPE-P 'A-FORMULA SYSTEM::OBJECT)))))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE COPY-A-FORMULA)))
(PROGN
 (SYSTEM::C-DEFUN 'COPY-A-FORMULA
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(STRUCTURE))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN COPY-A-FORMULA))
    (BLOCK COPY-A-FORMULA (COPY-STRUCTURE STRUCTURE)))))
(PROGN (SYSTEM::C-PROCLAIM '(FUNCTION A-FORMULA-NAME (A-FORMULA) T)))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE A-FORMULA-NAME)))
(PROGN
 (SYSTEM::C-DEFUN 'A-FORMULA-NAME
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(SYSTEM::OBJECT))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN A-FORMULA-NAME))
    (BLOCK A-FORMULA-NAME
     (THE T (SYSTEM::%STRUCTURE-REF 'A-FORMULA SYSTEM::OBJECT 1.))))))
(PROGN (SYSTEM::C-PROCLAIM '(FUNCTION A-FORMULA-BINS (A-FORMULA) T)))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE A-FORMULA-BINS)))
(PROGN
 (SYSTEM::C-DEFUN 'A-FORMULA-BINS
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(SYSTEM::OBJECT))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN A-FORMULA-BINS))
    (BLOCK A-FORMULA-BINS
     (THE T (SYSTEM::%STRUCTURE-REF 'A-FORMULA SYSTEM::OBJECT 2.))))))
(PROGN (SYSTEM::C-PROCLAIM '(FUNCTION A-FORMULA-DEPENDS-ON (A-FORMULA) T)))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE A-FORMULA-DEPENDS-ON)))
(PROGN
 (SYSTEM::C-DEFUN 'A-FORMULA-DEPENDS-ON
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(SYSTEM::OBJECT))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN A-FORMULA-DEPENDS-ON))
    (BLOCK A-FORMULA-DEPENDS-ON
     (THE T (SYSTEM::%STRUCTURE-REF 'A-FORMULA SYSTEM::OBJECT 3.))))))
(PROGN (SYSTEM::C-PROCLAIM '(FUNCTION A-FORMULA-SCHEMA (A-FORMULA) T)))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE A-FORMULA-SCHEMA)))
(PROGN
 (SYSTEM::C-DEFUN 'A-FORMULA-SCHEMA
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(SYSTEM::OBJECT))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN A-FORMULA-SCHEMA))
    (BLOCK A-FORMULA-SCHEMA
     (THE T (SYSTEM::%STRUCTURE-REF 'A-FORMULA SYSTEM::OBJECT 4.))))))
(PROGN (SYSTEM::C-PROCLAIM '(FUNCTION A-FORMULA-SLOT (A-FORMULA) T)))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE A-FORMULA-SLOT)))
(PROGN
 (SYSTEM::C-DEFUN 'A-FORMULA-SLOT
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(SYSTEM::OBJECT))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN A-FORMULA-SLOT))
    (BLOCK A-FORMULA-SLOT
     (THE T (SYSTEM::%STRUCTURE-REF 'A-FORMULA SYSTEM::OBJECT 5.))))))
(PROGN (SYSTEM::C-PROCLAIM '(FUNCTION A-FORMULA-CACHED-VALUE (A-FORMULA) T)))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE A-FORMULA-CACHED-VALUE)))
(PROGN
 (SYSTEM::C-DEFUN 'A-FORMULA-CACHED-VALUE
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(SYSTEM::OBJECT))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN A-FORMULA-CACHED-VALUE))
    (BLOCK A-FORMULA-CACHED-VALUE
     (THE T (SYSTEM::%STRUCTURE-REF 'A-FORMULA SYSTEM::OBJECT 6.))))))
(PROGN (SYSTEM::C-PROCLAIM '(FUNCTION A-FORMULA-PATH (A-FORMULA) T)))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE A-FORMULA-PATH)))
(PROGN
 (SYSTEM::C-DEFUN 'A-FORMULA-PATH
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(SYSTEM::OBJECT))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN A-FORMULA-PATH))
    (BLOCK A-FORMULA-PATH
     (THE T (SYSTEM::%STRUCTURE-REF 'A-FORMULA SYSTEM::OBJECT 7.))))))
(PROGN (SYSTEM::C-PROCLAIM '(FUNCTION A-FORMULA-IS-A (A-FORMULA) T)))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE A-FORMULA-IS-A)))
(PROGN
 (SYSTEM::C-DEFUN 'A-FORMULA-IS-A
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(SYSTEM::OBJECT))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN A-FORMULA-IS-A))
    (BLOCK A-FORMULA-IS-A
     (THE T (SYSTEM::%STRUCTURE-REF 'A-FORMULA SYSTEM::OBJECT 8.))))))
(PROGN (SYSTEM::C-PROCLAIM '(FUNCTION A-FORMULA-FUNCTION (A-FORMULA) T)))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE A-FORMULA-FUNCTION)))
(PROGN
 (SYSTEM::C-DEFUN 'A-FORMULA-FUNCTION
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(SYSTEM::OBJECT))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN A-FORMULA-FUNCTION))
    (BLOCK A-FORMULA-FUNCTION
     (THE T (SYSTEM::%STRUCTURE-REF 'A-FORMULA SYSTEM::OBJECT 9.))))))
(PROGN (SYSTEM::C-PROCLAIM '(FUNCTION A-FORMULA-LAMBDA (A-FORMULA) T)))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE A-FORMULA-LAMBDA)))
(PROGN
 (SYSTEM::C-DEFUN 'A-FORMULA-LAMBDA
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(SYSTEM::OBJECT))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN A-FORMULA-LAMBDA))
    (BLOCK A-FORMULA-LAMBDA
     (THE T (SYSTEM::%STRUCTURE-REF 'A-FORMULA SYSTEM::OBJECT 10.))))))
(PROGN (SYSTEM::C-PROCLAIM '(FUNCTION A-FORMULA-IS-A-INV (A-FORMULA) T)))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE A-FORMULA-IS-A-INV)))
(PROGN
 (SYSTEM::C-DEFUN 'A-FORMULA-IS-A-INV
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(SYSTEM::OBJECT))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN A-FORMULA-IS-A-INV))
    (BLOCK A-FORMULA-IS-A-INV
     (THE T (SYSTEM::%STRUCTURE-REF 'A-FORMULA SYSTEM::OBJECT 11.))))))
(PROGN (SYSTEM::C-PROCLAIM '(FUNCTION A-FORMULA-META (A-FORMULA) T)))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE A-FORMULA-META)))
(PROGN
 (SYSTEM::C-DEFUN 'A-FORMULA-META
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(SYSTEM::OBJECT))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN A-FORMULA-META))
    (BLOCK A-FORMULA-META
     (THE T (SYSTEM::%STRUCTURE-REF 'A-FORMULA SYSTEM::OBJECT 12.))))))
(PROGN
 (LET NIL (REMPROP 'A-FORMULA-NAME 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'A-FORMULA-NAME 'SYSTEM::SETF-EXPANDER
   (LIST* -1. 1.
    (FUNCTION SETF-A-FORMULA-NAME
     (LAMBDA (SYSTEM::%ACCESS-ARGLIST SYSTEM::VALUE)
      (LET* ((SYSTEM::STRUCT (CADR SYSTEM::%ACCESS-ARGLIST)))
       (BLOCK A-FORMULA-NAME
        (LIST 'SYSTEM::%STRUCTURE-STORE ''A-FORMULA SYSTEM::STRUCT 1.
         SYSTEM::VALUE)))))))
  (SYSTEM::%SET-DOCUMENTATION 'A-FORMULA-NAME 'SETF NIL) 'A-FORMULA-NAME))
(PROGN
 (LET NIL (REMPROP 'A-FORMULA-BINS 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'A-FORMULA-BINS 'SYSTEM::SETF-EXPANDER
   (LIST* -1. 1.
    (FUNCTION SETF-A-FORMULA-BINS
     (LAMBDA (SYSTEM::%ACCESS-ARGLIST SYSTEM::VALUE)
      (LET* ((SYSTEM::STRUCT (CADR SYSTEM::%ACCESS-ARGLIST)))
       (BLOCK A-FORMULA-BINS
        (LIST 'SYSTEM::%STRUCTURE-STORE ''A-FORMULA SYSTEM::STRUCT 2.
         SYSTEM::VALUE)))))))
  (SYSTEM::%SET-DOCUMENTATION 'A-FORMULA-BINS 'SETF NIL) 'A-FORMULA-BINS))
(PROGN
 (LET NIL (REMPROP 'A-FORMULA-DEPENDS-ON 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'A-FORMULA-DEPENDS-ON 'SYSTEM::SETF-EXPANDER
   (LIST* -1. 1.
    (FUNCTION SETF-A-FORMULA-DEPENDS-ON
     (LAMBDA (SYSTEM::%ACCESS-ARGLIST SYSTEM::VALUE)
      (LET* ((SYSTEM::STRUCT (CADR SYSTEM::%ACCESS-ARGLIST)))
       (BLOCK A-FORMULA-DEPENDS-ON
        (LIST 'SYSTEM::%STRUCTURE-STORE ''A-FORMULA SYSTEM::STRUCT 3.
         SYSTEM::VALUE)))))))
  (SYSTEM::%SET-DOCUMENTATION 'A-FORMULA-DEPENDS-ON 'SETF NIL)
  'A-FORMULA-DEPENDS-ON))
(PROGN
 (LET NIL (REMPROP 'A-FORMULA-SCHEMA 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'A-FORMULA-SCHEMA 'SYSTEM::SETF-EXPANDER
   (LIST* -1. 1.
    (FUNCTION SETF-A-FORMULA-SCHEMA
     (LAMBDA (SYSTEM::%ACCESS-ARGLIST SYSTEM::VALUE)
      (LET* ((SYSTEM::STRUCT (CADR SYSTEM::%ACCESS-ARGLIST)))
       (BLOCK A-FORMULA-SCHEMA
        (LIST 'SYSTEM::%STRUCTURE-STORE ''A-FORMULA SYSTEM::STRUCT 4.
         SYSTEM::VALUE)))))))
  (SYSTEM::%SET-DOCUMENTATION 'A-FORMULA-SCHEMA 'SETF NIL) 'A-FORMULA-SCHEMA))
(PROGN
 (LET NIL (REMPROP 'A-FORMULA-SLOT 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'A-FORMULA-SLOT 'SYSTEM::SETF-EXPANDER
   (LIST* -1. 1.
    (FUNCTION SETF-A-FORMULA-SLOT
     (LAMBDA (SYSTEM::%ACCESS-ARGLIST SYSTEM::VALUE)
      (LET* ((SYSTEM::STRUCT (CADR SYSTEM::%ACCESS-ARGLIST)))
       (BLOCK A-FORMULA-SLOT
        (LIST 'SYSTEM::%STRUCTURE-STORE ''A-FORMULA SYSTEM::STRUCT 5.
         SYSTEM::VALUE)))))))
  (SYSTEM::%SET-DOCUMENTATION 'A-FORMULA-SLOT 'SETF NIL) 'A-FORMULA-SLOT))
(PROGN
 (LET NIL (REMPROP 'A-FORMULA-CACHED-VALUE 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'A-FORMULA-CACHED-VALUE 'SYSTEM::SETF-EXPANDER
   (LIST* -1. 1.
    (FUNCTION SETF-A-FORMULA-CACHED-VALUE
     (LAMBDA (SYSTEM::%ACCESS-ARGLIST SYSTEM::VALUE)
      (LET* ((SYSTEM::STRUCT (CADR SYSTEM::%ACCESS-ARGLIST)))
       (BLOCK A-FORMULA-CACHED-VALUE
        (LIST 'SYSTEM::%STRUCTURE-STORE ''A-FORMULA SYSTEM::STRUCT 6.
         SYSTEM::VALUE)))))))
  (SYSTEM::%SET-DOCUMENTATION 'A-FORMULA-CACHED-VALUE 'SETF NIL)
  'A-FORMULA-CACHED-VALUE))
(PROGN
 (LET NIL (REMPROP 'A-FORMULA-PATH 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'A-FORMULA-PATH 'SYSTEM::SETF-EXPANDER
   (LIST* -1. 1.
    (FUNCTION SETF-A-FORMULA-PATH
     (LAMBDA (SYSTEM::%ACCESS-ARGLIST SYSTEM::VALUE)
      (LET* ((SYSTEM::STRUCT (CADR SYSTEM::%ACCESS-ARGLIST)))
       (BLOCK A-FORMULA-PATH
        (LIST 'SYSTEM::%STRUCTURE-STORE ''A-FORMULA SYSTEM::STRUCT 7.
         SYSTEM::VALUE)))))))
  (SYSTEM::%SET-DOCUMENTATION 'A-FORMULA-PATH 'SETF NIL) 'A-FORMULA-PATH))
(PROGN
 (LET NIL (REMPROP 'A-FORMULA-IS-A 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'A-FORMULA-IS-A 'SYSTEM::SETF-EXPANDER
   (LIST* -1. 1.
    (FUNCTION SETF-A-FORMULA-IS-A
     (LAMBDA (SYSTEM::%ACCESS-ARGLIST SYSTEM::VALUE)
      (LET* ((SYSTEM::STRUCT (CADR SYSTEM::%ACCESS-ARGLIST)))
       (BLOCK A-FORMULA-IS-A
        (LIST 'SYSTEM::%STRUCTURE-STORE ''A-FORMULA SYSTEM::STRUCT 8.
         SYSTEM::VALUE)))))))
  (SYSTEM::%SET-DOCUMENTATION 'A-FORMULA-IS-A 'SETF NIL) 'A-FORMULA-IS-A))
(PROGN
 (LET NIL (REMPROP 'A-FORMULA-FUNCTION 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'A-FORMULA-FUNCTION 'SYSTEM::SETF-EXPANDER
   (LIST* -1. 1.
    (FUNCTION SETF-A-FORMULA-FUNCTION
     (LAMBDA (SYSTEM::%ACCESS-ARGLIST SYSTEM::VALUE)
      (LET* ((SYSTEM::STRUCT (CADR SYSTEM::%ACCESS-ARGLIST)))
       (BLOCK A-FORMULA-FUNCTION
        (LIST 'SYSTEM::%STRUCTURE-STORE ''A-FORMULA SYSTEM::STRUCT 9.
         SYSTEM::VALUE)))))))
  (SYSTEM::%SET-DOCUMENTATION 'A-FORMULA-FUNCTION 'SETF NIL)
  'A-FORMULA-FUNCTION))
(PROGN
 (LET NIL (REMPROP 'A-FORMULA-LAMBDA 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'A-FORMULA-LAMBDA 'SYSTEM::SETF-EXPANDER
   (LIST* -1. 1.
    (FUNCTION SETF-A-FORMULA-LAMBDA
     (LAMBDA (SYSTEM::%ACCESS-ARGLIST SYSTEM::VALUE)
      (LET* ((SYSTEM::STRUCT (CADR SYSTEM::%ACCESS-ARGLIST)))
       (BLOCK A-FORMULA-LAMBDA
        (LIST 'SYSTEM::%STRUCTURE-STORE ''A-FORMULA SYSTEM::STRUCT 10.
         SYSTEM::VALUE)))))))
  (SYSTEM::%SET-DOCUMENTATION 'A-FORMULA-LAMBDA 'SETF NIL) 'A-FORMULA-LAMBDA))
(PROGN
 (LET NIL (REMPROP 'A-FORMULA-IS-A-INV 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'A-FORMULA-IS-A-INV 'SYSTEM::SETF-EXPANDER
   (LIST* -1. 1.
    (FUNCTION SETF-A-FORMULA-IS-A-INV
     (LAMBDA (SYSTEM::%ACCESS-ARGLIST SYSTEM::VALUE)
      (LET* ((SYSTEM::STRUCT (CADR SYSTEM::%ACCESS-ARGLIST)))
       (BLOCK A-FORMULA-IS-A-INV
        (LIST 'SYSTEM::%STRUCTURE-STORE ''A-FORMULA SYSTEM::STRUCT 11.
         SYSTEM::VALUE)))))))
  (SYSTEM::%SET-DOCUMENTATION 'A-FORMULA-IS-A-INV 'SETF NIL)
  'A-FORMULA-IS-A-INV))
(PROGN
 (LET NIL (REMPROP 'A-FORMULA-META 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'A-FORMULA-META 'SYSTEM::SETF-EXPANDER
   (LIST* -1. 1.
    (FUNCTION SETF-A-FORMULA-META
     (LAMBDA (SYSTEM::%ACCESS-ARGLIST SYSTEM::VALUE)
      (LET* ((SYSTEM::STRUCT (CADR SYSTEM::%ACCESS-ARGLIST)))
       (BLOCK A-FORMULA-META
        (LIST 'SYSTEM::%STRUCTURE-STORE ''A-FORMULA SYSTEM::STRUCT 12.
         SYSTEM::VALUE)))))))
  (SYSTEM::%SET-DOCUMENTATION 'A-FORMULA-META 'SETF NIL) 'A-FORMULA-META))
(PROGN
 (SYSTEM::C-DEFUN 'PRINT-OBJECT
  #S(SYSTEM::SIGNATURE :REQ-NUM 2. :OPT-NUM 0. :REST-P NIL :KEYS-P NIL
     :KEYWORDS NIL :ALLOW-P NIL)))
(PROGN
 (LET NIL
  (LET
   ((#1=#:G1850
     (CONS 'SL
      (SVREF (GET 'STRUCTURE-OBJECT 'SYSTEM::DEFSTRUCT-DESCRIPTION) 0.))))
   (DEFUN MAKE-SL (&KEY NAME VALUE BITS)
    (LET ((SYSTEM::OBJECT (SYSTEM::%MAKE-STRUCTURE #1# 4.)))
     (SETF (SYSTEM::%STRUCTURE-REF 'SL SYSTEM::OBJECT 1.) (THE T NAME))
     (SETF (SYSTEM::%STRUCTURE-REF 'SL SYSTEM::OBJECT 2.) (THE T VALUE))
     (SETF (SYSTEM::%STRUCTURE-REF 'SL SYSTEM::OBJECT 3.) (THE T BITS))
     SYSTEM::OBJECT))
   (SYSTEM::%PUT 'SL 'SYSTEM::DEFSTRUCT-DESCRIPTION
    (VECTOR #1# 'T 'MAKE-SL
     `(#(NAME (:NAME) 1. (NIL) NIL T NIL) #(VALUE (:VALUE) 2. (NIL) NIL T NIL)
       #(BITS (:BITS) 3. (NIL) NIL T NIL)))))
  (CLOS::DEFINE-STRUCTURE-CLASS 'SL) (PROCLAIM '(INLINE SL-P))
  (DEFUN SL-P (SYSTEM::OBJECT) (SYSTEM::%STRUCTURE-TYPE-P 'SL SYSTEM::OBJECT))
  (PROCLAIM '(INLINE COPY-SL))
  (DEFUN COPY-SL (STRUCTURE) (COPY-STRUCTURE STRUCTURE))
  (PROCLAIM '(FUNCTION SL-NAME (SL) T)) (PROCLAIM '(INLINE SL-NAME))
  (DEFUN SL-NAME #2=(SYSTEM::OBJECT)
   (THE T (SYSTEM::%STRUCTURE-REF 'SL SYSTEM::OBJECT 1.)))
  (SYSTEM::%PUT 'SL-NAME #3='SYSTEM::DEFSTRUCT-READER 'SL)
  (PROCLAIM '(FUNCTION SL-VALUE (SL) T)) (PROCLAIM '(INLINE SL-VALUE))
  (DEFUN SL-VALUE #2# (THE T (SYSTEM::%STRUCTURE-REF 'SL SYSTEM::OBJECT 2.)))
  (SYSTEM::%PUT 'SL-VALUE #3# 'SL) (PROCLAIM '(FUNCTION SL-BITS (SL) T))
  (PROCLAIM '(INLINE SL-BITS))
  (DEFUN SL-BITS #2# (THE T (SYSTEM::%STRUCTURE-REF 'SL SYSTEM::OBJECT 3.)))
  (SYSTEM::%PUT 'SL-BITS #3# 'SL)
  (DEFSETF SL-NAME #4=(SYSTEM::STRUCT) #5=(SYSTEM::VALUE)
   (LIST #6='SYSTEM::%STRUCTURE-STORE ''SL SYSTEM::STRUCT 1. SYSTEM::VALUE))
  (SYSTEM::%PUT 'SL-NAME #7='SYSTEM::DEFSTRUCT-WRITER 'SL)
  (DEFSETF SL-VALUE #4# #5# (LIST #6# ''SL SYSTEM::STRUCT 2. SYSTEM::VALUE))
  (SYSTEM::%PUT 'SL-VALUE #7# 'SL)
  (DEFSETF SL-BITS #4# #5# (LIST #6# ''SL SYSTEM::STRUCT 3. SYSTEM::VALUE))
  (SYSTEM::%PUT 'SL-BITS #7# 'SL) (SETF (DOCUMENTATION 'SL 'STRUCTURE) NIL)
  (DEFMETHOD PRINT-OBJECT ((SYSTEM::STRUCT SL) STREAM)
   (PROGN (PRINT-THE-SLOT SYSTEM::STRUCT STREAM SYSTEM::*PRIN-LEVEL*)))
  'SL))
(PROGN
 (SYSTEM::C-DEFUN 'MAKE-SL
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(&KEY NAME VALUE BITS))))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE SL-P)))
(PROGN
 (SYSTEM::C-DEFUN 'SL-P (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(SYSTEM::OBJECT))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN SL-P))
    (BLOCK SL-P (SYSTEM::%STRUCTURE-TYPE-P 'SL SYSTEM::OBJECT)))))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE COPY-SL)))
(PROGN
 (SYSTEM::C-DEFUN 'COPY-SL (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(STRUCTURE))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN COPY-SL))
    (BLOCK COPY-SL (COPY-STRUCTURE STRUCTURE)))))
(PROGN (SYSTEM::C-PROCLAIM '(FUNCTION SL-NAME (SL) T)))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE SL-NAME)))
(PROGN
 (SYSTEM::C-DEFUN 'SL-NAME
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(SYSTEM::OBJECT))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN SL-NAME))
    (BLOCK SL-NAME (THE T (SYSTEM::%STRUCTURE-REF 'SL SYSTEM::OBJECT 1.))))))
(PROGN (SYSTEM::C-PROCLAIM '(FUNCTION SL-VALUE (SL) T)))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE SL-VALUE)))
(PROGN
 (SYSTEM::C-DEFUN 'SL-VALUE
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(SYSTEM::OBJECT))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN SL-VALUE))
    (BLOCK SL-VALUE (THE T (SYSTEM::%STRUCTURE-REF 'SL SYSTEM::OBJECT 2.))))))
(PROGN (SYSTEM::C-PROCLAIM '(FUNCTION SL-BITS (SL) T)))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE SL-BITS)))
(PROGN
 (SYSTEM::C-DEFUN 'SL-BITS
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(SYSTEM::OBJECT))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN SL-BITS))
    (BLOCK SL-BITS (THE T (SYSTEM::%STRUCTURE-REF 'SL SYSTEM::OBJECT 3.))))))
(PROGN
 (LET NIL (REMPROP 'SL-NAME 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'SL-NAME 'SYSTEM::SETF-EXPANDER
   (LIST* -1. 1.
    (FUNCTION SETF-SL-NAME
     (LAMBDA (SYSTEM::%ACCESS-ARGLIST SYSTEM::VALUE)
      (LET* ((SYSTEM::STRUCT (CADR SYSTEM::%ACCESS-ARGLIST)))
       (BLOCK SL-NAME
        (LIST 'SYSTEM::%STRUCTURE-STORE ''SL SYSTEM::STRUCT 1.
         SYSTEM::VALUE)))))))
  (SYSTEM::%SET-DOCUMENTATION 'SL-NAME 'SETF NIL) 'SL-NAME))
(PROGN
 (LET NIL (REMPROP 'SL-VALUE 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'SL-VALUE 'SYSTEM::SETF-EXPANDER
   (LIST* -1. 1.
    (FUNCTION SETF-SL-VALUE
     (LAMBDA (SYSTEM::%ACCESS-ARGLIST SYSTEM::VALUE)
      (LET* ((SYSTEM::STRUCT (CADR SYSTEM::%ACCESS-ARGLIST)))
       (BLOCK SL-VALUE
        (LIST 'SYSTEM::%STRUCTURE-STORE ''SL SYSTEM::STRUCT 2.
         SYSTEM::VALUE)))))))
  (SYSTEM::%SET-DOCUMENTATION 'SL-VALUE 'SETF NIL) 'SL-VALUE))
(PROGN
 (LET NIL (REMPROP 'SL-BITS 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'SL-BITS 'SYSTEM::SETF-EXPANDER
   (LIST* -1. 1.
    (FUNCTION SETF-SL-BITS
     (LAMBDA (SYSTEM::%ACCESS-ARGLIST SYSTEM::VALUE)
      (LET* ((SYSTEM::STRUCT (CADR SYSTEM::%ACCESS-ARGLIST)))
       (BLOCK SL-BITS
        (LIST 'SYSTEM::%STRUCTURE-STORE ''SL SYSTEM::STRUCT 3.
         SYSTEM::VALUE)))))))
  (SYSTEM::%SET-DOCUMENTATION 'SL-BITS 'SETF NIL) 'SL-BITS))
(PROGN
 (SYSTEM::C-DEFUN 'PRINT-OBJECT
  #S(SYSTEM::SIGNATURE :REQ-NUM 2. :OPT-NUM 0. :REST-P NIL :KEYS-P NIL
     :KEYWORDS NIL :ALLOW-P NIL)))
(PROGN
 (LET NIL
  (LET
   ((#1=#:G1938
     (CONS 'FULL-SL (SVREF (GET 'SL 'SYSTEM::DEFSTRUCT-DESCRIPTION) 0.))))
   (DEFUN MAKE-FULL-SL (&KEY NAME VALUE BITS DEPENDENTS)
    (LET ((SYSTEM::OBJECT (SYSTEM::%MAKE-STRUCTURE #1# 5.)))
     (SETF (SYSTEM::%STRUCTURE-REF 'FULL-SL SYSTEM::OBJECT 1.) (THE T NAME))
     (SETF (SYSTEM::%STRUCTURE-REF 'FULL-SL SYSTEM::OBJECT 2.) (THE T VALUE))
     (SETF (SYSTEM::%STRUCTURE-REF 'FULL-SL SYSTEM::OBJECT 3.) (THE T BITS))
     (SETF (SYSTEM::%STRUCTURE-REF 'FULL-SL SYSTEM::OBJECT 4.)
      (THE T DEPENDENTS))
     SYSTEM::OBJECT))
   (SYSTEM::%PUT 'FULL-SL 'SYSTEM::DEFSTRUCT-DESCRIPTION
    (VECTOR #1# 'T 'MAKE-FULL-SL
     `(#(NAME (:NAME) 1. (NIL) NIL T NIL) #(VALUE (:VALUE) 2. (NIL) NIL T NIL)
       #(BITS (:BITS) 3. (NIL) NIL T NIL)
       #(DEPENDENTS (:DEPENDENTS) 4. (NIL) NIL T NIL)))))
  (CLOS::DEFINE-STRUCTURE-CLASS 'FULL-SL) (PROCLAIM '(INLINE FULL-SL-P))
  (DEFUN FULL-SL-P (SYSTEM::OBJECT)
   (SYSTEM::%STRUCTURE-TYPE-P 'FULL-SL SYSTEM::OBJECT))
  (PROCLAIM '(INLINE COPY-FULL-SL))
  (DEFUN COPY-FULL-SL (STRUCTURE) (COPY-STRUCTURE STRUCTURE))
  (PROCLAIM '(FUNCTION FULL-SL-NAME (FULL-SL) T))
  (PROCLAIM '(INLINE FULL-SL-NAME))
  (DEFUN FULL-SL-NAME #2=(SYSTEM::OBJECT)
   (THE T (SYSTEM::%STRUCTURE-REF 'FULL-SL SYSTEM::OBJECT 1.)))
  (SYSTEM::%PUT 'FULL-SL-NAME #3='SYSTEM::DEFSTRUCT-READER 'FULL-SL)
  (PROCLAIM '(FUNCTION FULL-SL-VALUE (FULL-SL) T))
  (PROCLAIM '(INLINE FULL-SL-VALUE))
  (DEFUN FULL-SL-VALUE #2#
   (THE T (SYSTEM::%STRUCTURE-REF 'FULL-SL SYSTEM::OBJECT 2.)))
  (SYSTEM::%PUT 'FULL-SL-VALUE #3# 'FULL-SL)
  (PROCLAIM '(FUNCTION FULL-SL-BITS (FULL-SL) T))
  (PROCLAIM '(INLINE FULL-SL-BITS))
  (DEFUN FULL-SL-BITS #2#
   (THE T (SYSTEM::%STRUCTURE-REF 'FULL-SL SYSTEM::OBJECT 3.)))
  (SYSTEM::%PUT 'FULL-SL-BITS #3# 'FULL-SL)
  (PROCLAIM '(FUNCTION FULL-SL-DEPENDENTS (FULL-SL) T))
  (PROCLAIM '(INLINE FULL-SL-DEPENDENTS))
  (DEFUN FULL-SL-DEPENDENTS #2#
   (THE T (SYSTEM::%STRUCTURE-REF 'FULL-SL SYSTEM::OBJECT 4.)))
  (SYSTEM::%PUT 'FULL-SL-DEPENDENTS #3# 'FULL-SL)
  (DEFSETF FULL-SL-NAME #4=(SYSTEM::STRUCT) #5=(SYSTEM::VALUE)
   (LIST #6='SYSTEM::%STRUCTURE-STORE ''FULL-SL SYSTEM::STRUCT 1.
    SYSTEM::VALUE))
  (SYSTEM::%PUT 'FULL-SL-NAME #7='SYSTEM::DEFSTRUCT-WRITER 'FULL-SL)
  (DEFSETF FULL-SL-VALUE #4# #5#
   (LIST #6# ''FULL-SL SYSTEM::STRUCT 2. SYSTEM::VALUE))
  (SYSTEM::%PUT 'FULL-SL-VALUE #7# 'FULL-SL)
  (DEFSETF FULL-SL-BITS #4# #5#
   (LIST #6# ''FULL-SL SYSTEM::STRUCT 3. SYSTEM::VALUE))
  (SYSTEM::%PUT 'FULL-SL-BITS #7# 'FULL-SL)
  (DEFSETF FULL-SL-DEPENDENTS #4# #5#
   (LIST #6# ''FULL-SL SYSTEM::STRUCT 4. SYSTEM::VALUE))
  (SYSTEM::%PUT 'FULL-SL-DEPENDENTS #7# 'FULL-SL)
  (SETF (DOCUMENTATION 'FULL-SL 'STRUCTURE) NIL)
  (CLOS::DEFSTRUCT-REMOVE-PRINT-OBJECT-METHOD 'FULL-SL) 'FULL-SL))
(PROGN
 (SYSTEM::C-DEFUN 'MAKE-FULL-SL
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(&KEY NAME VALUE BITS DEPENDENTS))))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE FULL-SL-P)))
(PROGN
 (SYSTEM::C-DEFUN 'FULL-SL-P
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(SYSTEM::OBJECT))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN FULL-SL-P))
    (BLOCK FULL-SL-P (SYSTEM::%STRUCTURE-TYPE-P 'FULL-SL SYSTEM::OBJECT)))))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE COPY-FULL-SL)))
(PROGN
 (SYSTEM::C-DEFUN 'COPY-FULL-SL
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(STRUCTURE))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN COPY-FULL-SL))
    (BLOCK COPY-FULL-SL (COPY-STRUCTURE STRUCTURE)))))
(PROGN (SYSTEM::C-PROCLAIM '(FUNCTION FULL-SL-NAME (FULL-SL) T)))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE FULL-SL-NAME)))
(PROGN
 (SYSTEM::C-DEFUN 'FULL-SL-NAME
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(SYSTEM::OBJECT))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN FULL-SL-NAME))
    (BLOCK FULL-SL-NAME
     (THE T (SYSTEM::%STRUCTURE-REF 'FULL-SL SYSTEM::OBJECT 1.))))))
(PROGN (SYSTEM::C-PROCLAIM '(FUNCTION FULL-SL-VALUE (FULL-SL) T)))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE FULL-SL-VALUE)))
(PROGN
 (SYSTEM::C-DEFUN 'FULL-SL-VALUE
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(SYSTEM::OBJECT))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN FULL-SL-VALUE))
    (BLOCK FULL-SL-VALUE
     (THE T (SYSTEM::%STRUCTURE-REF 'FULL-SL SYSTEM::OBJECT 2.))))))
(PROGN (SYSTEM::C-PROCLAIM '(FUNCTION FULL-SL-BITS (FULL-SL) T)))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE FULL-SL-BITS)))
(PROGN
 (SYSTEM::C-DEFUN 'FULL-SL-BITS
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(SYSTEM::OBJECT))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN FULL-SL-BITS))
    (BLOCK FULL-SL-BITS
     (THE T (SYSTEM::%STRUCTURE-REF 'FULL-SL SYSTEM::OBJECT 3.))))))
(PROGN (SYSTEM::C-PROCLAIM '(FUNCTION FULL-SL-DEPENDENTS (FULL-SL) T)))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE FULL-SL-DEPENDENTS)))
(PROGN
 (SYSTEM::C-DEFUN 'FULL-SL-DEPENDENTS
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(SYSTEM::OBJECT))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN FULL-SL-DEPENDENTS))
    (BLOCK FULL-SL-DEPENDENTS
     (THE T (SYSTEM::%STRUCTURE-REF 'FULL-SL SYSTEM::OBJECT 4.))))))
(PROGN
 (LET NIL (REMPROP 'FULL-SL-NAME 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'FULL-SL-NAME 'SYSTEM::SETF-EXPANDER
   (LIST* -1. 1.
    (FUNCTION SETF-FULL-SL-NAME
     (LAMBDA (SYSTEM::%ACCESS-ARGLIST SYSTEM::VALUE)
      (LET* ((SYSTEM::STRUCT (CADR SYSTEM::%ACCESS-ARGLIST)))
       (BLOCK FULL-SL-NAME
        (LIST 'SYSTEM::%STRUCTURE-STORE ''FULL-SL SYSTEM::STRUCT 1.
         SYSTEM::VALUE)))))))
  (SYSTEM::%SET-DOCUMENTATION 'FULL-SL-NAME 'SETF NIL) 'FULL-SL-NAME))
(PROGN
 (LET NIL (REMPROP 'FULL-SL-VALUE 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'FULL-SL-VALUE 'SYSTEM::SETF-EXPANDER
   (LIST* -1. 1.
    (FUNCTION SETF-FULL-SL-VALUE
     (LAMBDA (SYSTEM::%ACCESS-ARGLIST SYSTEM::VALUE)
      (LET* ((SYSTEM::STRUCT (CADR SYSTEM::%ACCESS-ARGLIST)))
       (BLOCK FULL-SL-VALUE
        (LIST 'SYSTEM::%STRUCTURE-STORE ''FULL-SL SYSTEM::STRUCT 2.
         SYSTEM::VALUE)))))))
  (SYSTEM::%SET-DOCUMENTATION 'FULL-SL-VALUE 'SETF NIL) 'FULL-SL-VALUE))
(PROGN
 (LET NIL (REMPROP 'FULL-SL-BITS 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'FULL-SL-BITS 'SYSTEM::SETF-EXPANDER
   (LIST* -1. 1.
    (FUNCTION SETF-FULL-SL-BITS
     (LAMBDA (SYSTEM::%ACCESS-ARGLIST SYSTEM::VALUE)
      (LET* ((SYSTEM::STRUCT (CADR SYSTEM::%ACCESS-ARGLIST)))
       (BLOCK FULL-SL-BITS
        (LIST 'SYSTEM::%STRUCTURE-STORE ''FULL-SL SYSTEM::STRUCT 3.
         SYSTEM::VALUE)))))))
  (SYSTEM::%SET-DOCUMENTATION 'FULL-SL-BITS 'SETF NIL) 'FULL-SL-BITS))
(PROGN
 (LET NIL (REMPROP 'FULL-SL-DEPENDENTS 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'FULL-SL-DEPENDENTS 'SYSTEM::SETF-EXPANDER
   (LIST* -1. 1.
    (FUNCTION SETF-FULL-SL-DEPENDENTS
     (LAMBDA (SYSTEM::%ACCESS-ARGLIST SYSTEM::VALUE)
      (LET* ((SYSTEM::STRUCT (CADR SYSTEM::%ACCESS-ARGLIST)))
       (BLOCK FULL-SL-DEPENDENTS
        (LIST 'SYSTEM::%STRUCTURE-STORE ''FULL-SL SYSTEM::STRUCT 4.
         SYSTEM::VALUE)))))))
  (SYSTEM::%SET-DOCUMENTATION 'FULL-SL-DEPENDENTS 'SETF NIL)
  'FULL-SL-DEPENDENTS))
(PROGN (DEFMACRO DEFPARAM (&REST BODY) `(DEFPARAMETER ,@BODY)))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'DEFPARAM)
 (SYSTEM::%PUTD 'DEFPARAM
  (SYSTEM::MAKE-MACRO
   (FUNCTION DEFPARAM
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (LET* ((BODY (CDR SYSTEM::<MACRO-FORM>)))
      (BLOCK DEFPARAM `(DEFPARAMETER ,@BODY))))))))
(PROGN
 (DEFVAR *STORE-LAMBDAS* T
  "If NIL, lambda expressions are not stored in formulas"))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *STORE-LAMBDAS*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *TYPES-ENABLED*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *WARNING-ON-CREATE-SCHEMA*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *WARNING-ON-CIRCULARITY*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *WARNING-ON-EVALUATION*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *WARNING-ON-NULL-LINK*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *WARNING-ON-DISCONNECTED-FORMULA*)))
(PROGN (DEFVAR *PRINT-NEW-INSTANCES* T))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *PRINT-NEW-INSTANCES*)))
(PROGN (DEFMACRO A-LOCAL-ONLY-SLOT (SLOT) `(EQ ,SLOT :IS-A-INV)))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'A-LOCAL-ONLY-SLOT)
 (SYSTEM::%PUTD 'A-LOCAL-ONLY-SLOT
  (SYSTEM::MAKE-MACRO
   (FUNCTION A-LOCAL-ONLY-SLOT
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((SLOT (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK A-LOCAL-ONLY-SLOT `(EQ ,SLOT :IS-A-INV)))))))))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *SETTING-FORMULA-P*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *WITHIN-G-VALUE*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *SWEEP-MARK*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *DEMONS-DISABLED*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *CONSTANTS-DISABLED*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *REDEFINE-OK*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *PRE-SET-DEMON*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *SLOT-SETTER-DEBUG*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *SCHEMA-SELF*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *SCHEMA-SLOT*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *CURRENT-FORMULA*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *LAST-FORMULA*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *INHERITANCE-RELATIONS*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *INHERITANCE-INVERSE-RELATIONS*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *RELATIONS*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *REUSE-FORMULAS*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *REUSE-SLOTS*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *REUSE-DIRECTORIES*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *SCHEMA-IS-NEW*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *PRINT-AS-STRUCTURE*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *PRINT-STRUCTURE-SLOTS*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *NO-VALUE*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *SCHEMA-COUNTER*)))
(PROGN (DEFPARAM *TYPE-BITS* 10.)
 (DEFPARAM *TYPE-MASK* (1- (EXPT 2. *TYPE-BITS*)))
 (DEFPARAM *INHERITED-BIT* *TYPE-BITS*)
 (DEFPARAM *IS-PARENT-BIT* (1+ *INHERITED-BIT*))
 (DEFPARAM *IS-CONSTANT-BIT* (1+ *IS-PARENT-BIT*))
 (DEFPARAM *IS-UPDATE-SLOT-BIT* (1+ *IS-CONSTANT-BIT*))
 (DEFPARAM *IS-LOCAL-ONLY-SLOT-BIT* (1+ *IS-UPDATE-SLOT-BIT*))
 (DEFPARAM *IS-PARAMETER-SLOT-BIT* (1+ *IS-LOCAL-ONLY-SLOT-BIT*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *TYPE-BITS*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *TYPE-MASK*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *INHERITED-BIT*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *IS-PARENT-BIT*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *IS-CONSTANT-BIT*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *IS-UPDATE-SLOT-BIT*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *IS-LOCAL-ONLY-SLOT-BIT*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *IS-PARAMETER-SLOT-BIT*)))
(PROGN (DEFPARAM *LOCAL-MASK* 0.)
 (DEFPARAM *CONSTANT-MASK* (ASH 1. *IS-CONSTANT-BIT*))
 (DEFPARAM *IS-UPDATE-SLOT-MASK* (ASH 1. *IS-UPDATE-SLOT-BIT*))
 (DEFPARAM *INHERITED-MASK* (ASH 1. *INHERITED-BIT*))
 (DEFPARAM *IS-PARENT-MASK* (ASH 1. *IS-PARENT-BIT*))
 (DEFPARAM *CLEAR-SLOT-MASK*
  (LOGIOR *LOCAL-MASK* *TYPE-MASK* *CONSTANT-MASK* *IS-UPDATE-SLOT-MASK*))
 (DEFPARAM *INHERITED-PARENT-MASK* (LOGIOR *INHERITED-MASK* *IS-PARENT-MASK*))
 (DEFPARAM *NOT-INHERITED-MASK* (LOGNOT *INHERITED-MASK*))
 (DEFPARAM *NOT-PARENT-MASK* (LOGNOT *IS-PARENT-MASK*))
 (DEFPARAM *NOT-PARENT-CONSTANT-MASK*
  (LOGNOT (LOGIOR *IS-PARENT-MASK* *CONSTANT-MASK*)))
 (DEFPARAM *ALL-BITS-MASK* (LOGNOT *TYPE-MASK*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *LOCAL-MASK*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *CONSTANT-MASK*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *IS-UPDATE-SLOT-MASK*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *INHERITED-MASK*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *IS-PARENT-MASK*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *CLEAR-SLOT-MASK*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *INHERITED-PARENT-MASK*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *NOT-INHERITED-MASK*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *NOT-PARENT-MASK*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *NOT-PARENT-CONSTANT-MASK*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *ALL-BITS-MASK*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *CHECK-CONSTANTS*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *IS-CONSTANT*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *ACCESSED-SLOTS*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *KR-SEND-SELF*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *KR-SEND-SLOT*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *KR-SEND-PARENT*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *CREATE-SCHEMA-SCHEMA*)))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'WHEN-DEBUG)
 (SYSTEM::%PUTD 'WHEN-DEBUG
  (SYSTEM::MAKE-MACRO
   (FUNCTION WHEN-DEBUG
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (LET* ((FORMS (CDR SYSTEM::<MACRO-FORM>)))
      (BLOCK WHEN-DEBUG `(PROGN ,@FORMS))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'FORMULA-P)
 (SYSTEM::%PUTD 'FORMULA-P
  (SYSTEM::MAKE-MACRO
   (FUNCTION FORMULA-P
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((THING (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK FORMULA-P `(A-FORMULA-P ,THING)))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'DELETED-P)
 (SYSTEM::%PUTD 'DELETED-P
  (SYSTEM::MAKE-MACRO
   (FUNCTION DELETED-P
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((SCHEMA (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK DELETED-P
        `(LOCALLY (DECLARE ,*SPECIAL-KR-OPTIMIZATION*)
          (NULL (SCHEMA-BINS ,SCHEMA)))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'NOT-DELETED-P)
 (SYSTEM::%PUTD 'NOT-DELETED-P
  (SYSTEM::MAKE-MACRO
   (FUNCTION NOT-DELETED-P
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((SCHEMA (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK NOT-DELETED-P
        `(LOCALLY (DECLARE ,*SPECIAL-KR-OPTIMIZATION*)
          (SCHEMA-BINS ,SCHEMA))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'IS-INHERITED)
 (SYSTEM::%PUTD 'IS-INHERITED
  (SYSTEM::MAKE-MACRO
   (FUNCTION IS-INHERITED
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((BITS (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK IS-INHERITED `(LOGBITP ,*INHERITED-BIT* ,BITS)))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'IS-PARENT)
 (SYSTEM::%PUTD 'IS-PARENT
  (SYSTEM::MAKE-MACRO
   (FUNCTION IS-PARENT
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((BITS (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK IS-PARENT `(LOGBITP ,*IS-PARENT-BIT* ,BITS)))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'IS-CONSTANT)
 (SYSTEM::%PUTD 'IS-CONSTANT
  (SYSTEM::MAKE-MACRO
   (FUNCTION IS-CONSTANT
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((BITS (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK IS-CONSTANT `(LOGBITP ,*IS-CONSTANT-BIT* ,BITS)))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'IS-UPDATE-SLOT)
 (SYSTEM::%PUTD 'IS-UPDATE-SLOT
  (SYSTEM::MAKE-MACRO
   (FUNCTION IS-UPDATE-SLOT
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((BITS (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK IS-UPDATE-SLOT `(LOGBITP ,*IS-UPDATE-SLOT-BIT* ,BITS)))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'SET-IS-UPDATE-SLOT)
 (SYSTEM::%PUTD 'SET-IS-UPDATE-SLOT
  (SYSTEM::MAKE-MACRO
   (FUNCTION SET-IS-UPDATE-SLOT
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((BITS (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK SET-IS-UPDATE-SLOT `(LOGIOR ,*IS-UPDATE-SLOT-MASK* ,BITS)))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'IS-LOCAL-ONLY)
 (SYSTEM::%PUTD 'IS-LOCAL-ONLY
  (SYSTEM::MAKE-MACRO
   (FUNCTION IS-LOCAL-ONLY
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((BITS (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK IS-LOCAL-ONLY `(LOGBITP ,*IS-LOCAL-ONLY-SLOT-BIT* ,BITS)))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'IS-PARAMETER)
 (SYSTEM::%PUTD 'IS-PARAMETER
  (SYSTEM::MAKE-MACRO
   (FUNCTION IS-PARAMETER
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((BITS (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK IS-PARAMETER `(LOGBITP ,*IS-PARAMETER-SLOT-BIT* ,BITS)))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'EXTRACT-TYPE-CODE)
 (SYSTEM::%PUTD 'EXTRACT-TYPE-CODE
  (SYSTEM::MAKE-MACRO
   (FUNCTION EXTRACT-TYPE-CODE
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((BITS (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK EXTRACT-TYPE-CODE `(LOGAND ,*TYPE-MASK* ,BITS)))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'GET-ENTRY-TYPE-CODE)
 (SYSTEM::%PUTD 'GET-ENTRY-TYPE-CODE
  (SYSTEM::MAKE-MACRO
   (FUNCTION GET-ENTRY-TYPE-CODE
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((ENTRY (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK GET-ENTRY-TYPE-CODE
        `(LOCALLY (DECLARE ,*SPECIAL-KR-OPTIMIZATION*)
          (EXTRACT-TYPE-CODE (SL-BITS ,ENTRY)))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'CODE-TO-TYPE)
 (SYSTEM::%PUTD 'CODE-TO-TYPE
  (SYSTEM::MAKE-MACRO
   (FUNCTION CODE-TO-TYPE
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((TYPE-CODE (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK CODE-TO-TYPE `(SVREF TYPES-ARRAY ,TYPE-CODE)))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'CODE-TO-TYPE-FN)
 (SYSTEM::%PUTD 'CODE-TO-TYPE-FN
  (SYSTEM::MAKE-MACRO
   (FUNCTION CODE-TO-TYPE-FN
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((TYPE-CODE (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK CODE-TO-TYPE-FN `(SVREF TYPE-FNS-ARRAY ,TYPE-CODE)))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'CODE-TO-TYPE-DOC)
 (SYSTEM::%PUTD 'CODE-TO-TYPE-DOC
  (SYSTEM::MAKE-MACRO
   (FUNCTION CODE-TO-TYPE-DOC
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((TYPE-CODE (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK CODE-TO-TYPE-DOC `(SVREF TYPE-DOCS-ARRAY ,TYPE-CODE)))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'CHECK-KR-TYPE)
 (SYSTEM::%PUTD 'CHECK-KR-TYPE
  (SYSTEM::MAKE-MACRO
   (FUNCTION CHECK-KR-TYPE
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 3.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((VALUE (CADR . #1=(SYSTEM::<MACRO-FORM>))) (CODE (CADDR . #1#)))
       (BLOCK CHECK-KR-TYPE `(FUNCALL (CODE-TO-TYPE-FN ,CODE) ,VALUE)))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'DEF-KR-TYPE)
 (SYSTEM::%SET-DOCUMENTATION 'DEF-KR-TYPE 'FUNCTION
  '#1="Defines a new type for KR's type-checking mechanism.  You must define
a type using def-kr-type before you can reference that type.  There
are 2 formats for def-kr-type, one named, one un-named, as the following
examples show:

     (def-kr-type my-named-type () '(or keyword null))
     (def-kr-type '(or keyword null))

Note that the first format is the same syntax as Lisp's 'deftype'.
With either definition, you could then specify some object's type to be
(OR KEYWORD NULL).  With the first defn, you could also specify the type
to be \"MY-NAMED-TYPE\".

You can also provide a documentation string as the last parameter, as in:
     (def-kr-type my-named-type () '(or keyword null) \"Sample doc string\")")
 (SYSTEM::%PUTD 'DEF-KR-TYPE
  (SYSTEM::MAKE-MACRO
   (FUNCTION DEF-KR-TYPE
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     #1#
     (IF (NOT (<= 2. (LENGTH SYSTEM::<MACRO-FORM>) 5.))
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET*
       ((TYPENAME-OR-TYPE (CADR . #2=(SYSTEM::<MACRO-FORM>)))
        (ARGS (CADDR . #2#)) (BODY (CADDDR . #2#)) (TYPE-DOC (FIFTH . #2#)))
       (BLOCK DEF-KR-TYPE
        (COND
         ((LISTP TYPENAME-OR-TYPE)
          (UNLESS (EQ (CAR TYPENAME-OR-TYPE) 'QUOTE)
           (ERROR "Illegal typename to def-kr-type: ~S" TYPENAME-OR-TYPE))
          (UNLESS (AND (NULL ARGS) (NULL BODY) (NULL TYPE-DOC))
           (ERROR "Illegal specification: (DEF-KR-TYPE ~S ~S ~S ~S)"
            TYPENAME-OR-TYPE ARGS BODY TYPE-DOC))
          (SETQ BODY TYPENAME-OR-TYPE) (SETQ TYPENAME-OR-TYPE NIL))
         (ARGS (ERROR "DEF-KR-TYPE only works with NULL args, not ~S~%" ARGS))
         (T (SETQ TYPENAME-OR-TYPE (SYMBOL-NAME TYPENAME-OR-TYPE))))
        (SETQ BODY (EVAL BODY))
        `(ADD-NEW-TYPE ,TYPENAME-OR-TYPE ',BODY ,(TYPE-TO-FN BODY)
          ,TYPE-DOC)))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'MEMBERQ)
 (SYSTEM::%PUTD 'MEMBERQ
  (SYSTEM::MAKE-MACRO
   (FUNCTION MEMBERQ
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 3.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((ITEM (CADR . #1=(SYSTEM::<MACRO-FORM>))) (LIST (CADDR . #1#)))
       (BLOCK MEMBERQ
        (IF (KEYWORDP ITEM) `(MEMBER ,ITEM ,LIST)
         `(MEMBER ,ITEM ,LIST :TEST #'EQ))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'ASSOCQ)
 (SYSTEM::%PUTD 'ASSOCQ
  (SYSTEM::MAKE-MACRO
   (FUNCTION ASSOCQ
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 3.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((ITEM (CADR . #1=(SYSTEM::<MACRO-FORM>))) (ALIST (CADDR . #1#)))
       (BLOCK ASSOCQ
        (IF (KEYWORDP ITEM) `(ASSOC ,ITEM ,ALIST)
         `(ASSOC ,ITEM ,ALIST :TEST #'EQ))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'DO-ONE-OR-LIST)
 (SYSTEM::%PUTD 'DO-ONE-OR-LIST
  (SYSTEM::MAKE-MACRO
   (FUNCTION DO-ONE-OR-LIST
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (< (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET*
       ((VAR (CAADR . #1=(SYSTEM::<MACRO-FORM>))) (LIST (CADADR . #1#))
        (USE-CONTINUE (CAR (CDDADR . #1#))) (BODY (CDDR . #1#)))
       (BLOCK DO-ONE-OR-LIST
        `(LET*
          ((DO-ONE-LIST ,LIST)
           (,VAR (IF (LISTP DO-ONE-LIST) (CAR DO-ONE-LIST) DO-ONE-LIST)))
          (BLOCK NIL
           (TAGBODY AGAIN (IF (NULL DO-ONE-LIST) (RETURN-FROM NIL NIL)) ,@BODY
            ,@(IF USE-CONTINUE '(ENDBODY))
            (IF (NOT (LISTP DO-ONE-LIST)) (RETURN-FROM NIL NIL))
            (SETQ DO-ONE-LIST (CDR DO-ONE-LIST) ,VAR (CAR DO-ONE-LIST))
            (GO AGAIN))))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'PUSH-ONE-OR-LIST)
 (SYSTEM::%PUTD 'PUSH-ONE-OR-LIST
  (SYSTEM::MAKE-MACRO
   (FUNCTION PUSH-ONE-OR-LIST
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (NOT (<= 3. (LENGTH SYSTEM::<MACRO-FORM>) 4.))
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET*
       ((ITEM (CADR . #1=(SYSTEM::<MACRO-FORM>))) (ACCESSOR-FORM (CADDR . #1#))
        (CHECK-NEW-P (CADDDR . #1#)))
       (BLOCK PUSH-ONE-OR-LIST
        `(LET ((CURRENT ,ACCESSOR-FORM))
          (IF (NULL CURRENT) (SETF ,ACCESSOR-FORM ,ITEM)
           (IF (LISTP CURRENT)
            ,@(IF CHECK-NEW-P
               `#2=((IF (NOT (MEMBER ,ITEM CURRENT))
                     (SETF ,ACCESSOR-FORM (CONS ,ITEM CURRENT))))
               `#3=((SETF ,ACCESSOR-FORM (CONS ,ITEM CURRENT))))
            ,@(IF CHECK-NEW-P
               `#4=((IF (NOT (EQ ,ITEM CURRENT))
                     (SETF ,ACCESSOR-FORM (LIST ,ITEM CURRENT))))
               `#5=((SETF ,ACCESSOR-FORM (LIST ,ITEM CURRENT)))))))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'DELETE-ONE-OR-LIST)
 (SYSTEM::%PUTD 'DELETE-ONE-OR-LIST
  (SYSTEM::MAKE-MACRO
   (FUNCTION DELETE-ONE-OR-LIST
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 3.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET*
       ((ITEM (CADR . #1=(SYSTEM::<MACRO-FORM>)))
        (ACCESSOR-FORM (CADDR . #1#)))
       (BLOCK DELETE-ONE-OR-LIST
        `(LET ((CURRENT ,ACCESSOR-FORM))
          (IF (LISTP CURRENT) (SETF ,ACCESSOR-FORM (DELETE ,ITEM CURRENT))
           (IF (EQ ,ITEM CURRENT) (SETF ,ACCESSOR-FORM NIL))))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'CONTINUE-OUT)
 (SYSTEM::%PUTD 'CONTINUE-OUT
  (SYSTEM::MAKE-MACRO
   (FUNCTION CONTINUE-OUT
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (> (LENGTH SYSTEM::<MACRO-FORM>) 1.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* NIL (BLOCK CONTINUE-OUT `(GO ENDBODY)))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'GET-DEPENDENT-FORMULA)
 (SYSTEM::%PUTD 'GET-DEPENDENT-FORMULA
  (SYSTEM::MAKE-MACRO
   (FUNCTION GET-DEPENDENT-FORMULA
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((DEPENDENCY (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK GET-DEPENDENT-FORMULA `(CAR ,DEPENDENCY)))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'SLOT-DEPENDENTS)
 (SYSTEM::%PUTD 'SLOT-DEPENDENTS
  (SYSTEM::MAKE-MACRO
   (FUNCTION SLOT-DEPENDENTS
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((SLOT-STRUCTURE (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK SLOT-DEPENDENTS
        (LET ((ENTRY (GENSYM)))
         `(LOCALLY (DECLARE ,*SPECIAL-KR-OPTIMIZATION*)
           (LET ((,ENTRY ,SLOT-STRUCTURE))
            (IF (FULL-SL-P ,ENTRY) (FULL-SL-DEPENDENTS ,ENTRY)))))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'SLOT-ACCESSOR)
 (SYSTEM::%PUTD 'SLOT-ACCESSOR
  (SYSTEM::MAKE-MACRO
   (FUNCTION SLOT-ACCESSOR
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 3.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((SCHEMA (CADR . #1=(SYSTEM::<MACRO-FORM>))) (SLOT (CADDR . #1#)))
       (BLOCK SLOT-ACCESSOR
        `(VALUES (GETHASH ,SLOT (SCHEMA-BINS ,SCHEMA)))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'SET-SLOT-ACCESSOR)
 (SYSTEM::%PUTD 'SET-SLOT-ACCESSOR
  (SYSTEM::MAKE-MACRO
   (FUNCTION SET-SLOT-ACCESSOR
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 6.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET*
       ((SCHEMA (CADR . #1=(SYSTEM::<MACRO-FORM>))) (SLOT (CADDR . #1#))
        (VALUE (CADDDR . #1#)) (BITS (FIFTH . #1#))
        (THE-DEPENDENTS (CADR (CDDDDR . #1#))))
       (BLOCK SET-SLOT-ACCESSOR
        (LET ((THE-BINS (GENSYM)) (THE-ENTRY (GENSYM)) (DEPENDENTS (GENSYM)))
         `(LET*
           ((,THE-BINS (SCHEMA-BINS ,SCHEMA))
            (,THE-ENTRY (GETHASH ,SLOT ,THE-BINS))
            (,DEPENDENTS ,THE-DEPENDENTS))
           (IF ,THE-ENTRY
            (PROGN
             (WHEN (AND ,DEPENDENTS (NOT (FULL-SL-P ,THE-ENTRY)))
              (SETF (GETHASH ,SLOT ,THE-BINS) (SETF ,THE-ENTRY (MAKE-FULL-SL)))
              (SETF (SL-NAME ,THE-ENTRY) ,SLOT))
             (SETF (SL-VALUE ,THE-ENTRY) ,VALUE)
             (SETF (SL-BITS ,THE-ENTRY) ,BITS)
             (IF ,DEPENDENTS
              (SETF (FULL-SL-DEPENDENTS ,THE-ENTRY) ,DEPENDENTS))
             ,THE-ENTRY)
            (PROGN (SETF ,THE-ENTRY (IF ,DEPENDENTS (MAKE-FULL-SL) (MAKE-SL)))
             (SETF (SL-NAME ,THE-ENTRY) ,SLOT)
             (SETF (SL-VALUE ,THE-ENTRY) ,VALUE)
             (SETF (SL-BITS ,THE-ENTRY) ,BITS)
             (IF ,DEPENDENTS
              (SETF (FULL-SL-DEPENDENTS ,THE-ENTRY) ,DEPENDENTS))
             (SETF (GETHASH ,SLOT ,THE-BINS) ,THE-ENTRY)))))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'A-FORMULA-NUMBER)
 (SYSTEM::%PUTD 'A-FORMULA-NUMBER
  (SYSTEM::MAKE-MACRO
   (FUNCTION A-FORMULA-NUMBER
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((FORMULA (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK A-FORMULA-NUMBER `(A-FORMULA-BINS ,FORMULA)))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'SET-FORMULA-NUMBER)
 (SYSTEM::%PUTD 'SET-FORMULA-NUMBER
  (SYSTEM::MAKE-MACRO
   (FUNCTION SET-FORMULA-NUMBER
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 3.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET*
       ((FORMULA (CADR . #1=(SYSTEM::<MACRO-FORM>))) (VALUE (CADDR . #1#)))
       (BLOCK SET-FORMULA-NUMBER
        `(SETF (A-FORMULA-BINS ,FORMULA) ,VALUE)))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'ON-SCHEMA)
 (SYSTEM::%PUTD 'ON-SCHEMA
  (SYSTEM::MAKE-MACRO
   (FUNCTION ON-SCHEMA
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((FORMULA (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK ON-SCHEMA `(A-FORMULA-SCHEMA ,FORMULA)))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'ON-SLOT)
 (SYSTEM::%PUTD 'ON-SLOT
  (SYSTEM::MAKE-MACRO
   (FUNCTION ON-SLOT
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((FORMULA (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK ON-SLOT `(A-FORMULA-SLOT ,FORMULA)))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'CACHED-VALUE)
 (SYSTEM::%PUTD 'CACHED-VALUE
  (SYSTEM::MAKE-MACRO
   (FUNCTION CACHED-VALUE
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((THING (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK CACHED-VALUE `(A-FORMULA-CACHED-VALUE ,THING)))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'CACHE-IS-VALID)
 (SYSTEM::%PUTD 'CACHE-IS-VALID
  (SYSTEM::MAKE-MACRO
   (FUNCTION CACHE-IS-VALID
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((THING (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK CACHE-IS-VALID `(LOGBITP 0. (A-FORMULA-NUMBER ,THING))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'SET-CACHE-IS-VALID)
 (SYSTEM::%PUTD 'SET-CACHE-IS-VALID
  (SYSTEM::MAKE-MACRO
   (FUNCTION SET-CACHE-IS-VALID
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 3.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((THING (CADR . #1=(SYSTEM::<MACRO-FORM>))) (VALUE (CADDR . #1#)))
       (BLOCK SET-CACHE-IS-VALID
        (IF VALUE
         `(SET-FORMULA-NUMBER ,THING (LOGIOR (A-FORMULA-NUMBER ,THING) 1.))
         `(SET-FORMULA-NUMBER ,THING
           (LOGAND (A-FORMULA-NUMBER ,THING) ,(LOGNOT 1.))))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'CACHE-MARK)
 (SYSTEM::%PUTD 'CACHE-MARK
  (SYSTEM::MAKE-MACRO
   (FUNCTION CACHE-MARK
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((THING (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK CACHE-MARK
        `(LOGAND (A-FORMULA-NUMBER ,THING) ,(LOGNOT 1.))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'SET-CACHE-MARK)
 (SYSTEM::%PUTD 'SET-CACHE-MARK
  (SYSTEM::MAKE-MACRO
   (FUNCTION SET-CACHE-MARK
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 3.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((THING (CADR . #1=(SYSTEM::<MACRO-FORM>))) (MARK (CADDR . #1#)))
       (BLOCK SET-CACHE-MARK
        `(SET-FORMULA-NUMBER ,THING
          (LOGIOR (LOGAND (A-FORMULA-NUMBER ,THING) 1.) ,MARK))))))))))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL ITERATE-SLOT-VALUE-ENTRY)))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'ITERATE-SLOT-VALUE)
 (SYSTEM::%PUTD 'ITERATE-SLOT-VALUE
  (SYSTEM::MAKE-MACRO
   (FUNCTION ITERATE-SLOT-VALUE
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (< (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET*
       ((A-SCHEMA (CAADR . #1=(SYSTEM::<MACRO-FORM>)))
        (INHERITED (CADADR . #1#)) (EVERYTHING (CAR #2=(CDDADR . #1#)))
        (CHECK-FORMULA-P (CADR #2#)) (BODY (CDDR . #1#)))
       (BLOCK ITERATE-SLOT-VALUE
        `(LOCALLY (DECLARE ,*SPECIAL-KR-OPTIMIZATION*)
          (,@(IF CHECK-FORMULA-P `#3=(IF (NOT (FORMULA-P ,A-SCHEMA))) '(PROGN))
           (MAPHASH
            #'(LAMBDA (ITERATE-IGNORED-SLOT-NAME ITERATE-SLOT-VALUE-ENTRY)
               (DECLARE (IGNORE ITERATE-IGNORED-SLOT-NAME))
               (LET
                ((SLOT (SL-NAME ITERATE-SLOT-VALUE-ENTRY))
                 (VALUE (SL-VALUE ITERATE-SLOT-VALUE-ENTRY)))
                ,@(IF INHERITED
                   (IF EVERYTHING BODY
                    `#4=((UNLESS (EQ VALUE *NO-VALUE*) ,@BODY)))
                   `#5=((UNLESS
                         (IS-INHERITED (SL-BITS ITERATE-SLOT-VALUE-ENTRY))
                         ,@(IF EVERYTHING BODY
                            `#6=((UNLESS (EQ VALUE *NO-VALUE*) ,@BODY))))))))
            (SCHEMA-BINS ,A-SCHEMA))))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'DOSLOTS)
 (SYSTEM::%PUTD 'DOSLOTS
  (SYSTEM::MAKE-MACRO
   (FUNCTION DOSLOTS
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (< (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET*
       ((SLOT-VAR (CAADR . #1=(SYSTEM::<MACRO-FORM>)))
        (A-SCHEMA (CADADR . #1#)) (INHERITED (CAR (CDDADR . #1#)))
        (BODY (CDDR . #1#)))
       (BLOCK DOSLOTS
        `(ITERATE-SLOT-VALUE (,A-SCHEMA ,INHERITED NIL NIL)
          (LET ((,SLOT-VAR SLOT)) ,@BODY))))))))))
(PROGN
 (SYSTEM::C-DEFUN 'GET-LOCAL-VALUE
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA SLOT))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'GET-LOCAL-VALUES)
 (SYSTEM::%PUTD 'GET-LOCAL-VALUES
  (SYSTEM::MAKE-MACRO
   (FUNCTION GET-LOCAL-VALUES
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 3.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((SCHEMA (CADR . #1=(SYSTEM::<MACRO-FORM>))) (SLOT (CADDR . #1#)))
       (BLOCK GET-LOCAL-VALUES `(GET-LOCAL-VALUE ,SCHEMA ,SLOT)))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'EXPAND-ACCESSOR)
 (SYSTEM::%PUTD 'EXPAND-ACCESSOR
  (SYSTEM::MAKE-MACRO
   (FUNCTION EXPAND-ACCESSOR
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (< (LENGTH SYSTEM::<MACRO-FORM>) 3.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET*
       ((ACCESSOR-FUNCTION (CADR . #1=(SYSTEM::<MACRO-FORM>)))
        (SCHEMA (CADDR . #1#)) (SLOTS (CDDDR . #1#)))
       (BLOCK EXPAND-ACCESSOR
        (IF SLOTS
         (LET ((KERNEL SCHEMA))
          (DO ((SLOT SLOTS (CDR SLOT))) ((NULL SLOT))
           (SETF KERNEL `(,ACCESSOR-FUNCTION ,KERNEL ,(CAR SLOT))))
          KERNEL)
         (ERROR "expand-accessor: at least one slot is required"))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'WITH-CONSTANTS-DISABLED)
 (SYSTEM::%PUTD 'WITH-CONSTANTS-DISABLED
  (SYSTEM::MAKE-MACRO
   (FUNCTION WITH-CONSTANTS-DISABLED
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (LET* ((BODY (CDR SYSTEM::<MACRO-FORM>)))
      (BLOCK WITH-CONSTANTS-DISABLED
       `(LET ((*CONSTANTS-DISABLED* T)) ,@BODY))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'WITH-TYPES-DISABLED)
 (SYSTEM::%PUTD 'WITH-TYPES-DISABLED
  (SYSTEM::MAKE-MACRO
   (FUNCTION WITH-TYPES-DISABLED
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (LET* ((BODY (CDR SYSTEM::<MACRO-FORM>)))
      (BLOCK WITH-TYPES-DISABLED `(LET ((*TYPES-ENABLED* NIL)) ,@BODY))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'WITH-DEPENDENCIES-DISABLED)
 (SYSTEM::%PUTD 'WITH-DEPENDENCIES-DISABLED
  (SYSTEM::MAKE-MACRO
   (FUNCTION WITH-DEPENDENCIES-DISABLED
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (LET* ((BODY (CDR SYSTEM::<MACRO-FORM>)))
      (BLOCK WITH-DEPENDENCIES-DISABLED
       `(LET ((*SETUP-DEPENDENCIES* NIL)) ,@BODY))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'WITH-DEMONS-DISABLED)
 (SYSTEM::%PUTD 'WITH-DEMONS-DISABLED
  (SYSTEM::MAKE-MACRO
   (FUNCTION WITH-DEMONS-DISABLED
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (LET* ((BODY (CDR SYSTEM::<MACRO-FORM>)))
      (BLOCK WITH-DEMONS-DISABLED `(LET ((*DEMONS-DISABLED* T)) ,@BODY))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'WITH-DEMON-DISABLED)
 (SYSTEM::%PUTD 'WITH-DEMON-DISABLED
  (SYSTEM::MAKE-MACRO
   (FUNCTION WITH-DEMON-DISABLED
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (< (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((DEMON (CADR . #1=(SYSTEM::<MACRO-FORM>))) (BODY (CDDR . #1#)))
       (BLOCK WITH-DEMON-DISABLED
        `(LET ((*DEMONS-DISABLED* (DISABLE-A-DEMON ,DEMON))) ,@BODY)))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'WITH-DEMON-ENABLED)
 (SYSTEM::%PUTD 'WITH-DEMON-ENABLED
  (SYSTEM::MAKE-MACRO
   (FUNCTION WITH-DEMON-ENABLED
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (< (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((DEMON (CADR . #1=(SYSTEM::<MACRO-FORM>))) (BODY (CDDR . #1#)))
       (BLOCK WITH-DEMON-ENABLED
        `(LET ((*DEMONS-DISABLED* (ENABLE-A-DEMON ,DEMON))) ,@BODY)))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'RELATION-P)
 (SYSTEM::%PUTD 'RELATION-P
  (SYSTEM::MAKE-MACRO
   (FUNCTION RELATION-P
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((SLOT (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK RELATION-P `(ASSOCQ ,SLOT *RELATIONS*)))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'G-VALUE-BODY)
 (SYSTEM::%PUTD 'G-VALUE-BODY
  (SYSTEM::MAKE-MACRO
   (FUNCTION G-VALUE-BODY
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 5.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET*
       ((SCHEMA (CADR . #1=(SYSTEM::<MACRO-FORM>))) (SLOT (CADDR . #1#))
        (INHERIT-P (CADDDR . #1#)) (FORMULA-P (FIFTH . #1#)))
       (BLOCK G-VALUE-BODY
        (LET
         ((SCHEMA-FORM (IF (SYMBOLP SCHEMA) SCHEMA 'SCHEMA)) (ENTRY (GENSYM))
          (VALUE (GENSYM)))
         `(LOCALLY (DECLARE ,*SPECIAL-KR-OPTIMIZATION*)
           (LET*
            (,@(UNLESS (SYMBOLP SCHEMA) `#2=((SCHEMA ,SCHEMA)))
             (,ENTRY
              (IF (IS-SCHEMA ,SCHEMA-FORM)
               (LET ((BINS (SCHEMA-BINS ,SCHEMA-FORM)))
                (IF (AND BINS (NOT (INTEGERP BINS)))
                 (SLOT-ACCESSOR ,SCHEMA-FORM ,SLOT)
                 (ERROR #3="Non-object ~S in g-value or get-value (slot is ~S)"
                  ,SCHEMA-FORM ,SLOT)))
               (ERROR #4="Non-object ~S in g-value or get-value (slot is ~S)"
                ,SCHEMA-FORM ,SLOT)))
             (,VALUE
              (IF ,ENTRY
               ,@(IF (NOT INHERIT-P)
                  `#5=((IF (IS-INHERITED (SL-BITS ,ENTRY))
                        ,@(IF FORMULA-P
                           `#6=((IF (A-FORMULA-P (SL-VALUE ,ENTRY))
                                 (SL-VALUE ,ENTRY)))
                           `#7=(NIL))
                        (SL-VALUE ,ENTRY)))
                  `#8=((SL-VALUE ,ENTRY)))
               ,@(IF (OR INHERIT-P FORMULA-P) `#9=(*NO-VALUE*)))))
            (IF (EQ ,VALUE *NO-VALUE*)
             ,@(COND
                ((AND (NOT INHERIT-P) (NOT FORMULA-P))
                 `#10=((SETF ,VALUE NIL)))
                ((AND (NOT INHERIT-P) FORMULA-P)
                 `#11=((IF ,ENTRY (SETF ,VALUE NIL)
                        (IF
                         (NOT
                          (FORMULA-P
                           (SETF ,VALUE
                            (G-VALUE-INHERIT-VALUES ,SCHEMA-FORM ,SLOT T
                             NIL))))
                         (SETF ,VALUE NIL)))))
                ((A-LOCAL-ONLY-SLOT SLOT) `#12=((SETF ,VALUE NIL)))
                (T
                 `#13=((IF (IF ,ENTRY (IS-INHERITED (SL-BITS ,ENTRY)))
                        (SETF ,VALUE NIL)
                        (PROGN
                         (SETF ,VALUE
                          (G-VALUE-INHERIT-VALUES ,SCHEMA-FORM ,SLOT T ,ENTRY))
                         (IF (EQ ,VALUE *NO-VALUE*) (SETF ,VALUE NIL))))))))
            ,@(IF FORMULA-P
               `#14=((IF (A-FORMULA-P ,VALUE)
                      (G-VALUE-FORMULA-VALUE ,SCHEMA-FORM ,SLOT ,VALUE ,ENTRY)
                      ,VALUE))
               `#15=(,VALUE)))))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'GET-VALUE)
 (SYSTEM::%PUTD 'GET-VALUE
  (SYSTEM::MAKE-MACRO
   (FUNCTION GET-VALUE
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 3.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((SCHEMA (CADR . #1=(SYSTEM::<MACRO-FORM>))) (SLOT (CADDR . #1#)))
       (BLOCK GET-VALUE `(G-VALUE-BODY ,SCHEMA ,SLOT T NIL)))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'G-VALUE)
 (SYSTEM::%PUTD 'G-VALUE
  (SYSTEM::MAKE-MACRO
   (FUNCTION G-VALUE
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (< (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((SCHEMA (CADR . #1=(SYSTEM::<MACRO-FORM>))) (SLOTS (CDDR . #1#)))
       (BLOCK G-VALUE
        (IF SLOTS `(EXPAND-ACCESSOR VALUE-FN ,SCHEMA ,@SLOTS)
         `(PROGN ,SCHEMA))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'G-LOCAL-VALUE)
 (SYSTEM::%PUTD 'G-LOCAL-VALUE
  (SYSTEM::MAKE-MACRO
   (FUNCTION G-LOCAL-VALUE
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (< (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((SCHEMA (CADR . #1=(SYSTEM::<MACRO-FORM>))) (SLOTS (CDDR . #1#)))
       (BLOCK G-LOCAL-VALUE
        (IF SLOTS `(EXPAND-ACCESSOR G-LOCAL-VALUE-FN ,SCHEMA ,@SLOTS)
         `(PROGN ,SCHEMA))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'SLOT-REQUIRES-DEMON)
 (SYSTEM::%PUTD 'SLOT-REQUIRES-DEMON
  (SYSTEM::MAKE-MACRO
   (FUNCTION SLOT-REQUIRES-DEMON
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (NOT (<= 3. (LENGTH SYSTEM::<MACRO-FORM>) 4.))
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET*
       ((SCHEMA (CADR . #1=(SYSTEM::<MACRO-FORM>))) (SLOT (CADDR . #1#))
        (ENTRY (CADDDR . #1#)))
       (BLOCK SLOT-REQUIRES-DEMON
        `(LOCALLY (DECLARE ,*SPECIAL-KR-OPTIMIZATION*)
          (LET ((.ENTRY. (OR ,ENTRY (SLOT-ACCESSOR ,SCHEMA ,SLOT))))
           (IF .ENTRY. (IS-UPDATE-SLOT (SL-BITS .ENTRY.)))))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'RUN-INVALIDATE-DEMONS)
 (SYSTEM::%PUTD 'RUN-INVALIDATE-DEMONS
  (SYSTEM::MAKE-MACRO
   (FUNCTION RUN-INVALIDATE-DEMONS
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 4.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET*
       ((SCHEMA (CADR . #1=(SYSTEM::<MACRO-FORM>))) (SLOT (CADDR . #1#))
        (ENTRY (CADDDR . #1#)))
       (BLOCK RUN-INVALIDATE-DEMONS
        `(UNLESS (EQ *DEMONS-DISABLED* T)
          (IF (SLOT-REQUIRES-DEMON ,SCHEMA ,SLOT ,ENTRY)
           (LET ((DEMON (GET-VALUE ,SCHEMA :INVALIDATE-DEMON)))
            (IF DEMON
             (UNLESS (DEMON-IS-DISABLED DEMON)
              (FUNCALL DEMON ,SCHEMA ,SLOT NIL))))))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'RUN-PRE-SET-DEMONS)
 (SYSTEM::%PUTD 'RUN-PRE-SET-DEMONS
  (SYSTEM::MAKE-MACRO
   (FUNCTION RUN-PRE-SET-DEMONS
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 6.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET*
       ((SCHEMA (CADR . #1=(SYSTEM::<MACRO-FORM>))) (SLOT (CADDR . #1#))
        (NEW-VALUE (CADDDR . #1#)) (IS-FORMULA (FIFTH . #1#))
        (REASON (CADR (CDDDDR . #1#))))
       (BLOCK RUN-PRE-SET-DEMONS
        `(UNLESS (EQ *DEMONS-DISABLED* T)
          (IF *SLOT-SETTER-DEBUG*
           (FUNCALL *SLOT-SETTER-DEBUG* ,SCHEMA ,SLOT ,NEW-VALUE ,REASON))
          (IF *PRE-SET-DEMON*
           (IF (NOT (DEMON-IS-DISABLED *PRE-SET-DEMON*))
            (IF (SLOT-REQUIRES-DEMON ,SCHEMA ,SLOT)
             (IF
              ,@(IF IS-FORMULA
                 `#2=((NOT
                       (EQUAL ,NEW-VALUE
                        ,@(COND
                           ((EQ IS-FORMULA :CURRENT-FORMULA)
                            `#3=((CACHED-VALUE *CURRENT-FORMULA*)))
                           ((EQ IS-FORMULA T)
                            `#4=((G-CACHED-VALUE ,SCHEMA ,SLOT)))
                           (T `#5=(,IS-FORMULA))))))
                 `#6=(T))
              (FUNCALL *PRE-SET-DEMON* ,SCHEMA ,SLOT ,NEW-VALUE))))))))))))))
(PROGN
 (SYSTEM::C-DEFUN 'S-VALUE-CHAIN
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA &REST SLOTS))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'S-VALUE)
 (SYSTEM::%PUTD 'S-VALUE
  (SYSTEM::MAKE-MACRO
   (FUNCTION S-VALUE
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (< (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((SCHEMA (CADR . #1=(SYSTEM::<MACRO-FORM>))) (SLOTS (CDDR . #1#)))
       (BLOCK S-VALUE
        (IF SLOTS
         (IF (CDDR SLOTS) `(S-VALUE-CHAIN ,SCHEMA ,@SLOTS)
          `(S-VALUE-FN ,SCHEMA ,(FIRST SLOTS) ,(SECOND SLOTS))))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'DOVALUES)
 (SYSTEM::%PUTD 'DOVALUES
  (SYSTEM::MAKE-MACRO
   (FUNCTION DOVALUES
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (< (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET*
       ((VARIABLE (CAADR . #1=(SYSTEM::<MACRO-FORM>))) (SCHEMA (CADADR . #1#))
        (SLOT (CAR #2=(CDDADR . #1#))) (#3=#:G2878 (CDR #2#))
        (LOCAL (GETF #3# :LOCAL . #4=(SYSTEM::MACRO-MISSING-VALUE)))
        (LOCAL (IF (EQ LOCAL . #5=(SYSTEM::MACRO-MISSING-VALUE)) NIL LOCAL))
        (RESULT (GETF #3# :RESULT . #4#))
        (RESULT (IF (EQ RESULT . #5#) NIL RESULT))
        (FORMULAS (GETF #3# :FORMULAS . #4#))
        (FORMULAS (IF (EQ FORMULAS . #5#) T FORMULAS))
        (IN-FORMULA (GETF #3# :IN-FORMULA . #4#))
        (IN-FORMULA (IF (EQ IN-FORMULA . #5#) NIL IN-FORMULA))
        (BODY (CDDR . #1#)))
       (SYSTEM::KEYWORD-TEST #3# '(:IN-FORMULA :FORMULAS :RESULT :LOCAL))
       (BLOCK DOVALUES
        `(LOCALLY (DECLARE ,*SPECIAL-KR-OPTIMIZATION*)
          (LET*
           ((SCHEMA ,@(IF (EQ SCHEMA :SELF) `#6=(*SCHEMA-SELF*) `#7=(,SCHEMA)))
            (VALUES
             ,@(IF LOCAL
                (IF FORMULAS `#8=((G-LOCAL-VALUE SCHEMA ,SLOT))
                 `#9=((GET-LOCAL-VALUE SCHEMA ,SLOT)))
                (IF FORMULAS
                 (IF IN-FORMULA `#10=((GV SCHEMA ,SLOT))
                  `#11=((G-VALUE SCHEMA ,SLOT)))
                 (IF IN-FORMULA `#12=((GV SCHEMA ,SLOT))
                  `#13=((GET-VALUE SCHEMA ,SLOT)))))))
           (IF VALUES
            (PROGN
             (UNLESS (LISTP VALUES)
              (FORMAT T
               #14="(DOVALUES ~s ~s) does not contain a list of values!~%"
               ,SCHEMA ,SLOT)
              (SETF VALUES (LIST VALUES)))
             (DOLIST (,VARIABLE VALUES)
              ,@(IF FORMULAS
                 `#15=((WHEN (FORMULA-P ,VARIABLE)
                        (SETF ,VARIABLE
                         (G-VALUE-FORMULA-VALUE SCHEMA ,SLOT ,VARIABLE NIL)))))
              ,@BODY)))
           ,RESULT))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'CREATE-RELATION)
 (SYSTEM::%PUTD 'CREATE-RELATION
  (SYSTEM::MAKE-MACRO
   (FUNCTION CREATE-RELATION
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (< (LENGTH SYSTEM::<MACRO-FORM>) 3.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET*
       ((RELATION (CADR . #1=(SYSTEM::<MACRO-FORM>)))
        (INHERITANCE-P (CADDR . #1#)) (INVERSES (CDDDR . #1#)))
       (BLOCK CREATE-RELATION
        (LET ((ENTRY (GENSYM)))
         `(LET ((INVERSES ',INVERSES))
           (WHEN ,INHERITANCE-P (PUSHNEW ,RELATION *INHERITANCE-RELATIONS*)
            (DOLIST (INVERSE INVERSES)
             (PUSHNEW INVERSE *INHERITANCE-INVERSE-RELATIONS*)))
           (UNLESS (ASSOCQ ,RELATION *RELATIONS*)
            (PUSH (CONS ,RELATION INVERSES) *RELATIONS*))
           (DOLIST (INV INVERSES)
            (LET ((,ENTRY (ASSOCQ INV *RELATIONS*)))
             (IF ,ENTRY (PUSHNEW ,RELATION (CDR ,ENTRY))
              (PROGN (PUSH (LIST INV ,RELATION) *RELATIONS*)))))))))))))))
(PROGN
 (SYSTEM::C-DEFUN 'HAS-SLOT-P
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA SLOT))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'SET-VALUES)
 (SYSTEM::%PUTD 'SET-VALUES
  (SYSTEM::MAKE-MACRO
   (FUNCTION SET-VALUES
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 4.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET*
       ((SCHEMA (CADR . #1=(SYSTEM::<MACRO-FORM>))) (SLOT (CADDR . #1#))
        (VALUES (CADDDR . #1#)))
       (BLOCK SET-VALUES
        `(IF (RELATION-P ,SLOT)
          (S-VALUE ,SCHEMA ,SLOT (IF (LISTP ,VALUES) ,VALUES (LIST ,VALUES)))
          (S-VALUE ,SCHEMA ,SLOT ,VALUES))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'KR-SEND)
 (SYSTEM::%PUTD 'KR-SEND
  (SYSTEM::MAKE-MACRO
   (FUNCTION KR-SEND
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (< (LENGTH SYSTEM::<MACRO-FORM>) 3.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET*
       ((SCHEMA (CADR . #1=(SYSTEM::<MACRO-FORM>))) (SLOT (CADDR . #1#))
        (ARGS (CDDDR . #1#)))
       (BLOCK KR-SEND
        (LET ((THE-SCHEMA (GENSYM)) (THE-FUNCTION (GENSYM)))
         `(LET*
           ((,THE-SCHEMA ,SCHEMA) (,THE-FUNCTION (G-VALUE ,THE-SCHEMA ,SLOT)))
           (IF ,THE-FUNCTION
            (LET
             ((*KR-SEND-SELF* ,THE-SCHEMA) (*KR-SEND-SLOT* ,SLOT)
              (*KR-SEND-PARENT* NIL))
             (FUNCALL ,THE-FUNCTION ,@ARGS)))))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'CALL-PROTOTYPE-METHOD)
 (SYSTEM::%PUTD 'CALL-PROTOTYPE-METHOD
  (SYSTEM::MAKE-MACRO
   (FUNCTION CALL-PROTOTYPE-METHOD
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (LET* ((ARGS (CDR SYSTEM::<MACRO-FORM>)))
      (BLOCK CALL-PROTOTYPE-METHOD
       (LET ((ENTRY (GENSYM)))
        `(LOCALLY (DECLARE ,*SPECIAL-KR-OPTIMIZATION*)
          (LET
           ((FIRST-C-P-M
             (AND (NULL *KR-SEND-PARENT*)
              (LET ((,ENTRY (SLOT-ACCESSOR *KR-SEND-SELF* *KR-SEND-SLOT*)))
               (OR (NULL ,ENTRY) (IS-INHERITED (SL-BITS ,ENTRY)))))))
           (MULTIPLE-VALUE-BIND (METHOD NEW-PARENT)
            (FIND-PARENT *KR-SEND-SELF* *KR-SEND-SLOT*)
            (WHEN METHOD
             (IF FIRST-C-P-M
              (MULTIPLE-VALUE-SETQ (METHOD *KR-SEND-PARENT*)
               (FIND-PARENT NEW-PARENT *KR-SEND-SLOT*))
              (SETF *KR-SEND-PARENT* NEW-PARENT))
             (IF METHOD
              (LET ((*KR-SEND-SELF* *KR-SEND-PARENT*))
               (FUNCALL METHOD ,@ARGS)))))))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'APPLY-PROTOTYPE-METHOD)
 (SYSTEM::%PUTD 'APPLY-PROTOTYPE-METHOD
  (SYSTEM::MAKE-MACRO
   (FUNCTION APPLY-PROTOTYPE-METHOD
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (LET* ((ARGS (CDR SYSTEM::<MACRO-FORM>)))
      (BLOCK APPLY-PROTOTYPE-METHOD
       (LET ((ENTRY (GENSYM)))
        `(LOCALLY (DECLARE ,*SPECIAL-KR-OPTIMIZATION*)
          (LET
           ((FIRST-C-P-M
             (AND (NULL *KR-SEND-PARENT*)
              (LET ((,ENTRY (SLOT-ACCESSOR *KR-SEND-SELF* *KR-SEND-SLOT*)))
               (OR (NULL ,ENTRY) (IS-INHERITED (SL-BITS ,ENTRY)))))))
           (MULTIPLE-VALUE-BIND (METHOD NEW-PARENT)
            (FIND-PARENT *KR-SEND-SELF* *KR-SEND-SLOT*)
            (WHEN METHOD
             (IF FIRST-C-P-M
              (MULTIPLE-VALUE-SETQ (METHOD *KR-SEND-PARENT*)
               (FIND-PARENT NEW-PARENT *KR-SEND-SLOT*))
              (SETF *KR-SEND-PARENT* NEW-PARENT))
             (IF METHOD
              (LET ((*KR-SEND-SELF* *KR-SEND-PARENT*))
               (APPLY METHOD ,@ARGS)))))))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'DEFINE-METHOD)
 (SYSTEM::%PUTD 'DEFINE-METHOD
  (SYSTEM::MAKE-MACRO
   (FUNCTION DEFINE-METHOD
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (< (LENGTH SYSTEM::<MACRO-FORM>) 4.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET*
       ((NAME (CADR . #1=(SYSTEM::<MACRO-FORM>))) (CLASS (CADDR . #1#))
        (ARG-LIST (CADDDR . #1#)) (BODY (CDDDDR . #1#)))
       (BLOCK DEFINE-METHOD
        (UNLESS (KEYWORDP NAME)
         (SETF NAME (INTERN (SYMBOL-NAME NAME) (FIND-PACKAGE "KEYWORD")))
         (FORMAT T
          "DEFINE-METHOD takes a keyword as the method name - using ~S~%"
          NAME))
        (LET*
         ((FUNCTION-NAME
           (INTERN
            (CONCATENATE 'STRING (SYMBOL-NAME NAME) "-METHOD-"
             (SYMBOL-NAME CLASS)))))
         `(PROGN (DEFUN ,FUNCTION-NAME ,ARG-LIST ,@BODY)
           (S-VALUE ,CLASS ,NAME ',FUNCTION-NAME)))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'METHOD-TRACE)
 (SYSTEM::%PUTD 'METHOD-TRACE
  (SYSTEM::MAKE-MACRO
   (FUNCTION METHOD-TRACE
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 3.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET*
       ((CLASS (CADR . #1=(SYSTEM::<MACRO-FORM>))) (GENERIC-FN (CADDR . #1#)))
       (BLOCK METHOD-TRACE
        `(LET ((FN (G-VALUE ,CLASS ,GENERIC-FN)))
          (IF FN (EVAL `(TRACE ,FN))))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'CREATE-SCHEMA)
 (SYSTEM::%PUTD 'CREATE-SCHEMA
  (SYSTEM::MAKE-MACRO
   (FUNCTION CREATE-SCHEMA
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (< (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((NAME (CADR . #1=(SYSTEM::<MACRO-FORM>))) (REST (CDDR . #1#)))
       (BLOCK CREATE-SCHEMA
        (LET ((PREFIX (MEMBERQ :NAME-PREFIX REST)))
         (WHEN (AND PREFIX (NULL NAME)) (SETF NAME (SECOND PREFIX))
          (SETF PREFIX NIL))
         (WHEN PREFIX
          (FORMAT T
           "Warning - you specified both a name and a :NAME-PREFIX option~:
       in (create-schema ~S).~%   Ignoring the :NAME-PREFIX.~%"
           NAME)
          (SETF PREFIX NIL))
         (IF (AND (LISTP NAME) (EQ (CAR NAME) 'QUOTE))
          (PROCLAIM `(SPECIAL ,(EVAL NAME))))
         (LET*
          ((OVERRIDE (NOT (NULL (MEMBERQ :OVERRIDE REST))))
           (DESTROY (AND NAME (NOT OVERRIDE))) (*CREATE-SCHEMA-SCHEMA* NAME)
           (SLOTS (PROCESS-SLOTS REST))
           (GENERATE-INSTANCE (NOT (NULL (MEMBERQ :GENERATE-INSTANCE REST)))))
          (CREATION-MESSAGE NAME)
          `(DO-SCHEMA-BODY
            ,(IF DESTROY `#2=(MAKE-A-NEW-SCHEMA ,NAME)
              (IF
               (AND (LISTP NAME) (EQ (CAR NAME) 'QUOTE) (BOUNDP (SECOND NAME)))
               (EVAL NAME) `#3=(MAKE-A-NEW-SCHEMA ,NAME)))
            ,(CAR SLOTS) ,GENERATE-INSTANCE
            ,(NULL (MEMBERQ :DELAYED-PROCESSING REST)) ,OVERRIDE
            ,@(CDR SLOTS))))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'CREATE-PROTOTYPE)
 (SYSTEM::%PUTD 'CREATE-PROTOTYPE
  (SYSTEM::MAKE-MACRO
   (FUNCTION CREATE-PROTOTYPE
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (< (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((NAME (CADR . #1=(SYSTEM::<MACRO-FORM>))) (SLOTS (CDDR . #1#)))
       (BLOCK CREATE-PROTOTYPE `(CREATE-SCHEMA ,NAME ,@SLOTS)))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'CREATE-INSTANCE)
 (SYSTEM::%PUTD 'CREATE-INSTANCE
  (SYSTEM::MAKE-MACRO
   (FUNCTION CREATE-INSTANCE
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (< (LENGTH SYSTEM::<MACRO-FORM>) 3.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET*
       ((NAME (CADR . #1=(SYSTEM::<MACRO-FORM>))) (CLASS (CADDR . #1#))
        (BODY (CDDDR . #1#)))
       (BLOCK CREATE-INSTANCE
        (WHEN (AND (LISTP CLASS) (EQ (CAR CLASS) 'QUOTE))
         (CERROR "Remove the quote and use the resulting object."
          "  Quoted symbols cannot be used as prototypes: (create-instance ~S ~S)~%"
          NAME CLASS)
         (SETF CLASS (EVAL (SECOND CLASS))))
        (DOLIST (ELEMENT BODY)
         (WHEN (AND (LISTP ELEMENT) (EQ (CAR ELEMENT) :IS-A))
          (FORMAT T
           "CREATE-INSTANCE ~S ~S: do not specify the :IS-A slot!  Ignored.~%"
           NAME CLASS)
          (SETF BODY (REMOVE (ASSOCQ :IS-A BODY) BODY))))
        `(CREATE-SCHEMA ,NAME :GENERATE-INSTANCE
          ,@(IF CLASS `#2=((:IS-A ,CLASS))) ,@BODY)))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'BEGIN-CREATE-INSTANCE)
 (SYSTEM::%PUTD 'BEGIN-CREATE-INSTANCE
  (SYSTEM::MAKE-MACRO
   (FUNCTION BEGIN-CREATE-INSTANCE
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (< (LENGTH SYSTEM::<MACRO-FORM>) 3.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET*
       ((NAME (CADR . #1=(SYSTEM::<MACRO-FORM>))) (CLASS (CADDR . #1#))
        (BODY (CDDDR . #1#)))
       (BLOCK BEGIN-CREATE-INSTANCE
        (DOLIST (DESCRIPTOR BODY)
         (WHEN (AND (LISTP DESCRIPTOR) (EQ (CAR DESCRIPTOR) :IS-A))
          (FORMAT T
           "BEGIN-CREATE-INSTANCE ~S ~S: do not specify the :IS-A slot!  Ignored.~%"
           NAME CLASS)
          (SETF BODY (REMOVE DESCRIPTOR BODY)) (RETURN)))
        `(CREATE-SCHEMA ,NAME :DELAYED-PROCESSING
          ,@(IF CLASS `#2=((:IS-A ,CLASS))) ,@BODY)))))))))
(PROGN
 (LET NIL (REMPROP 'G-VALUE 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'G-VALUE 'SYSTEM::SETF-EXPANDER 'S-VALUE)
  (SYSTEM::%SET-DOCUMENTATION 'G-VALUE 'SETF NIL) 'G-VALUE))
(PROGN
 (LET NIL (REMPROP 'GET-VALUES 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'GET-VALUES 'SYSTEM::SETF-EXPANDER 'S-VALUE)
  (SYSTEM::%SET-DOCUMENTATION 'GET-VALUES 'SETF NIL) 'GET-VALUES))
(PROGN
 (LET NIL (REMPROP 'GET-LOCAL-VALUES 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'GET-LOCAL-VALUES 'SYSTEM::SETF-EXPANDER 'S-VALUE)
  (SYSTEM::%SET-DOCUMENTATION 'GET-LOCAL-VALUES 'SETF NIL) 'GET-LOCAL-VALUES))
(PROGN
 (LET NIL (REMPROP 'G-LOCAL-VALUE 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'G-LOCAL-VALUE 'SYSTEM::SETF-EXPANDER 'S-VALUE)
  (SYSTEM::%SET-DOCUMENTATION 'G-LOCAL-VALUE 'SETF NIL) 'G-LOCAL-VALUE))
(PROGN
 (LET NIL (REMPROP 'GV 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'GV 'SYSTEM::SETF-EXPANDER
   (LIST* -1. 1.
    (FUNCTION SETF-GV
     (LAMBDA (SYSTEM::%ACCESS-ARGLIST VALUE)
      (LET*
       ((SCHEMA (CADR . #1=(SYSTEM::%ACCESS-ARGLIST))) (SLOTS (CDDR . #1#)))
       (BLOCK GV
        `(PROGN (IF *CURRENT-FORMULA* (GV ,SCHEMA ,@SLOTS))
          (S-VALUE ,SCHEMA ,@SLOTS ,VALUE))))))))
  (SYSTEM::%SET-DOCUMENTATION 'GV 'SETF NIL) 'GV))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'WITH)
 (SYSTEM::%PUTD 'WITH
  (SYSTEM::MAKE-MACRO
   (FUNCTION WITH
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (< (LENGTH SYSTEM::<MACRO-FORM>) 3.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET*
       ((SCHEMA (CADR . #1=(SYSTEM::<MACRO-FORM>))) (SLOT (CADDR . #1#))
        (FORM (CDDDR . #1#)))
       (BLOCK WITH
        `(LET*
          ((*SCHEMA-SELF* (IF (NUMBERP ,SCHEMA) (S ,SCHEMA) ,SCHEMA))
           (*SCHEMA-SLOT* ,SLOT)
           (*CURRENT-FORMULA* (GET-VALUE *SCHEMA-SELF* *SCHEMA-SLOT*))
           (*WARNING-ON-NULL-LINK* T))
          (CATCH 'NO-LINK ,@FORM))))))))))