#0Y UTF-8

(PROGN (SETQ *PACKAGE* (SYSTEM::%FIND-PACKAGE "KR")))
(PROGN (PROCLAIM '(SPECIAL COMMON-LISP-USER::*DEFAULT-GARNET-PROCLAIM*))
 (IF (BOUNDP 'COMMON-LISP-USER::*DEFAULT-GARNET-PROCLAIM*)
  (IF COMMON-LISP-USER::*DEFAULT-GARNET-PROCLAIM*
   (PROCLAIM COMMON-LISP-USER::*DEFAULT-GARNET-PROCLAIM*))
  (PROCLAIM '(OPTIMIZE (SAFETY 1.) (SPACE 0.) (SPEED 3.)))))
(PROGN
 (SYSTEM::C-PROCLAIM '(SPECIAL COMMON-LISP-USER::*DEFAULT-GARNET-PROCLAIM*)))
(PROGN (SYSTEM::C-PROCLAIM '(OPTIMIZE (SAFETY 1.) (SPACE 0.) (SPEED 3.))))
(PROGN (SYSTEM::C-DEFUN 'SCHEMA-P (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(OBJ))))
(PROGN
 (SYSTEM::C-DEFUN 'CLEAR-ONE-SLOT
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA SLOT ENTRY))))
(PROGN
 (SYSTEM::C-DEFUN 'CLEAR-SCHEMA-SLOTS
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA))))
(PROGN
 (SYSTEM::C-DEFUN 'VALUE-FN (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA SLOT))))
(PROGN
 (SYSTEM::C-DEFUN 'G-LOCAL-VALUE-FN
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA SLOT))))
(PROGN
 (SYSTEM::C-DEFUN 'GET-DEPENDENTS
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA SLOT))))
(PROGN
 (SYSTEM::C-DEFUN 'GET-LAMBDA (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(FORMULA))))
(PROGN
 (SYSTEM::C-DEFUN 'ENABLE-A-DEMON (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(DEMON))))
(PROGN
 (SYSTEM::C-DEFUN 'DISABLE-A-DEMON
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(DEMON))))
(PROGN
 (SYSTEM::C-DEFUN 'DEMON-IS-DISABLED
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(DEMON))))
(PROGN
 (SYSTEM::C-DEFUN 'G-VALUE-INHERIT-VALUES
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA SLOT IS-LEAF SLOT-STRUCTURE))))
(PROGN
 (SYSTEM::C-DEFUN 'G-CACHED-VALUE
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA SLOT))))
(PROGN
 (SYSTEM::C-DEFUN 'G-VALUE-NO-COPY
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA SLOT &OPTIONAL SKIP-LOCAL))))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *DEBUG-NAMES-LENGTH*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *DEBUG-NAMES*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *DEBUG-INDEX*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *INTERN-UNNAMED-SCHEMATA*)))
(PROGN
 (SYSTEM::C-DEFUN 'CACHE-SCHEMA-NAME
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA NAME))))
(PROGN
 (SYSTEM::C-DEFUN 'MAKE-NEW-SCHEMA-NAME
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA NAME))))
(PROGN
 (SYSTEM::C-DEFUN 'PRINT-THE-SLOT
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SLOT STREAM LEVEL))))
(PROGN
 (SYSTEM::C-DEFUN 'PRINT-THE-SCHEMA
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA STREAM LEVEL))))
(PROGN
 (SYSTEM::C-DEFUN 'NAME-FOR-SCHEMA
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA))))
(PROGN (SYSTEM::C-DEFUN 'S (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(NUMBER))))
(PROGN
 (SYSTEM::C-DEFUN 'UNLINK-ONE-VALUE
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA SLOT VALUE))))
(PROGN
 (SYSTEM::C-DEFUN 'UNLINK-ALL-VALUES
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA SLOT))))
(PROGN
 (SYSTEM::C-DEFUN 'LINK-IN-RELATION
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA SLOT VALUES))))
(PROGN
 (SYSTEM::C-DEFUN 'CHECK-RELATION-SLOT
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA SLOT VALUES))))
(PROGN
 (SYSTEM::C-DEFUN 'INHERITED-P
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA SLOT))))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL TYPES-TABLE)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *TYPES-ARRAY-INC*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *NEXT-TYPE-CODE*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL TYPES-ARRAY)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL TYPE-FNS-ARRAY)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL TYPE-DOCS-ARRAY)))
(PROGN
 (SYSTEM::C-DEFUN 'FIND-LISP-PREDICATE
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SIMPLE-TYPE))))
(PROGN
 (SYSTEM::C-DEFUN 'MAKE-LAMBDA-BODY
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(COMPLEX-TYPE))))
(PROGN
 (SYSTEM::C-DEFUN 'TYPE-TO-FN (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(TYPE))))
(PROGN
 (SYSTEM::C-DEFUN 'COPY-EXTEND-ARRAY
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(OLDARRAY OLDLEN NEWLEN))))
(PROGN
 (SYSTEM::C-DEFUN 'GET-NEXT-TYPE-CODE (SYSTEM::LAMBDA-LIST-TO-SIGNATURE 'NIL)))
(PROGN
 (SYSTEM::C-DEFUN 'ADD-NEW-TYPE
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE
   '(TYPENAME TYPE-BODY TYPE-FN &OPTIONAL TYPE-DOC))))
(PROGN
 (SYSTEM::C-DEFUN 'KR-TYPE-ERROR (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(TYPE))))
(PROGN
 (SYSTEM::C-DEFUN 'ENCODE-TYPE (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(TYPE))))
(PROGN
 (SYSTEM::C-DEFUN 'SET-TYPE-DOCUMENTATION
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(TYPE STRING))))
(PROGN
 (SYSTEM::C-DEFUN 'GET-TYPE-DOCUMENTATION
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(TYPE))))
(PROGN
 (SYSTEM::C-DEFUN 'ELIMINATE-CONSTANT-FORMULA
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE 'NIL)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *WARNING-LEVEL*)))
(PROGN
 (SYSTEM::C-DEFUN 'SLOT-IS-CONSTANT
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA SLOT))))
(PROGN
 (SYSTEM::C-DEFUN 'RE-EVALUATE-FORMULA
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE
   '(*SCHEMA-SELF* *SCHEMA-SLOT* *CURRENT-FORMULA* ENTRY))))
(PROGN
 (SYSTEM::C-DEFUN 'G-VALUE-FORMULA-VALUE
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(*SCHEMA-SELF* SLOT FORMULA ENTRY))))
(PROGN
 (SYSTEM::C-DEFUN 'COPY-TO-ALL-INSTANCES
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE
   '(SCHEMA A-SLOT VALUE &OPTIONAL (IS-FIRST T)))))
(PROGN
 (SYSTEM::C-DEFUN 'UPDATE-INHERITED-INTERNAL
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(CHILD A-SLOT ENTRY))))
(PROGN
 (SYSTEM::C-DEFUN 'UPDATE-INHERITED-VALUES
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA A-SLOT VALUE IS-FIRST))))
(PROGN
 (SYSTEM::C-DEFUN 'MARK-AS-CHANGED
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA SLOT))))
(PROGN
 (SYSTEM::C-DEFUN 'MARK-AS-INVALID
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA SLOT))))
(PROGN
 (SYSTEM::C-DEFUN 'RECOMPUTE-FORMULA
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA SLOT))))
(PROGN
 (SYSTEM::C-DEFUN 'PROPAGATE-CHANGE
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA SLOT))))
(PROGN
 (SYSTEM::C-DEFUN 'VISIT-INHERITED-VALUES
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA A-SLOT FUNCTION))))
(PROGN
 (SYSTEM::C-DEFUN 'RUN-DEMONS-AND-SET-VALUE
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE
   '(SCHEMA SLOT NEW-VALUE OLD-VALUE IS-RELATION IS-FORMULA WAS-FORMULA
     THE-BITS ENTRY))))
(PROGN
 (SYSTEM::C-DEFUN 'CONSTANT-SLOT-ERROR
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA SLOT))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'CHECK-NOT-CONSTANT)
 (SYSTEM::%PUTD 'CHECK-NOT-CONSTANT
  (SYSTEM::MAKE-MACRO
   (FUNCTION CHECK-NOT-CONSTANT
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 4.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET*
       ((SCHEMA (CADR . #1=(SYSTEM::<MACRO-FORM>))) (SLOT (CADDR . #1#))
        (ENTRY (CADDDR . #1#)))
       (BLOCK CHECK-NOT-CONSTANT
        (LET ((ENTRY-SYM (GENSYM)))
         `(LET ((,ENTRY-SYM ,ENTRY))
           (AND (NOT *CONSTANTS-DISABLED*) ,ENTRY-SYM
            (IS-CONSTANT (SL-BITS ,ENTRY-SYM))
            (CONSTANT-SLOT-ERROR ,SCHEMA ,SLOT))))))))))))
(PROGN
 (SYSTEM::C-DEFUN 'SLOT-CONSTANT-P
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA SLOT))))
(PROGN
 (SYSTEM::C-DEFUN 'SET-FORMULA-ERROR
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA SLOT FORMULA))))
(PROGN
 (SYSTEM::C-DEFUN 'S-VALUE-FN
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA SLOT VALUE))))
(PROGN
 (SYSTEM::C-DEFUN 'INTERNAL-S-VALUE
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA SLOT VALUE))))
(PROGN
 (SYSTEM::C-DEFUN 'SET-IS-A
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA VALUE))))
(PROGN
 (SYSTEM::C-DEFUN 'ELIMINATE-FORMULA-DEPENDENCIES
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(FORMULA EXCEPT-SCHEMA))))
(PROGN
 (SYSTEM::C-DEFUN 'DELETE-FORMULA
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(FORMULA REMOVE-FROM-PARENT))))
(PROGN
 (SYSTEM::C-DEFUN 'DESTROY-SLOT-HELPER
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(X SLOT))))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *IN-DESTROY-SLOT*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *INVALID-DESTROY-SLOT*)))
(PROGN
 (SYSTEM::C-DEFUN 'DESTROY-SLOT
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA SLOT))))
(PROGN
 (SYSTEM::C-DEFUN 'DELETE-SCHEMA
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA RECURSIVE-P))))
(PROGN
 (SYSTEM::C-DEFUN 'FIND-DIRECT-DEPENDENCY
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(EXPRESSION TARGET))))
(PROGN
 (SYSTEM::C-DEFUN 'DESTROY-SCHEMA
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE
   '(SCHEMA &OPTIONAL (SEND-DESTROY-MESSAGE NIL) RECURSIVE-P))))
(PROGN
 (SYSTEM::C-DEFUN 'RECURSIVE-DESTROY-SCHEMA
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA LEVEL))))
(PROGN
 (SYSTEM::C-DEFUN 'RESET-INHERITED-VALUES
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA))))
(PROGN
 (SYSTEM::C-DEFUN 'PRINT-ONE-VALUE
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(VALUE TYPE))))
(PROGN
 (SYSTEM::C-DEFUN 'PRINT-ONE-SLOT-HELPER
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(VALUE COLUMN INDENT SPACE-P TYPE))))
(PROGN
 (SYSTEM::C-DEFUN 'PRINT-META (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(FORMULA))))
(PROGN
 (SYSTEM::C-DEFUN 'INDENT-BY (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(INDENT))))
(PROGN
 (SYSTEM::C-DEFUN 'FORCE-DOWN-HELPER
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA ORIGINAL-SLOTS SLOTS))))
(PROGN
 (SYSTEM::C-DEFUN 'FORCE-DOWN-ALL-INHERITANCE
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA))))
(PROGN
 (SYSTEM::C-DEFUN 'CALL-FUNC-ON-ONE-SLOT
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE
   '(SCHEMA SLOT INHERITED-OK FUNCTION TYPES-P INDENT LIMITS))))
(PROGN
 (SYSTEM::C-DEFUN 'CALL-ON-PS-SLOTS
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE
   '(SCHEMA FUNCTION &KEY (CONTROL T) INHERIT (INDENT NIL) TYPES-P ALL-P))))
(PROGN
 (SYSTEM::C-DEFUN 'CALL-ON-ONE-SLOT
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA SLOT FUNCTION))))
(PROGN
 (SYSTEM::C-DEFUN 'SLOT-PRINTER
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE
   '(SCHEMA NAME FORMULA ARE-INHERITED VALID VALUES TYPE-P BITS INDENT
     LIMIT-VALUES))))
(PROGN
 (SYSTEM::C-DEFUN 'PS
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE
   '(SCHEMA &KEY (CONTROL T) INHERIT (INDENT 0.) TYPES-P ALL-P
     (STREAM *STANDARD-OUTPUT*)))))
(PROGN (SYSTEM::C-DEFUN 'THE-BITS (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(BITS))))
(PROGN
 (SYSTEM::C-DEFUN 'FULL-NORMAL-SLOT
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA SLOT))))
(PROGN
 (SYSTEM::C-DEFUN 'FULL (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(&REST SCHEMATA))))
(PROGN
 (SYSTEM::C-DEFUN 'FIND-PARENT
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA SLOT))))
(PROGN
 (SYSTEM::C-DEFUN 'OLD-KR-SEND-FUNCTION
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA SLOT &REST ARGS))))
(PROGN
 (SYSTEM::C-DEFUN 'KR-CALL-INITIALIZE-METHOD
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA SLOT))))
(PROGN
 (SYSTEM::C-DEFUN 'KR-INIT-METHOD
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA THE-FUNCTION))))
(PROGN
 (SYSTEM::C-DEFUN 'CALL-PROTOTYPE-FUNCTION
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(&REST ARGS))))
(PROGN
 (SYSTEM::C-DEFUN 'ALLOCATE-SCHEMA-SLOTS
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA))))
(PROGN
 (SYSTEM::C-DEFUN 'MAKE-A-NEW-SCHEMA
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(NAME))))
(PROGN
 (SYSTEM::C-DEFUN 'PROCESS-ONE-CONSTANT
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA SLOT))))
(PROGN
 (SYSTEM::C-DEFUN 'DECLARE-CONSTANT
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA SLOT))))
(PROGN
 (SYSTEM::C-DEFUN 'MERGE-PROTOTYPE-VALUES
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(OBJECT SLOT PARENTS VALUES))))
(PROGN
 (SYSTEM::C-DEFUN 'PROCESS-CONSTANT-SLOTS
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(THE-SCHEMA PARENTS CONSTANTS DO-TYPES))))
(PROGN
 (SYSTEM::C-DEFUN 'ADD-UPDATE-SLOT
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA SLOT &OPTIONAL TURN-OFF))))
(PROGN
 (DEFUN CANNOT-BE-QUOTED (VALUE)
  (OR (LISTP VALUE) (AND (SYMBOLP VALUE) (NOT (KEYWORDP VALUE))))))
(PROGN
 (SYSTEM::C-DEFUN 'CANNOT-BE-QUOTED
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(VALUE))))
(PROGN
 (DEFUN PROCESS-SLOT-DESCRIPTOR (X)
  (IF (LISTP X) (IF (FIND-IF #'CANNOT-BE-QUOTED (CDR X)) (CONS 'LIST X) `',X)
   X)))
(PROGN
 (SYSTEM::C-DEFUN 'PROCESS-SLOT-DESCRIPTOR
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(X))))
(PROGN
 (SYSTEM::C-DEFUN 'MERGE-DECLARATIONS
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(DECLARATION KEYWORD OUTPUT))))
(PROGN
 (DEFUN PROCESS-SLOTS (SLOTS)
  (LET ((OUTPUT NIL) (IS-A NIL))
   (DO ((HEAD SLOTS (CDR HEAD)) (TYPES NIL) (HAD-TYPES NIL) SLOT)
    ((NULL HEAD)
     (IF TYPES (PUSH `',TYPES OUTPUT)
      (IF HAD-TYPES (PUSH :NONE OUTPUT) (PUSH NIL OUTPUT))))
    (SETF SLOT (CAR HEAD))
    (COND
     ((NULL SLOT)
      (CERROR "Ignore the specification"
       "Error in CREATE-SCHEMA: NIL is not a valid slot ~
		 specifier; ignored.~%~
	         Object ~S, slot specifiers are ~S~%"
       *CREATE-SCHEMA-SCHEMA* HEAD))
     ((KEYWORDP SLOT)
      (CASE SLOT (:NAME-PREFIX (POP HEAD))
       (:DECLARE (POP HEAD)
        (DOLIST
         (DECLARATION (IF (LISTP (CAAR HEAD)) (CAR HEAD) (LIST (CAR HEAD))))
         (CASE (CAR DECLARATION)
          (:TYPE (SETF HAD-TYPES T)
           (DOLIST (SPEC (CDR DECLARATION)) (PUSH SPEC TYPES)))
          ((:CONSTANT :IGNORED-SLOTS :LOCAL-ONLY-SLOTS :MAYBE-CONSTANT
            :PARAMETERS :OUTPUT :SORTED-SLOTS :UPDATE-SLOTS)
           (SETF OUTPUT
            (MERGE-DECLARATIONS DECLARATION (CAR DECLARATION) OUTPUT)))
          (T
           (CERROR "Ignore the declaration"
            "Unknown declaration (~S) in object creation:~%~S~%"
            (CAR DECLARATION) DECLARATION)))))))
     ((LISTP SLOT)
      (IF (EQ (CAR SLOT) :IS-A)
       (SETF IS-A (IF (CDDR SLOT) `(LIST ,@(CDR SLOT)) (CADR SLOT)))
       (IF (LISTP (CDR SLOT))
        (IF (FIND-IF #'CANNOT-BE-QUOTED (CDR SLOT))
         (IF (CDDR SLOT) (PUSH `(LIST ,(CAR SLOT) . ,(CDR SLOT)) OUTPUT)
          (PUSH `(CONS ,(CAR SLOT) . ,(CDR SLOT)) OUTPUT))
         (IF (CDDR SLOT) (PUSH `'(,(CAR SLOT) . ,(CDR SLOT)) OUTPUT)
          (PUSH `'(,(CAR SLOT) . ,(CADR SLOT)) OUTPUT)))
        (PUSH (CDR SLOT) OUTPUT))))
     (T
      (CERROR "Ignore the specification"
       "A slot specification should be of the form ~
		 (:name [values]*) ;~%found ~S instead.  Object ~S, slots ~S."
       SLOT *CREATE-SCHEMA-SCHEMA* SLOTS))))
   (CONS IS-A OUTPUT))))
(PROGN
 (SYSTEM::C-DEFUN 'PROCESS-SLOTS (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SLOTS))))
(PROGN
 (SYSTEM::C-DEFUN 'HANDLE-IS-A
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE
   '(SCHEMA IS-A GENERATE-INSTANCE OVERRIDE))))
(PROGN
 (SYSTEM::C-DEFUN 'DO-SCHEMA-BODY
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE
   '(SCHEMA IS-A GENERATE-INSTANCE DO-CONSTANTS OVERRIDE TYPES &REST
     SLOT-SPECIFIERS))))
(PROGN
 (DEFUN CREATION-MESSAGE (NAME)
  (WHEN *PRINT-NEW-INSTANCES*
   (IF (AND (LISTP NAME) (EQ (CAR NAME) 'QUOTE))
    (FORMAT *STANDARD-OUTPUT* "~&Object ~S~%" (EVAL NAME))))))
(PROGN
 (SYSTEM::C-DEFUN 'CREATION-MESSAGE
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(NAME))))
(PROGN
 (SYSTEM::C-DEFUN 'END-CREATE-INSTANCE
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'GET-SLOT-TYPE-CODE)
 (SYSTEM::%PUTD 'GET-SLOT-TYPE-CODE
  (SYSTEM::MAKE-MACRO
   (FUNCTION GET-SLOT-TYPE-CODE
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 3.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((OBJECT (CADR . #1=(SYSTEM::<MACRO-FORM>))) (SLOT (CADDR . #1#)))
       (BLOCK GET-SLOT-TYPE-CODE
        (LET ((ENTRY (GENSYM)))
         `(LET ((,ENTRY (SLOT-ACCESSOR ,OBJECT ,SLOT)))
           (AND ,ENTRY (GET-ENTRY-TYPE-CODE ,ENTRY))))))))))))
(PROGN
 (SYSTEM::C-DEFUN 'G-TYPE (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(OBJECT SLOT))))
(PROGN
 (SYSTEM::C-DEFUN 'CHECK-SLOT-TYPE
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE
   '(OBJECT SLOT VALUE &OPTIONAL (ERROR-P T) ENTRY))))
(PROGN
 (SYSTEM::C-DEFUN 'SET-SLOT-TYPE
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(OBJECT SLOT TYPE))))
(PROGN
 (SYSTEM::C-DEFUN 'S-TYPE
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE
   '(OBJECT SLOT TYPE &OPTIONAL (CHECK-P T)))))
(PROGN
 (SYSTEM::C-DEFUN 'GET-DECLARATIONS
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA DECLARATION))))
(PROGN
 (SYSTEM::C-DEFUN 'GET-SLOT-DECLARATIONS
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA SLOT))))
(PROGN (SYSTEM::C-DEFUN 'T-P (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(VALUE))))
(PROGN
 (SYSTEM::C-DEFUN 'NO-TYPE-ERROR-P
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(VALUE))))
(PROGN
 (SYSTEM::C-DEFUN 'GET-TYPE-DEFINITION
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(TYPE-DESCRIPTOR))))
(PROGN
 (SYSTEM::C-DEFUN 'FIND-META (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(FORMULA))))
(PROGN
 (SYSTEM::C-DEFUN 'G-FORMULA-VALUE
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(FORMULA SLOT))))
(PROGN
 (SYSTEM::C-DEFUN 'S-FORMULA-VALUE
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(FORMULA SLOT VALUE))))
(PROGN
 (DEFUN K-READER (STREAM SUBCHAR ARG) (DECLARE (IGNORE SUBCHAR ARG))
  (LET ((NEXT-CHAR (READ-CHAR STREAM)))
   (IF (CHAR= NEXT-CHAR #\<)
    (LET ((STRING ""))
     (DO ((C (READ-CHAR STREAM) (READ-CHAR STREAM))) ((CHAR= C #\>))
      (SETF STRING (FORMAT NIL "~A~C" STRING C)))
     (SETF STRING (READ-FROM-STRING STRING))
     (IF
      (AND (BOUNDP STRING)
       (OR (SCHEMA-P (SYMBOL-VALUE STRING)) (FORMULA-P (SYMBOL-VALUE STRING))))
      (SYMBOL-VALUE STRING)
      (CERROR "Ignore the object" "Non-existing KR object: ~S" STRING)))
    (CERROR "Ignore the token"
     "  Illegal character ~S after reader macro #k (expecting \"<\")"
     NEXT-CHAR)))))
(PROGN
 (SYSTEM::C-DEFUN 'K-READER
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(STREAM SUBCHAR ARG))))
(PROGN (SET-DISPATCH-MACRO-CHARACTER #\# #\k #'K-READER))
(PROGN
 (SYSTEM::C-DEFUN 'O-FORMULA-READER
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(STREAM SUBCHAR ARG))))