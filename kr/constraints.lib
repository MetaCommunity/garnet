#0Y UTF-8

(PROGN (SETQ *PACKAGE* (SYSTEM::%FIND-PACKAGE "KR")))
(PROGN (PROCLAIM '(SPECIAL COMMON-LISP-USER::*DEFAULT-GARNET-PROCLAIM*))
 (IF (BOUNDP 'COMMON-LISP-USER::*DEFAULT-GARNET-PROCLAIM*)
  (IF COMMON-LISP-USER::*DEFAULT-GARNET-PROCLAIM*
   (PROCLAIM COMMON-LISP-USER::*DEFAULT-GARNET-PROCLAIM*))
  (PROCLAIM '(OPTIMIZE (SAFETY 0.) (SPACE 0.) (SPEED 3.)))))
(PROGN
 (SYSTEM::C-PROCLAIM '(SPECIAL COMMON-LISP-USER::*DEFAULT-GARNET-PROCLAIM*)))
(PROGN (SYSTEM::C-PROCLAIM '(OPTIMIZE (SAFETY 0.) (SPACE 0.) (SPEED 3.))))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *SETUP-DEPENDENCIES*)))
(PROGN
 (SYSTEM::C-DEFUN 'FIXED-PATH-ACCESSOR
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA SLOTS PATH-NUMBER))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'KR-PATH)
 (SYSTEM::%PUTD 'KR-PATH
  (SYSTEM::MAKE-MACRO
   (FUNCTION KR-PATH
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (< (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET*
       ((PATH-NUMBER (CADR . #1=(SYSTEM::<MACRO-FORM>))) (SLOTS (CDDR . #1#)))
       (BLOCK KR-PATH
        `(FIXED-PATH-ACCESSOR *SCHEMA-SELF* ',SLOTS ,PATH-NUMBER)))))))))
(PROGN
 (SYSTEM::C-DEFUN 'MAKE-NEW-FORMULA (SYSTEM::LAMBDA-LIST-TO-SIGNATURE 'NIL)))
(PROGN
 (SYSTEM::C-DEFUN 'FORMULA-FN
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE
   '(FORM &OPTIONAL (INITIAL-VALUE NIL) META))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'FORMULA)
 (SYSTEM::%PUTD 'FORMULA
  (SYSTEM::MAKE-MACRO
   (FUNCTION FORMULA
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (< (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET*
       ((FORM (CADR . #1=(SYSTEM::<MACRO-FORM>)))
        (INITIAL-VALUE (IF (CDDR . #1#) (CADDR . #1#) NIL))
        (SLOTS (CDDDR . #1#)))
       (BLOCK FORMULA
        (IF SLOTS
         `(FORMULA-FN ,FORM ,INITIAL-VALUE (CREATE-SCHEMA NIL ,@SLOTS))
         `(FORMULA-FN ,FORM ,INITIAL-VALUE NIL))))))))))
(PROGN
 (SYSTEM::C-DEFUN 'PREPARE-FORMULA
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(INITIAL-VALUE))))
(PROGN
 (SYSTEM::C-DEFUN 'O-FORMULA-FN
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(FUNCTION LAMBDA INITIAL-VALUE META))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'O-FORMULA)
 (SYSTEM::%PUTD 'O-FORMULA
  (SYSTEM::MAKE-MACRO
   (FUNCTION O-FORMULA
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (< (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET*
       ((FORM (CADR . #1=(SYSTEM::<MACRO-FORM>)))
        (INITIAL-VALUE (IF (CDDR . #1#) (CADDR . #1#) NIL))
        (SLOTS (CDDDR . #1#)))
       (BLOCK O-FORMULA
        (LET ((META NIL)) (IF SLOTS (SETF META `(CREATE-SCHEMA NIL ,@SLOTS)))
         (COND
          ((LISTP FORM)
           `(O-FORMULA-FN
             #'(LAMBDA NIL
                (DECLARE (OPTIMIZE (SAFETY 1.) (SPACE 0.) (SPEED 3.))) ,FORM)
             ,(IF *STORE-LAMBDAS* `#2=',FORM NIL) ,INITIAL-VALUE ,META))
          (META
           `(LET ((META ,META))
             (IF (FORMULA-P ',FORM) (FORMULA ',FORM ,INITIAL-VALUE META)
              (LET ((FORMULA (PREPARE-FORMULA ,INITIAL-VALUE)))
               (SETF (A-FORMULA-FUNCTION FORMULA) #'(LAMBDA NIL ,FORM))
               (SETF (A-FORMULA-LAMBDA FORMULA) ',FORM)
               (SETF (A-FORMULA-META FORMULA) META) FORMULA))))
          (T
           `(IF (FORMULA-P ',FORM) (FORMULA-FN ',FORM ,INITIAL-VALUE NIL)
             (PROGN
              (LET ((FORMULA (PREPARE-FORMULA ,INITIAL-VALUE)))
               (SETF (A-FORMULA-FUNCTION FORMULA) #'(LAMBDA NIL ,FORM))
               (SETF (A-FORMULA-LAMBDA FORMULA) ',FORM) FORMULA))))))))))))))
(PROGN
 (SYSTEM::C-DEFUN 'MAKE-INTO-O-FORMULA
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(FORMULA &OPTIONAL COMPILE-P))))
(PROGN
 (SYSTEM::C-DEFUN 'CHANGE-FORMULA
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA SLOT FORM))))
(PROGN
 (SYSTEM::C-DEFUN 'MOVE-FORMULA
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE
   '(FROM-SCHEMA FROM-SLOT TO-SCHEMA TO-SLOT))))
(PROGN
 (SYSTEM::C-DEFUN 'COPY-FORMULA (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(FORMULA))))
(PROGN
 (SYSTEM::C-DEFUN 'BROKEN-LINK-THROW
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA SLOT))))
(PROGN
 (SYSTEM::C-DEFUN 'SLOT-IS-NOT-CONSTANT
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA SLOT))))
(PROGN
 (SYSTEM::C-DEFUN 'GV-VALUE-FN
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA SLOT))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'GV-FN-BODY)
 (SYSTEM::%PUTD 'GV-FN-BODY
  (SYSTEM::MAKE-MACRO
   (FUNCTION GV-FN-BODY
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((ACCESSOR-FUNCTION (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK GV-FN-BODY
        (LET ((ENTRY (GENSYM)) (VALUE (GENSYM)) (THE-VALUE (GENSYM)))
         `(LOCALLY (DECLARE ,*SPECIAL-KR-OPTIMIZATION*)
           (IF (EQ SCHEMA :SELF) (SETF SCHEMA *SCHEMA-SELF*))
           (IF (LISTP SCHEMA) (SETF SCHEMA (CAR SCHEMA)))
           (IF (SCHEMA-P SCHEMA)
            (IF (IF SCHEMA (NOT-DELETED-P SCHEMA))
             (LET*
              ((,VALUE (,ACCESSOR-FUNCTION SCHEMA SLOT))
               (,ENTRY (SLOT-ACCESSOR SCHEMA SLOT)) (SETUP T))
              (WHEN *CHECK-CONSTANTS*
               (IF (AND ,ENTRY (IS-CONSTANT (SL-BITS ,ENTRY))) (SETF SETUP NIL)
                (SETF *IS-CONSTANT* NIL))
               (SETF *ACCESSED-SLOTS* T))
              (IF (AND SETUP *CURRENT-FORMULA*)
               (LET ((,THE-VALUE (IF ,ENTRY (SL-VALUE ,ENTRY))))
                (SETUP-DEPENDENCY SCHEMA SLOT
                 (IF (EQ ,THE-VALUE *NO-VALUE*) *NO-VALUE* ,VALUE) ,ENTRY)))
              ,VALUE)
             (BROKEN-LINK-THROW SCHEMA SLOT))
            (IF *CURRENT-FORMULA* (PROGN (BROKEN-LINK-THROW SCHEMA SLOT))
             (CERROR #1="Return NIL"
              #2="GV or GVL on the non-schema ~S, slot ~S (not
inside a formula)"
              SCHEMA SLOT)))))))))))))
(PROGN
 (SYSTEM::C-DEFUN 'SETUP-DEPENDENCY
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA SLOT VALUE ENTRY))))
(PROGN
 (SYSTEM::C-DEFUN 'GV-CHAIN
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA SLOT-DESCRIPTORS))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'GV)
 (SYSTEM::%PUTD 'GV
  (SYSTEM::MAKE-MACRO
   (FUNCTION GV
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (< (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((SCHEMA (CADR . #1=(SYSTEM::<MACRO-FORM>))) (SLOTS (CDDR . #1#)))
       (BLOCK GV
        (COND
         (SLOTS
          (IF (AND (KEYWORDP SCHEMA) (NOT (EQ SCHEMA :SELF)))
           (CERROR "Return NIL"
            "The first argument to GV must be an object.
Found in the expression   (gv ~S~{ ~S~}) ,~:[
  which appeared at the top level (i.e., not inside any formula)~;
  in the formula on slot ~S of object ~S~]."
            SCHEMA SLOTS *CURRENT-FORMULA* *SCHEMA-SLOT* *SCHEMA-SELF*)
           (IF (NULL (CDR SLOTS))
            `(GV-VALUE-FN
              ,(IF (EQ SCHEMA :SELF) (SETF SCHEMA '*SCHEMA-SELF*) SCHEMA)
              ,(CAR SLOTS))
            `(GV-CHAIN ,(IF (EQ SCHEMA :SELF) '*SCHEMA-SELF* SCHEMA)
              ,@(IF (FIND-IF-NOT #'KEYWORDP SLOTS) `#2=((LIST ,@SLOTS))
                 `#3=(',SLOTS))))))
         ((EQ SCHEMA :SELF) `(PROGN *SCHEMA-SELF*))
         (T `(PROGN ,SCHEMA)))))))))))
(PROGN
 (SYSTEM::C-DEFUN 'GV-LOCAL-FN
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA SLOT))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'GV-LOCAL)
 (SYSTEM::%PUTD 'GV-LOCAL
  (SYSTEM::MAKE-MACRO
   (FUNCTION GV-LOCAL
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (< (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((SCHEMA (CADR . #1=(SYSTEM::<MACRO-FORM>))) (SLOTS (CDDR . #1#)))
       (BLOCK GV-LOCAL
        (COND (SLOTS `(EXPAND-ACCESSOR GV-LOCAL-FN ,SCHEMA ,@SLOTS))
         ((EQ SCHEMA :SELF) `(PROGN *SCHEMA-SELF*))
         (T `(PROGN ,SCHEMA)))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'GVL)
 (SYSTEM::%PUTD 'GVL
  (SYSTEM::MAKE-MACRO
   (FUNCTION GVL
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (< (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((NAME (CADR . #1=(SYSTEM::<MACRO-FORM>))) (NAMES (CDDR . #1#)))
       (BLOCK GVL `(GV *SCHEMA-SELF* ,NAME ,@NAMES)))))))))
(PROGN
 (SYSTEM::C-DEFUN 'INVALIDATE-DEMON
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA SLOT SAVE))))
(PROGN
 (SYSTEM::C-DEFUN 'DESTROY-CONSTRAINT
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA SLOT))))
(PROGN
 (SYSTEM::C-DEFUN 'INITIALIZE-KR (SYSTEM::LAMBDA-LIST-TO-SIGNATURE 'NIL)))
(PROGN
 (SYSTEM::C-DEFUN 'IS-A-P (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(SCHEMA TYPE))))
(PROGN
 (SYSTEM::C-DEFUN 'I-DEPEND-ON
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(OBJECT SLOT))))
(PROGN
 (SYSTEM::C-DEFUN 'SELF-OLD-VALUE (SYSTEM::LAMBDA-LIST-TO-SIGNATURE 'NIL)))