#0Y UTF-8

(PROGN (SETQ *PACKAGE* (SYSTEM::%FIND-PACKAGE "LAPIDARY")))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'MAP-FAMILY)
 (SYSTEM::%PUTD 'MAP-FAMILY
  (SYSTEM::MAKE-MACRO
   (FUNCTION MAP-FAMILY
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((FAMILY (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK MAP-FAMILY
        `(CASE ,FAMILY (:TIMES :|times|) (:HELVETICA :|helvetica|)
          (:FIXED :|fixed|) (:VARIABLE :|variable|))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'MAP-FACE)
 (SYSTEM::%PUTD 'MAP-FACE
  (SYSTEM::MAKE-MACRO
   (FUNCTION MAP-FACE
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((FACE (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK MAP-FACE
        `(CASE ,FACE (:ROMAN :|roman|) (:ITALIC :|italic|) (:BOLD :|bold|)
          (:BOLD-ITALIC :|bold-italic|))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'MAP-SIZE)
 (SYSTEM::%PUTD 'MAP-SIZE
  (SYSTEM::MAKE-MACRO
   (FUNCTION MAP-SIZE
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((SIZE (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK MAP-SIZE
        `(CASE ,SIZE (:SMALL :|small|) (:MEDIUM :|medium|)
          (:LARGE :|large|))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'KEYWORD-FROM-STRING)
 (SYSTEM::%PUTD 'KEYWORD-FROM-STRING
  (SYSTEM::MAKE-MACRO
   (FUNCTION KEYWORD-FROM-STRING
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((STRING (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK KEYWORD-FROM-STRING
        `(READ-FROM-STRING (CONCATENATE 'STRING #1=":" ,STRING))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'IS-A-LINE-P)
 (SYSTEM::%PUTD 'IS-A-LINE-P
  (SYSTEM::MAKE-MACRO
   (FUNCTION IS-A-LINE-P
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((OBJ (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK IS-A-LINE-P
        `(OR (IS-A-P ,OBJ OPAL:LINE) (IS-A-P ,OBJ GARNET-GADGETS:ARROW-LINE)
          (IS-A-P ,OBJ GARNET-GADGETS:DOUBLE-ARROW-LINE))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'LINE-P)
 (SYSTEM::%PUTD 'LINE-P
  (SYSTEM::MAKE-MACRO
   (FUNCTION LINE-P
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((OBJ (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK LINE-P
        `(OR (EQ ,OBJ OPAL:LINE) (EQ ,OBJ GARNET-GADGETS:ARROW-LINE)
          (EQ ,OBJ GARNET-GADGETS:DOUBLE-ARROW-LINE))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'IS-P-SELECTED)
 (SYSTEM::%PUTD 'IS-P-SELECTED
  (SYSTEM::MAKE-MACRO
   (FUNCTION IS-P-SELECTED
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((OBJ (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK IS-P-SELECTED `(GET-LOCAL-VALUE ,OBJ :P-FEEDBACK-OBJ)))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'IS-S-SELECTED)
 (SYSTEM::%PUTD 'IS-S-SELECTED
  (SYSTEM::MAKE-MACRO
   (FUNCTION IS-S-SELECTED
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((OBJ (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK IS-S-SELECTED `(GET-LOCAL-VALUE ,OBJ :S-FEEDBACK-OBJ)))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'LEFT-ENDPOINT)
 (SYSTEM::%PUTD 'LEFT-ENDPOINT
  (SYSTEM::MAKE-MACRO
   (FUNCTION LEFT-ENDPOINT
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((LINE (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK LEFT-ENDPOINT
        `(IF
          (OR (< (G-VALUE ,LINE :X1) (G-VALUE ,LINE :X2))
           (AND (= (G-VALUE ,LINE :X1) (G-VALUE ,LINE :X2))
            (<= (G-VALUE ,LINE :Y1) (G-VALUE ,LINE :Y2))))
          :X1 :X2)))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'GV-CENTER-MY-LEFT)
 (SYSTEM::%PUTD 'GV-CENTER-MY-LEFT
  (SYSTEM::MAKE-MACRO
   (FUNCTION GV-CENTER-MY-LEFT
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((GOB (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK GV-CENTER-MY-LEFT `(OPAL:GV-CENTER-X-IS-CENTER-OF ,GOB)))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'GV-CENTER-MY-TOP)
 (SYSTEM::%PUTD 'GV-CENTER-MY-TOP
  (SYSTEM::MAKE-MACRO
   (FUNCTION GV-CENTER-MY-TOP
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((GOB (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK GV-CENTER-MY-TOP `(OPAL:GV-CENTER-Y-IS-CENTER-OF ,GOB)))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'APPLY-BOX-CONSTRAINT-P)
 (SYSTEM::%PUTD 'APPLY-BOX-CONSTRAINT-P
  (SYSTEM::MAKE-MACRO
   (FUNCTION APPLY-BOX-CONSTRAINT-P
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (> (LENGTH SYSTEM::<MACRO-FORM>) 1.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* NIL
       (BLOCK APPLY-BOX-CONSTRAINT-P
        `(EQ (G-VALUE *SELECTION-INFO* :SELECTION-TYPE) 'ONE-ONE)))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'MARKED-P)
 (SYSTEM::%PUTD 'MARKED-P
  (SYSTEM::MAKE-MACRO
   (FUNCTION MARKED-P
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((OBJ (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK MARKED-P `(G-VALUE ,OBJ :MARK)))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'SET-MARKED-BIT)
 (SYSTEM::%PUTD 'SET-MARKED-BIT
  (SYSTEM::MAKE-MACRO
   (FUNCTION SET-MARKED-BIT
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 3.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((OBJ (CADR . #1=(SYSTEM::<MACRO-FORM>))) (VALUE (CADDR . #1#)))
       (BLOCK SET-MARKED-BIT `(S-VALUE ,OBJ :MARK ,VALUE)))))))))