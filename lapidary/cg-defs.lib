#0Y UTF-8

(PROGN (SETQ *PACKAGE* (SYSTEM::%FIND-PACKAGE "GARNET-GADGETS")))
(PROGN
 (EXPORT
  '(BOX-CONSTRAINT-DO-GO LINE-CONSTRAINT-DO-GO SHOW-BOX-CONSTRAINT-MENU
    SHOW-LINE-CONSTRAINT-MENU C32 DESTROY-CONSTRAINT-SUPPORT-SLOTS
    CG-DESTROY-CONSTRAINT VALID-INTEGER-P)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *BOLD-FONT*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *LARGE-BOLD-ITALIC-SERIF-FONT*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *SLOT-FONT*)))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'APPLY-BOX-CONSTRAINT-P)
 (SYSTEM::%PUTD 'APPLY-BOX-CONSTRAINT-P
  (SYSTEM::MAKE-MACRO
   (FUNCTION APPLY-BOX-CONSTRAINT-P
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (> (LENGTH SYSTEM::<MACRO-FORM>) 1.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* NIL
       (BLOCK APPLY-BOX-CONSTRAINT-P
        `(AND (G-VALUE *CONSTRAINT-GADGET* :OBJ-TO-CONSTRAIN)
          (G-VALUE *CONSTRAINT-GADGET* :OBJ-TO-REFERENCE))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'IS-A-LINE-P)
 (SYSTEM::%PUTD 'IS-A-LINE-P
  (SYSTEM::MAKE-MACRO
   (FUNCTION IS-A-LINE-P
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((OBJ (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK IS-A-LINE-P
        `(OR (IS-A-P ,OBJ OPAL:LINE) (IS-A-P ,OBJ ARROW-LINE)
          (IS-A-P ,OBJ DOUBLE-ARROW-LINE))))))))))
(PROGN
 (SYSTEM::C-DEFUN 'CONSTRAINT-GADGET-ERROR
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(MSG &OPTIONAL (WAIT-P T)))))
(PROGN
 (SYSTEM::C-DEFUN 'CONSTRAINT-GADGET-QUERY
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(MSG LABELS &OPTIONAL (WAIT-P T)))))
(PROGN (SYSTEM::C-PROCLAIM-CONSTANT '45DEG '(+ 1. (/ (SQRT 2.) 2.))))
(PROGN (SYSTEM::C-PROCLAIM-CONSTANT '135DEG '(- 1. (/ (SQRT 2.) 2.))))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *LEFT-OUTSIDE-FORMULA*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *LEFT-INSIDE-FORMULA*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *LEFT-CENTER-FORMULA*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *RIGHT-INSIDE-FORMULA*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *RIGHT-OUTSIDE-FORMULA*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *LEFT-CONSTRAINT-VECTOR*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *TOP-OUTSIDE-FORMULA*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *TOP-INSIDE-FORMULA*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *TOP-CENTER-FORMULA*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *BOTTOM-INSIDE-FORMULA*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *BOTTOM-OUTSIDE-FORMULA*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *TOP-CONSTRAINT-VECTOR*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *WIDTH-FORMULA*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *WIDTH-CONSTRAINT-VECTOR*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *HEIGHT-FORMULA*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *HEIGHT-CONSTRAINT-VECTOR*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *CUSTOM-CONSTRAINT*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *LIST-OFFSETS*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *BOX-OFFSETS*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *DO-NOT-INHERIT-LIST*)))