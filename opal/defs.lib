#0Y UTF-8

(PROGN (SETQ *PACKAGE* (SYSTEM::%FIND-PACKAGE "OPAL")))
(PROGN
 (EXPORT
  '(BOTTOM RIGHT CENTER-X CENTER-Y GV-BOTTOM GV-RIGHT GV-CENTER-X GV-CENTER-Y
    GV-CENTER-X-IS-CENTER-OF GV-CENTER-Y-IS-CENTER-OF GV-RIGHT-IS-LEFT-OF
    GV-BOTTOM-IS-TOP-OF TOP-SIDE LEFT-SIDE BOTTOM-SIDE RIGHT-SIDE CENTER
    SET-CENTER BOUNDING-BOX SET-BOUNDING-BOX SET-POSITION SET-SIZE DRAW ERASE
    ROTATE INITIALIZE CALCULATE-BOUNDING-BOX POINT-IN-GOB HALFTONE
    HALFTONE-DARKER HALFTONE-LIGHTER HALFTONE-IMAGE HALFTONE-IMAGE-DARKER
    HALFTONE-IMAGE-LIGHTER READ-IMAGE WRITE-IMAGE ADD-COMPONENT
    REMOVE-COMPONENT MOVE-COMPONENT ADD-COMPONENTS REMOVE-COMPONENTS
    REMOVE-ALL-COMPONENTS DO-COMPONENTS DO-ALL-COMPONENTS POINT-TO-COMPONENT
    POINT-TO-LEAF SET-AGGREGATE-HIT-THRESHOLD UPDATE DESTROY DESTROY-ME
    RAISE-WINDOW LOWER-WINDOW ICONIFY-WINDOW DEICONIFY-WINDOW ZOOM-WINDOW
    FULLZOOM-WINDOW AGGREGATE VIEW-OBJECT GRAPHICAL-OBJECT LINE RECTANGLE
    ROUNDTANGLE MULTIPOINT POLYLINE POLYGON TEXT BITMAP ARC OVAL CIRCLE
    ARROWHEAD MULTI-TEXT CURSOR-MULTI-TEXT LINE-STYLE DEFAULT-LINE-STYLE
    FILLING-STYLE DEFAULT-FILLING-STYLE FONT CURSOR-TEXT GRAPHIC-QUALITY
    FONT-FROM-FILE CURSOR-FONT ARROW-CURSOR ARROW-CURSOR-MASK ARROW-PAIR
    HOURGLASS-CURSOR HOURGLASS-CURSOR-MASK HOURGLASS-PAIR WITH-HOURGLASS-CURSOR
    WITH-CURSOR DEFAULT-FONT DISPLAY-INFO-DISPLAY DISPLAY-INFO-SCREEN
    DISPLAY-INFO-ROOT-WINDOW DISPLAY-INFO-LINE-STYLE-GC
    DISPLAY-INFO-FILLING-STYLE-GC CONVERT-COORDINATES GET-CURSOR-INDEX
    STRING-WIDTH STRING-HEIGHT CHANGE-CURSORS RESTORE-CURSORS CHAR-WIDTH
    MOVE-CURSOR-DOWN-ONE-LINE MOVE-CURSOR-UP-ONE-LINE
    MOVE-CURSOR-TO-BEGINNING-OF-LINE MOVE-CURSOR-TO-END-OF-LINE
    GET-X-CUT-BUFFER SET-X-CUT-BUFFER LEAF-OBJECTS-IN-RECTANGLE
    COMPONENTS-IN-RECTANGLE OBJ-IN-RECTANGLE NO-FILL BLACK-FILL WHITE-FILL
    GRAY-FILL LIGHT-GRAY-FILL DARK-GRAY-FILL RED-FILL GREEN-FILL BLUE-FILL
    YELLOW-FILL CYAN-FILL ORANGE-FILL PURPLE-FILL MOTIF-GRAY-FILL
    MOTIF-BLUE-FILL MOTIF-ORANGE-FILL MOTIF-GREEN-FILL MOTIF-LIGHT-GRAY-FILL
    MOTIF-LIGHT-BLUE-FILL MOTIF-LIGHT-ORANGE-FILL MOTIF-LIGHT-GREEN-FILL
    MAKE-FILLING-STYLE DIAMOND-FILL NO-LINE THIN-LINE LINE-0 LINE-1 LINE-2
    LINE-4 LINE-8 GRAY-LINE DOTTED-LINE DASHED-LINE RED-LINE GREEN-LINE
    BLUE-LINE YELLOW-LINE CYAN-LINE ORANGE-LINE PURPLE-LINE WHITE-LINE
    *SCREEN-WIDTH* *SCREEN-HEIGHT* COLOR WHITE BLACK RED GREEN BLUE CYAN YELLOW
    ORANGE PURPLE MOTIF-GRAY MOTIF-BLUE MOTIF-ORANGE MOTIF-GREEN
    MOTIF-LIGHT-GRAY MOTIF-LIGHT-BLUE MOTIF-LIGHT-ORANGE MOTIF-LIGHT-GREEN
    CLEAN-UP CHANGE-GARNET-DISPLAY UPDATE-ALL RESET-CURSOR DISCONNECT-GARNET
    RECONNECT-GARNET LAUNCH-MAIN-EVENT-LOOP-PROCESS
    KILL-MAIN-EVENT-LOOP-PROCESS MAIN-EVENT-LOOP-PROCESS-RUNNING-P
    RUNNING-MAIN-EVENT-LOOP-PROCESS-ELSEWHERE-P VIRTUAL-AGGREGATE REMOVE-ITEM
    ADD-ITEM CHANGE-ITEM POINT-TO-RANK RECALCULATE-VIRTUAL-AGGREGATE-BBOXES
    DO-IN-CLIP-RECT GET-STANDARD-FONT)))
(PROGN
 (SYSTEM::C-PROCLAIM-CONSTANT '*TWOPI*
  '(MIN (* 2. PI) (COERCE (* 2. PI) 'SHORT-FLOAT))))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *EXPOSURE-EVENT-MASK*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *LEFT-ADJUSTMENT*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *TOP-ADJUSTMENT*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *WIDTH-ADJUSTMENT*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *HEIGHT-ADJUSTMENT*)))
(PROGN
 (SYSTEM::C-DEFUN 'GET-FULL-DISPLAY-NAME
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE 'NIL)))
(PROGN
 (SYSTEM::C-DEFUN 'GET-DISPLAY-NAME
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(DISPLAY))))
(PROGN
 (SYSTEM::C-DEFUN 'GET-SCREEN-NUMBER
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(DISPLAY))))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *DEFAULT-X-DISPLAY-NAME*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *DEFAULT-X-DISPLAY*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *DEFAULT-X-SCREEN-NUMBER*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *DEFAULT-X-SCREEN*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *DEFAULT-X-ROOT*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *DEFAULT-X-COLORMAP*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *SCREEN-WIDTH*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *SCREEN-HEIGHT*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *WHITE*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *BLACK*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *FUNCTION-ALIST*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *COPY*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *COLORMAP-INDEX-TABLE*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *IS-THIS-A-COLOR-SCREEN?*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *READ-WRITE-COLORMAP-CELLS-P*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *HP-DISPLAY-TYPE?*)))
(PROGN
 (SYSTEM::C-DEFUN 'SET-DRAW-FUNCTIONS (SYSTEM::LAMBDA-LIST-TO-SIGNATURE 'NIL)))
(PROGN
 (SYSTEM::C-DEFUN 'INITIALIZE-X11-VALUES
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(FULL-DISPLAY-NAME ROOT-WINDOW))))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *HALFTONE-TABLE-SIZE*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *HALFTONE-TABLE*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *DEFAULT-TEXT-EXTENTS*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL NO-FILL)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL NO-LINE)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *GARNET-WINDOWS*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *EVENT-DEBUG*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *EXPOSE-THROW-AWAYS*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *OPAL-WINDOW-COUNT*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL DIAMOND-FILL)))
(PROGN
 (LET NIL
  (LET
   ((#1=#:G11006
     (CONS 'HALFTONE
      (SVREF (GET 'STRUCTURE-OBJECT 'SYSTEM::DEFSTRUCT-DESCRIPTION) 0.))))
   (DEFUN MAKE-HALFTONE (&KEY (PERCENT 0.) DEVICE-IMAGE FILLING-STYLE)
    (LET ((SYSTEM::OBJECT (SYSTEM::%MAKE-STRUCTURE #1# 4.)))
     (SETF (SYSTEM::%STRUCTURE-REF 'HALFTONE SYSTEM::OBJECT 1.)
      (THE T PERCENT))
     (SETF (SYSTEM::%STRUCTURE-REF 'HALFTONE SYSTEM::OBJECT 2.)
      (THE T DEVICE-IMAGE))
     (SETF (SYSTEM::%STRUCTURE-REF 'HALFTONE SYSTEM::OBJECT 3.)
      (THE T FILLING-STYLE))
     SYSTEM::OBJECT))
   (SYSTEM::%PUT 'HALFTONE 'SYSTEM::DEFSTRUCT-DESCRIPTION
    (VECTOR #1# 'T 'MAKE-HALFTONE
     `(#(PERCENT (:PERCENT) 1. (NIL . 0.) 0. T NIL)
       #(DEVICE-IMAGE (:DEVICE-IMAGE) 2. (NIL) NIL T NIL)
       #(FILLING-STYLE (:FILLING-STYLE) 3. (NIL) NIL T NIL)))))
  (CLOS::DEFINE-STRUCTURE-CLASS 'HALFTONE) (PROCLAIM '(INLINE HALFTONE-P))
  (DEFUN HALFTONE-P (SYSTEM::OBJECT)
   (SYSTEM::%STRUCTURE-TYPE-P 'HALFTONE SYSTEM::OBJECT))
  (PROCLAIM '(INLINE COPY-HALFTONE))
  (DEFUN COPY-HALFTONE (STRUCTURE) (COPY-STRUCTURE STRUCTURE))
  (PROCLAIM '(FUNCTION HALFTONE-PERCENT (HALFTONE) T))
  (PROCLAIM '(INLINE HALFTONE-PERCENT))
  (DEFUN HALFTONE-PERCENT #2=(SYSTEM::OBJECT)
   (THE T (SYSTEM::%STRUCTURE-REF 'HALFTONE SYSTEM::OBJECT 1.)))
  (SYSTEM::%PUT 'HALFTONE-PERCENT #3='SYSTEM::DEFSTRUCT-READER 'HALFTONE)
  (PROCLAIM '(FUNCTION HALFTONE-DEVICE-IMAGE (HALFTONE) T))
  (PROCLAIM '(INLINE HALFTONE-DEVICE-IMAGE))
  (DEFUN HALFTONE-DEVICE-IMAGE #2#
   (THE T (SYSTEM::%STRUCTURE-REF 'HALFTONE SYSTEM::OBJECT 2.)))
  (SYSTEM::%PUT 'HALFTONE-DEVICE-IMAGE #3# 'HALFTONE)
  (PROCLAIM '(FUNCTION HALFTONE-FILLING-STYLE (HALFTONE) T))
  (PROCLAIM '(INLINE HALFTONE-FILLING-STYLE))
  (DEFUN HALFTONE-FILLING-STYLE #2#
   (THE T (SYSTEM::%STRUCTURE-REF 'HALFTONE SYSTEM::OBJECT 3.)))
  (SYSTEM::%PUT 'HALFTONE-FILLING-STYLE #3# 'HALFTONE)
  (DEFSETF HALFTONE-PERCENT #4=(SYSTEM::STRUCT) #5=(SYSTEM::VALUE)
   (LIST #6='SYSTEM::%STRUCTURE-STORE ''HALFTONE SYSTEM::STRUCT 1.
    SYSTEM::VALUE))
  (SYSTEM::%PUT 'HALFTONE-PERCENT #7='SYSTEM::DEFSTRUCT-WRITER 'HALFTONE)
  (DEFSETF HALFTONE-DEVICE-IMAGE #4# #5#
   (LIST #6# ''HALFTONE SYSTEM::STRUCT 2. SYSTEM::VALUE))
  (SYSTEM::%PUT 'HALFTONE-DEVICE-IMAGE #7# 'HALFTONE)
  (DEFSETF HALFTONE-FILLING-STYLE #4# #5#
   (LIST #6# ''HALFTONE SYSTEM::STRUCT 3. SYSTEM::VALUE))
  (SYSTEM::%PUT 'HALFTONE-FILLING-STYLE #7# 'HALFTONE)
  (SETF (DOCUMENTATION 'HALFTONE 'STRUCTURE) NIL)
  (DEFMETHOD PRINT-OBJECT ((SYSTEM::STRUCT HALFTONE) STREAM)
   (PROGN (HALFTONE-PRINT SYSTEM::STRUCT STREAM SYSTEM::*PRIN-LEVEL*)))
  'HALFTONE))
(PROGN
 (SYSTEM::C-DEFUN 'MAKE-HALFTONE
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE
   '(&KEY (PERCENT 0.) DEVICE-IMAGE FILLING-STYLE))))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE HALFTONE-P)))
(PROGN
 (SYSTEM::C-DEFUN 'HALFTONE-P
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(SYSTEM::OBJECT))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN HALFTONE-P))
    (BLOCK HALFTONE-P (SYSTEM::%STRUCTURE-TYPE-P 'HALFTONE SYSTEM::OBJECT)))))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE COPY-HALFTONE)))
(PROGN
 (SYSTEM::C-DEFUN 'COPY-HALFTONE
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(STRUCTURE))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN COPY-HALFTONE))
    (BLOCK COPY-HALFTONE (COPY-STRUCTURE STRUCTURE)))))
(PROGN (SYSTEM::C-PROCLAIM '(FUNCTION HALFTONE-PERCENT (HALFTONE) T)))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE HALFTONE-PERCENT)))
(PROGN
 (SYSTEM::C-DEFUN 'HALFTONE-PERCENT
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(SYSTEM::OBJECT))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN HALFTONE-PERCENT))
    (BLOCK HALFTONE-PERCENT
     (THE T (SYSTEM::%STRUCTURE-REF 'HALFTONE SYSTEM::OBJECT 1.))))))
(PROGN (SYSTEM::C-PROCLAIM '(FUNCTION HALFTONE-DEVICE-IMAGE (HALFTONE) T)))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE HALFTONE-DEVICE-IMAGE)))
(PROGN
 (SYSTEM::C-DEFUN 'HALFTONE-DEVICE-IMAGE
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(SYSTEM::OBJECT))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN HALFTONE-DEVICE-IMAGE))
    (BLOCK HALFTONE-DEVICE-IMAGE
     (THE T (SYSTEM::%STRUCTURE-REF 'HALFTONE SYSTEM::OBJECT 2.))))))
(PROGN (SYSTEM::C-PROCLAIM '(FUNCTION HALFTONE-FILLING-STYLE (HALFTONE) T)))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE HALFTONE-FILLING-STYLE)))
(PROGN
 (SYSTEM::C-DEFUN 'HALFTONE-FILLING-STYLE
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(SYSTEM::OBJECT))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN HALFTONE-FILLING-STYLE))
    (BLOCK HALFTONE-FILLING-STYLE
     (THE T (SYSTEM::%STRUCTURE-REF 'HALFTONE SYSTEM::OBJECT 3.))))))
(PROGN
 (LET NIL (REMPROP 'HALFTONE-PERCENT 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'HALFTONE-PERCENT 'SYSTEM::SETF-EXPANDER
   (LIST* -1. 1.
    (FUNCTION SETF-HALFTONE-PERCENT
     (LAMBDA (SYSTEM::%ACCESS-ARGLIST SYSTEM::VALUE)
      (LET* ((SYSTEM::STRUCT (CADR SYSTEM::%ACCESS-ARGLIST)))
       (BLOCK HALFTONE-PERCENT
        (LIST 'SYSTEM::%STRUCTURE-STORE ''HALFTONE SYSTEM::STRUCT 1.
         SYSTEM::VALUE)))))))
  (SYSTEM::%SET-DOCUMENTATION 'HALFTONE-PERCENT 'SETF NIL) 'HALFTONE-PERCENT))
(PROGN
 (LET NIL (REMPROP 'HALFTONE-DEVICE-IMAGE 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'HALFTONE-DEVICE-IMAGE 'SYSTEM::SETF-EXPANDER
   (LIST* -1. 1.
    (FUNCTION SETF-HALFTONE-DEVICE-IMAGE
     (LAMBDA (SYSTEM::%ACCESS-ARGLIST SYSTEM::VALUE)
      (LET* ((SYSTEM::STRUCT (CADR SYSTEM::%ACCESS-ARGLIST)))
       (BLOCK HALFTONE-DEVICE-IMAGE
        (LIST 'SYSTEM::%STRUCTURE-STORE ''HALFTONE SYSTEM::STRUCT 2.
         SYSTEM::VALUE)))))))
  (SYSTEM::%SET-DOCUMENTATION 'HALFTONE-DEVICE-IMAGE 'SETF NIL)
  'HALFTONE-DEVICE-IMAGE))
(PROGN
 (LET NIL (REMPROP 'HALFTONE-FILLING-STYLE 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'HALFTONE-FILLING-STYLE 'SYSTEM::SETF-EXPANDER
   (LIST* -1. 1.
    (FUNCTION SETF-HALFTONE-FILLING-STYLE
     (LAMBDA (SYSTEM::%ACCESS-ARGLIST SYSTEM::VALUE)
      (LET* ((SYSTEM::STRUCT (CADR SYSTEM::%ACCESS-ARGLIST)))
       (BLOCK HALFTONE-FILLING-STYLE
        (LIST 'SYSTEM::%STRUCTURE-STORE ''HALFTONE SYSTEM::STRUCT 3.
         SYSTEM::VALUE)))))))
  (SYSTEM::%SET-DOCUMENTATION 'HALFTONE-FILLING-STYLE 'SETF NIL)
  'HALFTONE-FILLING-STYLE))
(PROGN
 (SYSTEM::C-DEFUN 'PRINT-OBJECT
  #S(SYSTEM::SIGNATURE :REQ-NUM 2. :OPT-NUM 0. :REST-P NIL :KEYS-P NIL
     :KEYWORDS NIL :ALLOW-P NIL)))
(PROGN
 (LET NIL
  (LET
   ((#1=#:G11094
     (CONS 'DISPLAY-INFO
      (SVREF (GET 'STRUCTURE-OBJECT 'SYSTEM::DEFSTRUCT-DESCRIPTION) 0.))))
   (DEFUN MAKE-DISPLAY-INFO
    (&KEY DISPLAY SCREEN ROOT-WINDOW LINE-STYLE-GC FILLING-STYLE-GC)
    (LET ((SYSTEM::OBJECT (SYSTEM::%MAKE-STRUCTURE #1# 6.)))
     (SETF (SYSTEM::%STRUCTURE-REF 'DISPLAY-INFO SYSTEM::OBJECT 1.)
      (THE T DISPLAY))
     (SETF (SYSTEM::%STRUCTURE-REF 'DISPLAY-INFO SYSTEM::OBJECT 2.)
      (THE T SCREEN))
     (SETF (SYSTEM::%STRUCTURE-REF 'DISPLAY-INFO SYSTEM::OBJECT 3.)
      (THE T ROOT-WINDOW))
     (SETF (SYSTEM::%STRUCTURE-REF 'DISPLAY-INFO SYSTEM::OBJECT 4.)
      (THE T LINE-STYLE-GC))
     (SETF (SYSTEM::%STRUCTURE-REF 'DISPLAY-INFO SYSTEM::OBJECT 5.)
      (THE T FILLING-STYLE-GC))
     SYSTEM::OBJECT))
   (SYSTEM::%PUT 'DISPLAY-INFO 'SYSTEM::DEFSTRUCT-DESCRIPTION
    (VECTOR #1# 'T 'MAKE-DISPLAY-INFO
     `(#(DISPLAY (:DISPLAY) 1. (NIL) NIL T NIL)
       #(SCREEN (:SCREEN) 2. (NIL) NIL T NIL)
       #(ROOT-WINDOW (:ROOT-WINDOW) 3. (NIL) NIL T NIL)
       #(LINE-STYLE-GC (:LINE-STYLE-GC) 4. (NIL) NIL T NIL)
       #(FILLING-STYLE-GC (:FILLING-STYLE-GC) 5. (NIL) NIL T NIL)))))
  (CLOS::DEFINE-STRUCTURE-CLASS 'DISPLAY-INFO)
  (PROCLAIM '(INLINE DISPLAY-INFO-P))
  (DEFUN DISPLAY-INFO-P (SYSTEM::OBJECT)
   (SYSTEM::%STRUCTURE-TYPE-P 'DISPLAY-INFO SYSTEM::OBJECT))
  (PROCLAIM '(INLINE COPY-DISPLAY-INFO))
  (DEFUN COPY-DISPLAY-INFO (STRUCTURE) (COPY-STRUCTURE STRUCTURE))
  (PROCLAIM '(FUNCTION DISPLAY-INFO-DISPLAY (DISPLAY-INFO) T))
  (PROCLAIM '(INLINE DISPLAY-INFO-DISPLAY))
  (DEFUN DISPLAY-INFO-DISPLAY #2=(SYSTEM::OBJECT)
   (THE T (SYSTEM::%STRUCTURE-REF 'DISPLAY-INFO SYSTEM::OBJECT 1.)))
  (SYSTEM::%PUT 'DISPLAY-INFO-DISPLAY #3='SYSTEM::DEFSTRUCT-READER
   'DISPLAY-INFO)
  (PROCLAIM '(FUNCTION DISPLAY-INFO-SCREEN (DISPLAY-INFO) T))
  (PROCLAIM '(INLINE DISPLAY-INFO-SCREEN))
  (DEFUN DISPLAY-INFO-SCREEN #2#
   (THE T (SYSTEM::%STRUCTURE-REF 'DISPLAY-INFO SYSTEM::OBJECT 2.)))
  (SYSTEM::%PUT 'DISPLAY-INFO-SCREEN #3# 'DISPLAY-INFO)
  (PROCLAIM '(FUNCTION DISPLAY-INFO-ROOT-WINDOW (DISPLAY-INFO) T))
  (PROCLAIM '(INLINE DISPLAY-INFO-ROOT-WINDOW))
  (DEFUN DISPLAY-INFO-ROOT-WINDOW #2#
   (THE T (SYSTEM::%STRUCTURE-REF 'DISPLAY-INFO SYSTEM::OBJECT 3.)))
  (SYSTEM::%PUT 'DISPLAY-INFO-ROOT-WINDOW #3# 'DISPLAY-INFO)
  (PROCLAIM '(FUNCTION DISPLAY-INFO-LINE-STYLE-GC (DISPLAY-INFO) T))
  (PROCLAIM '(INLINE DISPLAY-INFO-LINE-STYLE-GC))
  (DEFUN DISPLAY-INFO-LINE-STYLE-GC #2#
   (THE T (SYSTEM::%STRUCTURE-REF 'DISPLAY-INFO SYSTEM::OBJECT 4.)))
  (SYSTEM::%PUT 'DISPLAY-INFO-LINE-STYLE-GC #3# 'DISPLAY-INFO)
  (PROCLAIM '(FUNCTION DISPLAY-INFO-FILLING-STYLE-GC (DISPLAY-INFO) T))
  (PROCLAIM '(INLINE DISPLAY-INFO-FILLING-STYLE-GC))
  (DEFUN DISPLAY-INFO-FILLING-STYLE-GC #2#
   (THE T (SYSTEM::%STRUCTURE-REF 'DISPLAY-INFO SYSTEM::OBJECT 5.)))
  (SYSTEM::%PUT 'DISPLAY-INFO-FILLING-STYLE-GC #3# 'DISPLAY-INFO)
  (DEFSETF DISPLAY-INFO-DISPLAY #4=(SYSTEM::STRUCT) #5=(SYSTEM::VALUE)
   (LIST #6='SYSTEM::%STRUCTURE-STORE ''DISPLAY-INFO SYSTEM::STRUCT 1.
    SYSTEM::VALUE))
  (SYSTEM::%PUT 'DISPLAY-INFO-DISPLAY #7='SYSTEM::DEFSTRUCT-WRITER
   'DISPLAY-INFO)
  (DEFSETF DISPLAY-INFO-SCREEN #4# #5#
   (LIST #6# ''DISPLAY-INFO SYSTEM::STRUCT 2. SYSTEM::VALUE))
  (SYSTEM::%PUT 'DISPLAY-INFO-SCREEN #7# 'DISPLAY-INFO)
  (DEFSETF DISPLAY-INFO-ROOT-WINDOW #4# #5#
   (LIST #6# ''DISPLAY-INFO SYSTEM::STRUCT 3. SYSTEM::VALUE))
  (SYSTEM::%PUT 'DISPLAY-INFO-ROOT-WINDOW #7# 'DISPLAY-INFO)
  (DEFSETF DISPLAY-INFO-LINE-STYLE-GC #4# #5#
   (LIST #6# ''DISPLAY-INFO SYSTEM::STRUCT 4. SYSTEM::VALUE))
  (SYSTEM::%PUT 'DISPLAY-INFO-LINE-STYLE-GC #7# 'DISPLAY-INFO)
  (DEFSETF DISPLAY-INFO-FILLING-STYLE-GC #4# #5#
   (LIST #6# ''DISPLAY-INFO SYSTEM::STRUCT 5. SYSTEM::VALUE))
  (SYSTEM::%PUT 'DISPLAY-INFO-FILLING-STYLE-GC #7# 'DISPLAY-INFO)
  (SETF (DOCUMENTATION 'DISPLAY-INFO 'STRUCTURE) NIL)
  (DEFMETHOD PRINT-OBJECT ((SYSTEM::STRUCT DISPLAY-INFO) STREAM)
   (PROGN (DISPLAY-INFO-PRINTER SYSTEM::STRUCT STREAM SYSTEM::*PRIN-LEVEL*)))
  'DISPLAY-INFO))
(PROGN
 (SYSTEM::C-DEFUN 'MAKE-DISPLAY-INFO
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE
   '(&KEY DISPLAY SCREEN ROOT-WINDOW LINE-STYLE-GC FILLING-STYLE-GC))))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE DISPLAY-INFO-P)))
(PROGN
 (SYSTEM::C-DEFUN 'DISPLAY-INFO-P
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(SYSTEM::OBJECT))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN DISPLAY-INFO-P))
    (BLOCK DISPLAY-INFO-P
     (SYSTEM::%STRUCTURE-TYPE-P 'DISPLAY-INFO SYSTEM::OBJECT)))))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE COPY-DISPLAY-INFO)))
(PROGN
 (SYSTEM::C-DEFUN 'COPY-DISPLAY-INFO
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(STRUCTURE))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN COPY-DISPLAY-INFO))
    (BLOCK COPY-DISPLAY-INFO (COPY-STRUCTURE STRUCTURE)))))
(PROGN (SYSTEM::C-PROCLAIM '(FUNCTION DISPLAY-INFO-DISPLAY (DISPLAY-INFO) T)))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE DISPLAY-INFO-DISPLAY)))
(PROGN
 (SYSTEM::C-DEFUN 'DISPLAY-INFO-DISPLAY
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(SYSTEM::OBJECT))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN DISPLAY-INFO-DISPLAY))
    (BLOCK DISPLAY-INFO-DISPLAY
     (THE T (SYSTEM::%STRUCTURE-REF 'DISPLAY-INFO SYSTEM::OBJECT 1.))))))
(PROGN (SYSTEM::C-PROCLAIM '(FUNCTION DISPLAY-INFO-SCREEN (DISPLAY-INFO) T)))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE DISPLAY-INFO-SCREEN)))
(PROGN
 (SYSTEM::C-DEFUN 'DISPLAY-INFO-SCREEN
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(SYSTEM::OBJECT))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN DISPLAY-INFO-SCREEN))
    (BLOCK DISPLAY-INFO-SCREEN
     (THE T (SYSTEM::%STRUCTURE-REF 'DISPLAY-INFO SYSTEM::OBJECT 2.))))))
(PROGN
 (SYSTEM::C-PROCLAIM '(FUNCTION DISPLAY-INFO-ROOT-WINDOW (DISPLAY-INFO) T)))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE DISPLAY-INFO-ROOT-WINDOW)))
(PROGN
 (SYSTEM::C-DEFUN 'DISPLAY-INFO-ROOT-WINDOW
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(SYSTEM::OBJECT))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN DISPLAY-INFO-ROOT-WINDOW))
    (BLOCK DISPLAY-INFO-ROOT-WINDOW
     (THE T (SYSTEM::%STRUCTURE-REF 'DISPLAY-INFO SYSTEM::OBJECT 3.))))))
(PROGN
 (SYSTEM::C-PROCLAIM '(FUNCTION DISPLAY-INFO-LINE-STYLE-GC (DISPLAY-INFO) T)))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE DISPLAY-INFO-LINE-STYLE-GC)))
(PROGN
 (SYSTEM::C-DEFUN 'DISPLAY-INFO-LINE-STYLE-GC
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(SYSTEM::OBJECT))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN DISPLAY-INFO-LINE-STYLE-GC))
    (BLOCK DISPLAY-INFO-LINE-STYLE-GC
     (THE T (SYSTEM::%STRUCTURE-REF 'DISPLAY-INFO SYSTEM::OBJECT 4.))))))
(PROGN
 (SYSTEM::C-PROCLAIM
  '(FUNCTION DISPLAY-INFO-FILLING-STYLE-GC (DISPLAY-INFO) T)))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE DISPLAY-INFO-FILLING-STYLE-GC)))
(PROGN
 (SYSTEM::C-DEFUN 'DISPLAY-INFO-FILLING-STYLE-GC
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(SYSTEM::OBJECT))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN DISPLAY-INFO-FILLING-STYLE-GC))
    (BLOCK DISPLAY-INFO-FILLING-STYLE-GC
     (THE T (SYSTEM::%STRUCTURE-REF 'DISPLAY-INFO SYSTEM::OBJECT 5.))))))
(PROGN
 (LET NIL (REMPROP 'DISPLAY-INFO-DISPLAY 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'DISPLAY-INFO-DISPLAY 'SYSTEM::SETF-EXPANDER
   (LIST* -1. 1.
    (FUNCTION SETF-DISPLAY-INFO-DISPLAY
     (LAMBDA (SYSTEM::%ACCESS-ARGLIST SYSTEM::VALUE)
      (LET* ((SYSTEM::STRUCT (CADR SYSTEM::%ACCESS-ARGLIST)))
       (BLOCK DISPLAY-INFO-DISPLAY
        (LIST 'SYSTEM::%STRUCTURE-STORE ''DISPLAY-INFO SYSTEM::STRUCT 1.
         SYSTEM::VALUE)))))))
  (SYSTEM::%SET-DOCUMENTATION 'DISPLAY-INFO-DISPLAY 'SETF NIL)
  'DISPLAY-INFO-DISPLAY))
(PROGN
 (LET NIL (REMPROP 'DISPLAY-INFO-SCREEN 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'DISPLAY-INFO-SCREEN 'SYSTEM::SETF-EXPANDER
   (LIST* -1. 1.
    (FUNCTION SETF-DISPLAY-INFO-SCREEN
     (LAMBDA (SYSTEM::%ACCESS-ARGLIST SYSTEM::VALUE)
      (LET* ((SYSTEM::STRUCT (CADR SYSTEM::%ACCESS-ARGLIST)))
       (BLOCK DISPLAY-INFO-SCREEN
        (LIST 'SYSTEM::%STRUCTURE-STORE ''DISPLAY-INFO SYSTEM::STRUCT 2.
         SYSTEM::VALUE)))))))
  (SYSTEM::%SET-DOCUMENTATION 'DISPLAY-INFO-SCREEN 'SETF NIL)
  'DISPLAY-INFO-SCREEN))
(PROGN
 (LET NIL (REMPROP 'DISPLAY-INFO-ROOT-WINDOW 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'DISPLAY-INFO-ROOT-WINDOW 'SYSTEM::SETF-EXPANDER
   (LIST* -1. 1.
    (FUNCTION SETF-DISPLAY-INFO-ROOT-WINDOW
     (LAMBDA (SYSTEM::%ACCESS-ARGLIST SYSTEM::VALUE)
      (LET* ((SYSTEM::STRUCT (CADR SYSTEM::%ACCESS-ARGLIST)))
       (BLOCK DISPLAY-INFO-ROOT-WINDOW
        (LIST 'SYSTEM::%STRUCTURE-STORE ''DISPLAY-INFO SYSTEM::STRUCT 3.
         SYSTEM::VALUE)))))))
  (SYSTEM::%SET-DOCUMENTATION 'DISPLAY-INFO-ROOT-WINDOW 'SETF NIL)
  'DISPLAY-INFO-ROOT-WINDOW))
(PROGN
 (LET NIL (REMPROP 'DISPLAY-INFO-LINE-STYLE-GC 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'DISPLAY-INFO-LINE-STYLE-GC 'SYSTEM::SETF-EXPANDER
   (LIST* -1. 1.
    (FUNCTION SETF-DISPLAY-INFO-LINE-STYLE-GC
     (LAMBDA (SYSTEM::%ACCESS-ARGLIST SYSTEM::VALUE)
      (LET* ((SYSTEM::STRUCT (CADR SYSTEM::%ACCESS-ARGLIST)))
       (BLOCK DISPLAY-INFO-LINE-STYLE-GC
        (LIST 'SYSTEM::%STRUCTURE-STORE ''DISPLAY-INFO SYSTEM::STRUCT 4.
         SYSTEM::VALUE)))))))
  (SYSTEM::%SET-DOCUMENTATION 'DISPLAY-INFO-LINE-STYLE-GC 'SETF NIL)
  'DISPLAY-INFO-LINE-STYLE-GC))
(PROGN
 (LET NIL (REMPROP 'DISPLAY-INFO-FILLING-STYLE-GC 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'DISPLAY-INFO-FILLING-STYLE-GC 'SYSTEM::SETF-EXPANDER
   (LIST* -1. 1.
    (FUNCTION SETF-DISPLAY-INFO-FILLING-STYLE-GC
     (LAMBDA (SYSTEM::%ACCESS-ARGLIST SYSTEM::VALUE)
      (LET* ((SYSTEM::STRUCT (CADR SYSTEM::%ACCESS-ARGLIST)))
       (BLOCK DISPLAY-INFO-FILLING-STYLE-GC
        (LIST 'SYSTEM::%STRUCTURE-STORE ''DISPLAY-INFO SYSTEM::STRUCT 5.
         SYSTEM::VALUE)))))))
  (SYSTEM::%SET-DOCUMENTATION 'DISPLAY-INFO-FILLING-STYLE-GC 'SETF NIL)
  'DISPLAY-INFO-FILLING-STYLE-GC))
(PROGN
 (SYSTEM::C-DEFUN 'PRINT-OBJECT
  #S(SYSTEM::SIGNATURE :REQ-NUM 2. :OPT-NUM 0. :REST-P NIL :KEYS-P NIL
     :KEYWORDS NIL :ALLOW-P NIL)))
(PROGN
 (LET NIL
  (LET
   ((#1=#:G11204
     (CONS 'CUT-STRING
      (SVREF (GET 'STRUCTURE-OBJECT 'SYSTEM::DEFSTRUCT-DESCRIPTION) 0.))))
   (DEFUN MAKE-CUT-STRING (&KEY STRING WIDTH LEFT-BEARING)
    (LET ((SYSTEM::OBJECT (SYSTEM::%MAKE-STRUCTURE #1# 4.)))
     (SETF (SYSTEM::%STRUCTURE-REF 'CUT-STRING SYSTEM::OBJECT 1.)
      (THE T STRING))
     (SETF (SYSTEM::%STRUCTURE-REF 'CUT-STRING SYSTEM::OBJECT 2.)
      (THE T WIDTH))
     (SETF (SYSTEM::%STRUCTURE-REF 'CUT-STRING SYSTEM::OBJECT 3.)
      (THE T LEFT-BEARING))
     SYSTEM::OBJECT))
   (SYSTEM::%PUT 'CUT-STRING 'SYSTEM::DEFSTRUCT-DESCRIPTION
    (VECTOR #1# 'T 'MAKE-CUT-STRING
     `(#(STRING (:STRING) 1. (NIL) NIL T NIL)
       #(WIDTH (:WIDTH) 2. (NIL) NIL T NIL)
       #(LEFT-BEARING (:LEFT-BEARING) 3. (NIL) NIL T NIL)))))
  (CLOS::DEFINE-STRUCTURE-CLASS 'CUT-STRING) (PROCLAIM '(INLINE CUT-STRING-P))
  (DEFUN CUT-STRING-P (SYSTEM::OBJECT)
   (SYSTEM::%STRUCTURE-TYPE-P 'CUT-STRING SYSTEM::OBJECT))
  (PROCLAIM '(INLINE COPY-CUT-STRING))
  (DEFUN COPY-CUT-STRING (STRUCTURE) (COPY-STRUCTURE STRUCTURE))
  (PROCLAIM '(FUNCTION CUT-STRING-STRING (CUT-STRING) T))
  (PROCLAIM '(INLINE CUT-STRING-STRING))
  (DEFUN CUT-STRING-STRING #2=(SYSTEM::OBJECT)
   (THE T (SYSTEM::%STRUCTURE-REF 'CUT-STRING SYSTEM::OBJECT 1.)))
  (SYSTEM::%PUT 'CUT-STRING-STRING #3='SYSTEM::DEFSTRUCT-READER 'CUT-STRING)
  (PROCLAIM '(FUNCTION CUT-STRING-WIDTH (CUT-STRING) T))
  (PROCLAIM '(INLINE CUT-STRING-WIDTH))
  (DEFUN CUT-STRING-WIDTH #2#
   (THE T (SYSTEM::%STRUCTURE-REF 'CUT-STRING SYSTEM::OBJECT 2.)))
  (SYSTEM::%PUT 'CUT-STRING-WIDTH #3# 'CUT-STRING)
  (PROCLAIM '(FUNCTION CUT-STRING-LEFT-BEARING (CUT-STRING) T))
  (PROCLAIM '(INLINE CUT-STRING-LEFT-BEARING))
  (DEFUN CUT-STRING-LEFT-BEARING #2#
   (THE T (SYSTEM::%STRUCTURE-REF 'CUT-STRING SYSTEM::OBJECT 3.)))
  (SYSTEM::%PUT 'CUT-STRING-LEFT-BEARING #3# 'CUT-STRING)
  (DEFSETF CUT-STRING-STRING #4=(SYSTEM::STRUCT) #5=(SYSTEM::VALUE)
   (LIST #6='SYSTEM::%STRUCTURE-STORE ''CUT-STRING SYSTEM::STRUCT 1.
    SYSTEM::VALUE))
  (SYSTEM::%PUT 'CUT-STRING-STRING #7='SYSTEM::DEFSTRUCT-WRITER 'CUT-STRING)
  (DEFSETF CUT-STRING-WIDTH #4# #5#
   (LIST #6# ''CUT-STRING SYSTEM::STRUCT 2. SYSTEM::VALUE))
  (SYSTEM::%PUT 'CUT-STRING-WIDTH #7# 'CUT-STRING)
  (DEFSETF CUT-STRING-LEFT-BEARING #4# #5#
   (LIST #6# ''CUT-STRING SYSTEM::STRUCT 3. SYSTEM::VALUE))
  (SYSTEM::%PUT 'CUT-STRING-LEFT-BEARING #7# 'CUT-STRING)
  (SETF (DOCUMENTATION 'CUT-STRING 'STRUCTURE) NIL)
  (CLOS::DEFSTRUCT-REMOVE-PRINT-OBJECT-METHOD 'CUT-STRING) 'CUT-STRING))
(PROGN
 (SYSTEM::C-DEFUN 'MAKE-CUT-STRING
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(&KEY STRING WIDTH LEFT-BEARING))))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE CUT-STRING-P)))
(PROGN
 (SYSTEM::C-DEFUN 'CUT-STRING-P
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(SYSTEM::OBJECT))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN CUT-STRING-P))
    (BLOCK CUT-STRING-P
     (SYSTEM::%STRUCTURE-TYPE-P 'CUT-STRING SYSTEM::OBJECT)))))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE COPY-CUT-STRING)))
(PROGN
 (SYSTEM::C-DEFUN 'COPY-CUT-STRING
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(STRUCTURE))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN COPY-CUT-STRING))
    (BLOCK COPY-CUT-STRING (COPY-STRUCTURE STRUCTURE)))))
(PROGN (SYSTEM::C-PROCLAIM '(FUNCTION CUT-STRING-STRING (CUT-STRING) T)))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE CUT-STRING-STRING)))
(PROGN
 (SYSTEM::C-DEFUN 'CUT-STRING-STRING
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(SYSTEM::OBJECT))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN CUT-STRING-STRING))
    (BLOCK CUT-STRING-STRING
     (THE T (SYSTEM::%STRUCTURE-REF 'CUT-STRING SYSTEM::OBJECT 1.))))))
(PROGN (SYSTEM::C-PROCLAIM '(FUNCTION CUT-STRING-WIDTH (CUT-STRING) T)))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE CUT-STRING-WIDTH)))
(PROGN
 (SYSTEM::C-DEFUN 'CUT-STRING-WIDTH
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(SYSTEM::OBJECT))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN CUT-STRING-WIDTH))
    (BLOCK CUT-STRING-WIDTH
     (THE T (SYSTEM::%STRUCTURE-REF 'CUT-STRING SYSTEM::OBJECT 2.))))))
(PROGN (SYSTEM::C-PROCLAIM '(FUNCTION CUT-STRING-LEFT-BEARING (CUT-STRING) T)))
(PROGN (SYSTEM::C-PROCLAIM '(INLINE CUT-STRING-LEFT-BEARING)))
(PROGN
 (SYSTEM::C-DEFUN 'CUT-STRING-LEFT-BEARING
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '#1=(SYSTEM::OBJECT))
  '(#1# (DECLARE (SYSTEM::IN-DEFUN CUT-STRING-LEFT-BEARING))
    (BLOCK CUT-STRING-LEFT-BEARING
     (THE T (SYSTEM::%STRUCTURE-REF 'CUT-STRING SYSTEM::OBJECT 3.))))))
(PROGN
 (LET NIL (REMPROP 'CUT-STRING-STRING 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'CUT-STRING-STRING 'SYSTEM::SETF-EXPANDER
   (LIST* -1. 1.
    (FUNCTION SETF-CUT-STRING-STRING
     (LAMBDA (SYSTEM::%ACCESS-ARGLIST SYSTEM::VALUE)
      (LET* ((SYSTEM::STRUCT (CADR SYSTEM::%ACCESS-ARGLIST)))
       (BLOCK CUT-STRING-STRING
        (LIST 'SYSTEM::%STRUCTURE-STORE ''CUT-STRING SYSTEM::STRUCT 1.
         SYSTEM::VALUE)))))))
  (SYSTEM::%SET-DOCUMENTATION 'CUT-STRING-STRING 'SETF NIL)
  'CUT-STRING-STRING))
(PROGN
 (LET NIL (REMPROP 'CUT-STRING-WIDTH 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'CUT-STRING-WIDTH 'SYSTEM::SETF-EXPANDER
   (LIST* -1. 1.
    (FUNCTION SETF-CUT-STRING-WIDTH
     (LAMBDA (SYSTEM::%ACCESS-ARGLIST SYSTEM::VALUE)
      (LET* ((SYSTEM::STRUCT (CADR SYSTEM::%ACCESS-ARGLIST)))
       (BLOCK CUT-STRING-WIDTH
        (LIST 'SYSTEM::%STRUCTURE-STORE ''CUT-STRING SYSTEM::STRUCT 2.
         SYSTEM::VALUE)))))))
  (SYSTEM::%SET-DOCUMENTATION 'CUT-STRING-WIDTH 'SETF NIL) 'CUT-STRING-WIDTH))
(PROGN
 (LET NIL (REMPROP 'CUT-STRING-LEFT-BEARING 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'CUT-STRING-LEFT-BEARING 'SYSTEM::SETF-EXPANDER
   (LIST* -1. 1.
    (FUNCTION SETF-CUT-STRING-LEFT-BEARING
     (LAMBDA (SYSTEM::%ACCESS-ARGLIST SYSTEM::VALUE)
      (LET* ((SYSTEM::STRUCT (CADR SYSTEM::%ACCESS-ARGLIST)))
       (BLOCK CUT-STRING-LEFT-BEARING
        (LIST 'SYSTEM::%STRUCTURE-STORE ''CUT-STRING SYSTEM::STRUCT 3.
         SYSTEM::VALUE)))))))
  (SYSTEM::%SET-DOCUMENTATION 'CUT-STRING-LEFT-BEARING 'SETF NIL)
  'CUT-STRING-LEFT-BEARING))
(PROGN
 (LET NIL (REMPROP 'BOTTOM 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'BOTTOM 'SYSTEM::SETF-EXPANDER
   (LIST* -1. 1.
    (FUNCTION SETF-BOTTOM
     (LAMBDA (SYSTEM::%ACCESS-ARGLIST VALUE)
      (LET* ((GOB (CADR SYSTEM::%ACCESS-ARGLIST)))
       (BLOCK BOTTOM
        `(SETF (G-VALUE ,GOB :TOP)
          (1+ (- ,VALUE (G-VALUE ,GOB :HEIGHT))))))))))
  (SYSTEM::%SET-DOCUMENTATION 'BOTTOM 'SETF NIL) 'BOTTOM))
(PROGN
 (LET NIL (REMPROP 'RIGHT 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'RIGHT 'SYSTEM::SETF-EXPANDER
   (LIST* -1. 1.
    (FUNCTION SETF-RIGHT
     (LAMBDA (SYSTEM::%ACCESS-ARGLIST VALUE)
      (LET* ((GOB (CADR SYSTEM::%ACCESS-ARGLIST)))
       (BLOCK RIGHT
        `(SETF (G-VALUE ,GOB :LEFT)
          (1+ (- ,VALUE (G-VALUE ,GOB :WIDTH))))))))))
  (SYSTEM::%SET-DOCUMENTATION 'RIGHT 'SETF NIL) 'RIGHT))
(PROGN
 (LET NIL (REMPROP 'LEFT-SIDE 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'LEFT-SIDE 'SYSTEM::SETF-EXPANDER
   (LIST* -1. 1.
    (FUNCTION SETF-LEFT-SIDE
     (LAMBDA (SYSTEM::%ACCESS-ARGLIST VALUE)
      (LET* ((GOB (CADR SYSTEM::%ACCESS-ARGLIST)))
       (BLOCK LEFT-SIDE
        `(PROGN
          (SETF (G-VALUE ,GOB :WIDTH)
           (- (G-VALUE ,GOB :WIDTH) (- ,VALUE (G-VALUE ,GOB :LEFT))))
          (SETF (G-VALUE ,GOB :LEFT) ,VALUE))))))))
  (SYSTEM::%SET-DOCUMENTATION 'LEFT-SIDE 'SETF NIL) 'LEFT-SIDE))
(PROGN
 (LET NIL (REMPROP 'RIGHT-SIDE 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'RIGHT-SIDE 'SYSTEM::SETF-EXPANDER
   (LIST* -1. 1.
    (FUNCTION SETF-RIGHT-SIDE
     (LAMBDA (SYSTEM::%ACCESS-ARGLIST VALUE)
      (LET* ((GOB (CADR SYSTEM::%ACCESS-ARGLIST)))
       (BLOCK RIGHT-SIDE
        `(SETF (G-VALUE ,GOB :WIDTH)
          (+ (G-VALUE ,GOB :WIDTH) (- ,VALUE (RIGHT ,GOB))))))))))
  (SYSTEM::%SET-DOCUMENTATION 'RIGHT-SIDE 'SETF NIL) 'RIGHT-SIDE))
(PROGN
 (LET NIL (REMPROP 'TOP-SIDE 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'TOP-SIDE 'SYSTEM::SETF-EXPANDER
   (LIST* -1. 1.
    (FUNCTION SETF-TOP-SIDE
     (LAMBDA (SYSTEM::%ACCESS-ARGLIST VALUE)
      (LET* ((GOB (CADR SYSTEM::%ACCESS-ARGLIST)))
       (BLOCK TOP-SIDE
        `(PROGN
          (SETF (G-VALUE ,GOB :HEIGHT)
           (- (G-VALUE ,GOB :HEIGHT) (- ,VALUE (G-VALUE ,GOB :TOP))))
          (SETF (G-VALUE ,GOB :TOP) ,VALUE))))))))
  (SYSTEM::%SET-DOCUMENTATION 'TOP-SIDE 'SETF NIL) 'TOP-SIDE))
(PROGN
 (LET NIL (REMPROP 'BOTTOM-SIDE 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'BOTTOM-SIDE 'SYSTEM::SETF-EXPANDER
   (LIST* -1. 1.
    (FUNCTION SETF-BOTTOM-SIDE
     (LAMBDA (SYSTEM::%ACCESS-ARGLIST VALUE)
      (LET* ((GOB (CADR SYSTEM::%ACCESS-ARGLIST)))
       (BLOCK BOTTOM-SIDE
        `(SETF (G-VALUE ,GOB :HEIGHT)
          (+ (G-VALUE ,GOB :HEIGHT) (- ,VALUE (BOTTOM ,GOB))))))))))
  (SYSTEM::%SET-DOCUMENTATION 'BOTTOM-SIDE 'SETF NIL) 'BOTTOM-SIDE))
(PROGN
 (LET NIL (REMPROP 'CENTER-X 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'CENTER-X 'SYSTEM::SETF-EXPANDER
   (LIST* -1. 1.
    (FUNCTION SETF-CENTER-X
     (LAMBDA (SYSTEM::%ACCESS-ARGLIST VALUE)
      (LET* ((GOB (CADR SYSTEM::%ACCESS-ARGLIST)))
       (BLOCK CENTER-X
        `(SETF (G-VALUE ,GOB :LEFT)
          (- ,VALUE (TRUNCATE (G-VALUE ,GOB :WIDTH) 2.)))))))))
  (SYSTEM::%SET-DOCUMENTATION 'CENTER-X 'SETF NIL) 'CENTER-X))
(PROGN
 (LET NIL (REMPROP 'CENTER-Y 'SYSTEM::DEFSTRUCT-WRITER)
  (SYSTEM::%PUT 'CENTER-Y 'SYSTEM::SETF-EXPANDER
   (LIST* -1. 1.
    (FUNCTION SETF-CENTER-Y
     (LAMBDA (SYSTEM::%ACCESS-ARGLIST VALUE)
      (LET* ((GOB (CADR SYSTEM::%ACCESS-ARGLIST)))
       (BLOCK CENTER-Y
        `(SETF (G-VALUE ,GOB :TOP)
          (- ,VALUE (TRUNCATE (G-VALUE ,GOB :HEIGHT) 2.)))))))))
  (SYSTEM::%SET-DOCUMENTATION 'CENTER-Y 'SETF NIL) 'CENTER-Y))