#0Y UTF-8

(PROGN (SETQ *PACKAGE* (SYSTEM::%FIND-PACKAGE "GEM")))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *DEFAULT-X-DISPLAY-NUMBER*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *MOUSE-DEBUG*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *MOUSE-THROW-AWAYS*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *DEBUG-ON*)))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'DEBUG-PRINT)
 (SYSTEM::%PUTD 'DEBUG-PRINT
  (SYSTEM::MAKE-MACRO
   (FUNCTION DEBUG-PRINT
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (LET* ((ARGUMENTS (CDR SYSTEM::<MACRO-FORM>)))
      (DECLARE (IGNORE ARGUMENTS)) (BLOCK DEBUG-PRINT NIL)))))))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *X-FONT-FACES*)))
(PROGN
 (SYSTEM::C-DEFUN 'GET-STIPPLE-SCHEMA-PIXMAP
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(STIPPLE-SCHEMA ROOT-WINDOW BITMAP-P))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'GET-X-STIPPLE)
 (SYSTEM::%PUTD 'GET-X-STIPPLE
  (SYSTEM::MAKE-MACRO
   (FUNCTION GET-X-STIPPLE
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 3.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET*
       ((STYLE-SCHEMA (CADR . #1=(SYSTEM::<MACRO-FORM>)))
        (ROOT-WINDOW (CADDR . #1#)))
       (BLOCK GET-X-STIPPLE
        `(LET ((STIPPLE-SCHEMA (G-VALUE ,STYLE-SCHEMA :STIPPLE)))
          (IF STIPPLE-SCHEMA
           (GET-STIPPLE-SCHEMA-PIXMAP STIPPLE-SCHEMA ,ROOT-WINDOW
            NIL)))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'SET-GC)
 (SYSTEM::%PUTD 'SET-GC
  (SYSTEM::MAKE-MACRO
   (FUNCTION SET-GC
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 5.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET*
       ((OPAL-GCONTEXT (CADR . #1=(SYSTEM::<MACRO-FORM>)))
        (XLIB-GCONTEXT (CADDR . #1#)) (SLOT (CADDDR . #1#))
        (VALUE (FIFTH . #1#)))
       (BLOCK SET-GC
        (CASE SLOT
         (:FOREGROUND
          `(LET ((V ,VALUE))
            (UNLESS (EQ V (OPAL::OPAL-GC-FOREGROUND ,OPAL-GCONTEXT))
             (SETF (OPAL::OPAL-GC-FOREGROUND ,OPAL-GCONTEXT)
              (SETF (XLIB:GCONTEXT-FOREGROUND ,XLIB-GCONTEXT) V)))))
         (:BACKGROUND
          `(LET ((V ,VALUE))
            (UNLESS (EQ V (OPAL::OPAL-GC-BACKGROUND ,OPAL-GCONTEXT))
             (SETF (OPAL::OPAL-GC-BACKGROUND ,OPAL-GCONTEXT)
              (SETF (XLIB:GCONTEXT-BACKGROUND ,XLIB-GCONTEXT) V)))))
         (:FUNCTION
          `(LET ((V ,VALUE))
            (UNLESS (EQ V (OPAL::OPAL-GC-FUNCTION ,OPAL-GCONTEXT))
             (SETF (OPAL::OPAL-GC-FUNCTION ,OPAL-GCONTEXT)
              (SETF (XLIB:GCONTEXT-FUNCTION ,XLIB-GCONTEXT) V)))))
         (:LINE-WIDTH
          `(LET ((V ,VALUE))
            (UNLESS (EQ V (OPAL::OPAL-GC-LINE-WIDTH ,OPAL-GCONTEXT))
             (SETF (OPAL::OPAL-GC-LINE-WIDTH ,OPAL-GCONTEXT)
              (SETF (XLIB:GCONTEXT-LINE-WIDTH ,XLIB-GCONTEXT) V)))))
         (:LINE-STYLE
          `(LET ((V ,VALUE))
            (UNLESS (EQ V (OPAL::OPAL-GC-LINE-STYLE ,OPAL-GCONTEXT))
             (SETF (OPAL::OPAL-GC-LINE-STYLE ,OPAL-GCONTEXT)
              (SETF (XLIB:GCONTEXT-LINE-STYLE ,XLIB-GCONTEXT) V)))))
         (:CAP-STYLE
          `(LET ((V ,VALUE))
            (UNLESS (EQ V (OPAL::OPAL-GC-CAP-STYLE ,OPAL-GCONTEXT))
             (SETF (OPAL::OPAL-GC-CAP-STYLE ,OPAL-GCONTEXT)
              (SETF (XLIB:GCONTEXT-CAP-STYLE ,XLIB-GCONTEXT) V)))))
         (:JOIN-STYLE
          `(LET ((V ,VALUE))
            (UNLESS (EQ V (OPAL::OPAL-GC-JOIN-STYLE ,OPAL-GCONTEXT))
             (SETF (OPAL::OPAL-GC-JOIN-STYLE ,OPAL-GCONTEXT)
              (SETF (XLIB:GCONTEXT-JOIN-STYLE ,XLIB-GCONTEXT) V)))))
         (:DASHES
          `(LET ((V ,VALUE))
            (UNLESS (EQ V (OPAL::OPAL-GC-DASHES ,OPAL-GCONTEXT))
             (SETF (OPAL::OPAL-GC-DASHES ,OPAL-GCONTEXT)
              (IF V (SETF (XLIB:GCONTEXT-DASHES ,XLIB-GCONTEXT) V))))))
         (:FONT
          `(LET ((V ,VALUE))
            (UNLESS (EQ V (OPAL::OPAL-GC-FONT ,OPAL-GCONTEXT))
             (SETF (OPAL::OPAL-GC-FONT ,OPAL-GCONTEXT)
              (IF V (SETF (XLIB:GCONTEXT-FONT ,XLIB-GCONTEXT) V))))))
         (:FILL-STYLE
          `(LET ((V ,VALUE))
            (UNLESS (EQ V (OPAL::OPAL-GC-FILL-STYLE ,OPAL-GCONTEXT))
             (SETF (OPAL::OPAL-GC-FILL-STYLE ,OPAL-GCONTEXT)
              (SETF (XLIB:GCONTEXT-FILL-STYLE ,XLIB-GCONTEXT) V)))))
         (:FILL-RULE
          `(LET ((V ,VALUE))
            (UNLESS (EQ V (OPAL::OPAL-GC-FILL-RULE ,OPAL-GCONTEXT))
             (SETF (OPAL::OPAL-GC-FILL-RULE ,OPAL-GCONTEXT)
              (SETF (XLIB:GCONTEXT-FILL-RULE ,XLIB-GCONTEXT) V)))))
         (:STIPPLE
          `(LET ((V ,VALUE))
            (UNLESS (EQ V (OPAL::OPAL-GC-STIPPLE ,OPAL-GCONTEXT))
             (SETF (OPAL::OPAL-GC-STIPPLE ,OPAL-GCONTEXT)
              (IF V (SETF (XLIB:GCONTEXT-STIPPLE ,XLIB-GCONTEXT) V))))))
         (:CLIP-MASK
          `(LET*
            ((V ,VALUE) (S (OPAL::OPAL-GC-STORED-CLIP-MASK ,OPAL-GCONTEXT))
             DO-COPY?)
            (SETF (OPAL::OPAL-GC-CLIP-MASK ,OPAL-GCONTEXT) V)
            (IF (EQ V :NONE)
             (UNLESS (EQ (FIRST S) :NONE)
              (SETF (XLIB:GCONTEXT-CLIP-MASK ,XLIB-GCONTEXT) :NONE)
              (SETF (FIRST S) :NONE))
             (PROGN
              (UNLESS (NTHCDR 4. V)
               (UNLESS (EQ (FIRST S) :SHORT) (SETQ DO-COPY? T)
                (SETF (FIRST S) :SHORT))
               (SETQ S (NTHCDR 4. S)))
              (WHEN (OR DO-COPY? (NOT (EQUAL V S)))
               (SETF (XLIB:GCONTEXT-CLIP-MASK ,XLIB-GCONTEXT) V)
               (DO NIL ((NULL V)) (SETF (CAR S) (CAR V)) (SETQ S (CDR S))
                (SETQ V (CDR V)))))))))))))))))
(PROGN
 (SYSTEM::C-DEFUN 'SET-LINE-STYLE
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE
   '(LINE-STYLE OPAL-GC XLIB-GC ROOT-WINDOW X-DRAW-FN))))
(PROGN
 (SYSTEM::C-DEFUN 'SET-FILLING-STYLE
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE
   '(FILLING-STYLE OPAL-GC XLIB-GC ROOT-WINDOW X-DRAW-FN))))
(PROGN
 (SYSTEM::C-DEFUN 'DO-ALL-GARNET-WINDOWS
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(CLX-WINDOW))))
(PROGN
 (SYSTEM::C-DEFUN 'X-ALL-GARNET-WINDOWS
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(ROOT-WINDOW))))
(PROGN
 (SYSTEM::C-DEFUN 'X-BEEP (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(ROOT-WINDOW))))
(PROGN
 (SYSTEM::C-DEFUN 'X-BIT-BLIT
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE
   '(WINDOW SOURCE S-X S-Y WIDTH HEIGHT DESTINATION D-X D-Y))))
(PROGN
 (SYSTEM::C-DEFUN 'X-BLACK-WHITE-PIXEL
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(WINDOW))))
(PROGN
 (SYSTEM::C-DEFUN 'X-CHARACTER-WIDTH
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(ROOT-WINDOW OPAL-FONT THE-CHAR-CODE))))
(PROGN
 (SYSTEM::C-DEFUN 'X-CLEAR-AREA
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE
   '(WINDOW &OPTIONAL (X 0.) (Y 0.) WIDTH HEIGHT CLEAR-BUFFER-P))))
(PROGN
 (SYSTEM::C-DEFUN 'X-COLOR-TO-INDEX
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(ROOT-WINDOW A-COLOR))))
(PROGN
 (SYSTEM::C-DEFUN 'X-COLORMAP-PROPERTY
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(ROOT-WINDOW PROPERTY &OPTIONAL A B C))))
(PROGN
 (SYSTEM::C-DEFUN 'X-COPY-TO-PIXMAP
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(ROOT-WINDOW TO FROM WIDTH HEIGHT))))
(PROGN
 (SYSTEM::C-DEFUN 'X-CREATE-CURSOR
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE
   '(ROOT-WINDOW SOURCE MASK FOREGROUND BACKGROUND FROM-FONT-P X Y))))
(PROGN
 (SYSTEM::C-DEFUN 'GET-PIXMAP-FORMATS (SYSTEM::LAMBDA-LIST-TO-SIGNATURE 'NIL)))
(PROGN
 (SYSTEM::C-DEFUN 'DEPTH-PIXMAP-FORMAT
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(DEPTH))))
(PROGN
 (SYSTEM::C-DEFUN 'DEPTH-TO-BITS-PER-PIXEL
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(DEPTH))))
(PROGN
 (SYSTEM::C-DEFUN 'X-CREATE-IMAGE
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE
   '(ROOT-WINDOW WIDTH HEIGHT DEPTH FROM-DATA-P &OPTIONAL COLOR-OR-DATA
     PROPERTIES BITS-PER-PIXEL LEFT-PAD DATA-ARRAY))))
(PROGN
 (SYSTEM::C-DEFUN 'X-CREATE-IMAGE-ARRAY
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(ROOT-WINDOW WIDTH HEIGHT DEPTH))))
(PROGN
 (SYSTEM::C-DEFUN 'X-CREATE-STATE-MASK
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(ROOT-WINDOW MODIFIER))))
(PROGN
 (SYSTEM::C-DEFUN 'X-CREATE-PIXMAP
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE
   '(WINDOW WIDTH HEIGHT DEPTH &OPTIONAL IMAGE BITMAP-P DATA-ARRAY))))
(PROGN
 (SYSTEM::C-DEFUN 'X-CREATE-WINDOW
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE
   '(PARENT-WINDOW X Y WIDTH HEIGHT TITLE ICON-NAME BACKGROUND BORDER-WIDTH
     SAVE-UNDER VISIBLE MIN-WIDTH MIN-HEIGHT MAX-WIDTH MAX-HEIGHT
     USER-SPECIFIED-POSITION-P USER-SPECIFIED-SIZE-P OVERRIDE-REDIRECT))))
(PROGN
 (SYSTEM::C-DEFUN 'X-DELETE-FONT
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(ROOT-WINDOW FONT))))
(PROGN
 (SYSTEM::C-DEFUN 'X-DELETE-PIXMAP
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(WINDOW PIXMAP &OPTIONAL BUFFER-TOO))))
(PROGN
 (SYSTEM::C-DEFUN 'X-DELETE-WINDOW
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(ROOT-WINDOW X-WINDOW))))
(PROGN
 (SYSTEM::C-DEFUN 'X-DISCARD-MOUSE-MOVED-EVENTS
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(ROOT-WINDOW))))
(PROGN
 (SYSTEM::C-DEFUN 'X-DISCARD-PENDING-EVENTS
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(ROOT-WINDOW &OPTIONAL (TIMEOUT 1.)))))
(PROGN
 (SYSTEM::C-DEFUN 'X-DRAW-ARC
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE
   '(WINDOW X Y WIDTH HEIGHT ANGLE1 ANGLE2 FUNCTION LINE-STYLE FILL-STYLE
     &OPTIONAL PIE-SLICE-P))))
(PROGN
 (SYSTEM::C-DEFUN 'X-DRAW-IMAGE
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE
   '(WINDOW LEFT TOP WIDTH HEIGHT IMAGE . #'FILL-STYLE))))
(PROGN
 (SYSTEM::C-DEFUN 'X-DRAW-LINE
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE
   '(WINDOW X1 Y1 X2 Y2 FUNCTION LINE-STYLE &OPTIONAL DRAWABLE))))
(PROGN
 (SYSTEM::C-DEFUN 'X-DRAW-LINES
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE
   '(WINDOW POINT-LIST FUNCTION LINE-STYLE FILL-STYLE))))
(PROGN
 (SYSTEM::C-DEFUN 'X-DRAW-POINTS
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(WINDOW POINT-LIST . #'LINE-STYLE))))
(PROGN
 (SYSTEM::C-DEFUN 'X-DRAW-RECTANGLE
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE
   '(WINDOW LEFT TOP WIDTH HEIGHT FUNCTION LINE-STYLE FILL-STYLE))))
(PROGN
 (SYSTEM::C-DEFUN 'X-DRAW-ROUNDTANGLE
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE
   '(WINDOW LEFT TOP WIDTH HEIGHT X-RADIUS Y-RADIUS FUNCTION LINE-STYLE
     FILL-STYLE))))
(PROGN
 (SYSTEM::C-DEFUN 'X-DRAW-TEXT
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE
   '(WINDOW X Y STRING FONT FUNCTION LINE-STYLE &OPTIONAL FILL-BACKGROUND
     INVERT-P))))
(PROGN
 (SYSTEM::C-DEFUN 'X-DRAWABLE-TO-WINDOW
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(ROOT-WINDOW DRAWABLE))))
(PROGN
 (SYSTEM::C-DEFUN 'DESTROY-NOTIFY-WINDOW
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(EVENT-WINDOW))))
(PROGN
 (SYSTEM::C-DEFUN 'CONNECTED-WINDOW-P
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(EVENT-WINDOW))))
(PROGN
 (SYSTEM::C-DEFUN 'DELETE-NOTIFY
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(EVENT-DEBUG EVENT-WINDOW))))
(PROGN
 (SYSTEM::C-DEFUN 'DO-CLIENT-MESSAGE
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(EVENT-WINDOW TYPE DATA FORMAT DISPLAY))))
(PROGN
 (SYSTEM::C-DEFUN 'LINEAGE-OF-DRAWABLE
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(DRAWABLE))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'EVENT-HANDLER-DEBUG)
 (SYSTEM::%PUTD 'EVENT-HANDLER-DEBUG
  (SYSTEM::MAKE-MACRO
   (FUNCTION EVENT-HANDLER-DEBUG
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (< (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((MESSAGE (CADR . #1=(SYSTEM::<MACRO-FORM>))) (ARGS (CDDR . #1#)))
       (DECLARE (IGNORE MESSAGE ARGS)) (BLOCK EVENT-HANDLER-DEBUG))))))))
(PROGN
 (SYSTEM::C-DEFUN 'X-EVENT-HANDLER
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(ROOT-WINDOW IGNORE-KEYS))))
(PROGN
 (SYSTEM::C-DEFUN 'X-FLUSH-OUTPUT
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(WINDOW))))
(PROGN
 (SYSTEM::C-DEFUN 'X-FONT-MAX-MIN-WIDTH
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(ROOT-WINDOW OPAL-FONT MIN-TOO))))
(PROGN
 (SYSTEM::C-DEFUN 'X-FONT-NAME-P
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(ROOT-WINDOW ARG))))
(PROGN
 (SYSTEM::C-DEFUN 'X-MAKE-FONT-NAME
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(ROOT-WINDOW KEY))))
(PROGN
 (SYSTEM::C-DEFUN 'X-FONT-EXISTS-P
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(ROOT-WINDOW NAME))))
(PROGN
 (SYSTEM::C-DEFUN 'X-FONT-TO-INTERNAL
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(ROOT-WINDOW FONT-FROM-FILE))))
(PROGN
 (SYSTEM::C-DEFUN 'X-GET-CUT-BUFFER
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(WINDOW))))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *REPORT-MOTION-PEM*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *ENTER-LEAVE-REPORT-MOTION-PEM*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *IGNORE-MOTION-GRAB-EM*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *ENTER-LEAVE-IGNORE-MOTION-GRAB-EM*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *IGNORE-MOTION-EM*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *ENTER-LEAVE-IGNORE-MOTION-EM*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *REPORT-MOTION-EM*)))
(PROGN (SYSTEM::C-PROCLAIM '(SPECIAL *ENTER-LEAVE-REPORT-MOTION-EM*)))
(PROGN
 (SYSTEM::C-DEFUN 'X-IMAGE-BIT
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(ROOT-WINDOW IMAGE X Y))))
(PROGN
 (SYSTEM::C-DEFUN 'X-IMAGE-FROM-BITS
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(ROOT-WINDOW PATTERNS))))
(PROGN
 (SYSTEM::C-DEFUN 'X-DEVICE-IMAGE
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(ROOT-WINDOW INDEX))))
(PROGN
 (SYSTEM::C-DEFUN 'X-IMAGE-HOT-SPOT
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(ROOT-WINDOW IMAGE))))
(PROGN
 (SYSTEM::C-DEFUN 'X-IMAGE-SIZE
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(ROOT-WINDOW IMAGE))))
(PROGN
 (SYSTEM::C-DEFUN 'X-IMAGE-TO-ARRAY
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(ROOT-WINDOW IMAGE))))
(PROGN
 (SYSTEM::C-DEFUN 'SET-FOUR-BORDERS
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE
   '(WINDOW LEFT &OPTIONAL TOP RIGHT BOTTOM))))
(PROGN
 (SYSTEM::C-DEFUN 'X-INITIALIZE-DEVICE
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(ROOT-WINDOW))))
(PROGN
 (SYSTEM::C-DEFUN 'X-INITIALIZE-WINDOW-BORDERS
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(WINDOW DRAWABLE))))
(PROGN
 (SYSTEM::C-DEFUN 'X-INJECT-EVENT
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(WINDOW INDEX))))
(PROGN
 (SYSTEM::C-DEFUN 'X-MAP-AND-WAIT
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(A-WINDOW DRAWABLE))))
(PROGN
 (SYSTEM::C-DEFUN 'X-MAX-CHARACTER-ASCENT
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(ROOT-WINDOW OPAL-FONT))))
(PROGN
 (SYSTEM::C-DEFUN 'X-MAX-CHARACTER-DESCENT
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(ROOT-WINDOW OPAL-FONT))))
(PROGN
 (SYSTEM::C-DEFUN 'X-MOUSE-GRAB
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE
   '(WINDOW GRAB-P WANT-ENTER-LEAVE &OPTIONAL OWNER-P))))
(PROGN
 (SYSTEM::C-DEFUN 'X-RAISE-OR-LOWER
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(WINDOW RAISE-P))))
(PROGN
 (SYSTEM::C-DEFUN 'X-READ-AN-IMAGE
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(ROOT-WINDOW PATHNAME))))
(PROGN
 (SYSTEM::C-DEFUN 'X-REPARENT
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(WINDOW NEW-PARENT DRAWABLE LEFT TOP))))
(PROGN
 (SYSTEM::C-DEFUN 'X-SET-CLIP-MASK
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE
   '(A-WINDOW CLIP-MASK &OPTIONAL LSTYLE-OGC FSTYLE-OGC))))
(PROGN
 (SYSTEM::C-DEFUN 'X-SET-CUT-BUFFER
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(WINDOW STRING))))
(PROGN
 (SYSTEM::C-DEFUN 'GET-DISPLAY-NUMBER
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(DISPLAY))))
(PROGN
 (SYSTEM::C-DEFUN 'X-SET-DEVICE-VARIABLES
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(ROOT-WINDOW))))
(PROGN
 (SYSTEM::C-DEFUN 'X-SET-DRAWABLE-TO-WINDOW
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(WINDOW DRAWABLE))))
(PROGN
 (SYSTEM::C-DEFUN 'X-SET-DRAW-FUNCTION-ALIST
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(ROOT-WINDOW))))
(PROGN
 (SYSTEM::C-DEFUN 'X-SET-WINDOW-PROPERTY
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(WINDOW PROPERTY VALUE))))
(PROGN
 (SYSTEM::C-DEFUN 'X-STIPPLED-P
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(ROOT-WINDOW))))
(PROGN
 (SYSTEM::C-DEFUN 'X-TEXT-EXTENTS
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(ROOT-WINDOW FONT STRING))))
(PROGN
 (SYSTEM::C-DEFUN 'X-TEXT-WIDTH
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(ROOT-WINDOW OPAL-FONT STRING))))
(PROGN
 (SYSTEM::C-DEFUN 'X-TRANSLATE-CODE
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(WINDOW SCAN-CODE SHIFTP))))
(PROGN
 (SYSTEM::C-DEFUN 'X-TRANSLATE-COORDINATES
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE
   '(ROOT-WINDOW WINDOW1 X Y &OPTIONAL WINDOW2))))
(PROGN
 (SYSTEM::C-DEFUN 'X-WINDOW-DEBUG-ID
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(WINDOW))))
(PROGN
 (SYSTEM::C-DEFUN 'X-WINDOW-DEPTH
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(WINDOW))))
(PROGN
 (SYSTEM::C-DEFUN 'X-WINDOW-FROM-DRAWABLE
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(ROOT-WINDOW X-WINDOW))))
(PROGN
 (SYSTEM::C-DEFUN 'X-WINDOW-HAS-GROWN
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(WINDOW WIDTH HEIGHT))))
(PROGN
 (SYSTEM::C-DEFUN 'X-WINDOW-TO-IMAGE
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(WINDOW LEFT TOP WIDTH HEIGHT))))
(PROGN
 (SYSTEM::C-DEFUN 'X-WRITE-AN-IMAGE
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(ROOT-WINDOW PATHNAME IMAGE))))
(PROGN
 (SYSTEM::C-DEFUN 'ATTACH-X-METHODS
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(X-DEVICE))))
(PROGN
 (SYSTEM::C-DEFUN 'X-TOP-LEVEL-INITIALIZE
  (SYSTEM::LAMBDA-LIST-TO-SIGNATURE '(DISPLAY-NAME))))