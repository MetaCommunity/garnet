#0Y UTF-8

(PROGN (SETQ *PACKAGE* (SYSTEM::%FIND-PACKAGE "OPAL")))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'ADD-COMPONENT)
 (SYSTEM::%PUTD 'ADD-COMPONENT
  (SYSTEM::MAKE-MACRO
   (FUNCTION ADD-COMPONENT
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (< (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((SCHEMA (CADR . #1=(SYSTEM::<MACRO-FORM>))) (ARGS (CDDR . #1#)))
       (BLOCK ADD-COMPONENT
        `(LET ((THE-SCHEMA ,SCHEMA))
          (KR-SEND THE-SCHEMA :ADD-COMPONENT THE-SCHEMA ,@ARGS))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'REMOVE-COMPONENT)
 (SYSTEM::%PUTD 'REMOVE-COMPONENT
  (SYSTEM::MAKE-MACRO
   (FUNCTION REMOVE-COMPONENT
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (< (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((SCHEMA (CADR . #1=(SYSTEM::<MACRO-FORM>))) (ARGS (CDDR . #1#)))
       (BLOCK REMOVE-COMPONENT
        `(LET ((THE-SCHEMA ,SCHEMA))
          (KR-SEND THE-SCHEMA :REMOVE-COMPONENT THE-SCHEMA ,@ARGS))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'MOVE-COMPONENT)
 (SYSTEM::%PUTD 'MOVE-COMPONENT
  (SYSTEM::MAKE-MACRO
   (FUNCTION MOVE-COMPONENT
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (< (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((SCHEMA (CADR . #1=(SYSTEM::<MACRO-FORM>))) (ARGS (CDDR . #1#)))
       (BLOCK MOVE-COMPONENT
        `(LET ((THE-SCHEMA ,SCHEMA))
          (KR-SEND THE-SCHEMA :MOVE-COMPONENT THE-SCHEMA ,@ARGS))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'DO-ALL-COMPONENTS)
 (SYSTEM::%PUTD 'DO-ALL-COMPONENTS
  (SYSTEM::MAKE-MACRO
   (FUNCTION DO-ALL-COMPONENTS
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (< (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((SCHEMA (CADR . #1=(SYSTEM::<MACRO-FORM>))) (ARGS (CDDR . #1#)))
       (BLOCK DO-ALL-COMPONENTS
        `(LET ((THE-SCHEMA ,SCHEMA))
          (KR-SEND THE-SCHEMA :DO-ALL-COMPONENTS THE-SCHEMA ,@ARGS))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'DO-COMPONENTS)
 (SYSTEM::%PUTD 'DO-COMPONENTS
  (SYSTEM::MAKE-MACRO
   (FUNCTION DO-COMPONENTS
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (< (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((SCHEMA (CADR . #1=(SYSTEM::<MACRO-FORM>))) (ARGS (CDDR . #1#)))
       (BLOCK DO-COMPONENTS
        `(LET ((THE-SCHEMA ,SCHEMA))
          (KR-SEND THE-SCHEMA :DO-COMPONENTS THE-SCHEMA ,@ARGS))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'POINT-TO-COMPONENT)
 (SYSTEM::%PUTD 'POINT-TO-COMPONENT
  (SYSTEM::MAKE-MACRO
   (FUNCTION POINT-TO-COMPONENT
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (< (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((SCHEMA (CADR . #1=(SYSTEM::<MACRO-FORM>))) (ARGS (CDDR . #1#)))
       (BLOCK POINT-TO-COMPONENT
        `(LET ((THE-SCHEMA ,SCHEMA))
          (KR-SEND THE-SCHEMA :POINT-TO-COMPONENT THE-SCHEMA ,@ARGS))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'POINT-TO-LEAF)
 (SYSTEM::%PUTD 'POINT-TO-LEAF
  (SYSTEM::MAKE-MACRO
   (FUNCTION POINT-TO-LEAF
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (< (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((SCHEMA (CADR . #1=(SYSTEM::<MACRO-FORM>))) (ARGS (CDDR . #1#)))
       (BLOCK POINT-TO-LEAF
        `(LET ((THE-SCHEMA ,SCHEMA))
          (KR-SEND THE-SCHEMA :POINT-TO-LEAF THE-SCHEMA ,@ARGS))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'FIX-UPDATE-SLOTS)
 (SYSTEM::%PUTD 'FIX-UPDATE-SLOTS
  (SYSTEM::MAKE-MACRO
   (FUNCTION FIX-UPDATE-SLOTS
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (< (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((SCHEMA (CADR . #1=(SYSTEM::<MACRO-FORM>))) (ARGS (CDDR . #1#)))
       (BLOCK FIX-UPDATE-SLOTS
        `(LET ((THE-SCHEMA ,SCHEMA))
          (KR-SEND THE-SCHEMA :FIX-UPDATE-SLOTS THE-SCHEMA ,@ARGS))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'INITIALIZE)
 (SYSTEM::%PUTD 'INITIALIZE
  (SYSTEM::MAKE-MACRO
   (FUNCTION INITIALIZE
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (< (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((SCHEMA (CADR . #1=(SYSTEM::<MACRO-FORM>))) (ARGS (CDDR . #1#)))
       (BLOCK INITIALIZE
        `(LET ((THE-SCHEMA ,SCHEMA))
          (KR-SEND THE-SCHEMA :INITIALIZE THE-SCHEMA ,@ARGS))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'DESTROY-ME)
 (SYSTEM::%PUTD 'DESTROY-ME
  (SYSTEM::MAKE-MACRO
   (FUNCTION DESTROY-ME
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (< (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((SCHEMA (CADR . #1=(SYSTEM::<MACRO-FORM>))) (ARGS (CDDR . #1#)))
       (BLOCK DESTROY-ME
        `(LET ((THE-SCHEMA ,SCHEMA))
          (KR-SEND THE-SCHEMA :DESTROY-ME THE-SCHEMA ,@ARGS))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'DESTROY)
 (SYSTEM::%PUTD 'DESTROY
  (SYSTEM::MAKE-MACRO
   (FUNCTION DESTROY
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (< (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((SCHEMA (CADR . #1=(SYSTEM::<MACRO-FORM>))) (ARGS (CDDR . #1#)))
       (BLOCK DESTROY
        `(LET ((THE-SCHEMA ,SCHEMA))
          (KR-SEND THE-SCHEMA :DESTROY THE-SCHEMA ,@ARGS))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'ROTATE)
 (SYSTEM::%PUTD 'ROTATE
  (SYSTEM::MAKE-MACRO
   (FUNCTION ROTATE
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (< (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((SCHEMA (CADR . #1=(SYSTEM::<MACRO-FORM>))) (ARGS (CDDR . #1#)))
       (BLOCK ROTATE
        `(LET ((THE-SCHEMA ,SCHEMA))
          (KR-SEND THE-SCHEMA :ROTATE THE-SCHEMA ,@ARGS))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'UPDATE)
 (SYSTEM::%PUTD 'UPDATE
  (SYSTEM::MAKE-MACRO
   (FUNCTION UPDATE
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (< (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((SCHEMA (CADR . #1=(SYSTEM::<MACRO-FORM>))) (ARGS (CDDR . #1#)))
       (BLOCK UPDATE
        `(LET ((THE-SCHEMA ,SCHEMA))
          (KR-SEND THE-SCHEMA :UPDATE THE-SCHEMA ,@ARGS))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'DRAW)
 (SYSTEM::%PUTD 'DRAW
  (SYSTEM::MAKE-MACRO
   (FUNCTION DRAW
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (< (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((SCHEMA (CADR . #1=(SYSTEM::<MACRO-FORM>))) (ARGS (CDDR . #1#)))
       (BLOCK DRAW
        `(LET ((THE-SCHEMA ,SCHEMA))
          (KR-SEND THE-SCHEMA :DRAW THE-SCHEMA ,@ARGS))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'POINT-IN-GOB)
 (SYSTEM::%PUTD 'POINT-IN-GOB
  (SYSTEM::MAKE-MACRO
   (FUNCTION POINT-IN-GOB
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (< (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((SCHEMA (CADR . #1=(SYSTEM::<MACRO-FORM>))) (ARGS (CDDR . #1#)))
       (BLOCK POINT-IN-GOB
        `(LET ((THE-SCHEMA ,SCHEMA))
          (KR-SEND THE-SCHEMA :POINT-IN-GOB THE-SCHEMA ,@ARGS))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'SET-STYLES)
 (SYSTEM::%PUTD 'SET-STYLES
  (SYSTEM::MAKE-MACRO
   (FUNCTION SET-STYLES
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (< (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((SCHEMA (CADR . #1=(SYSTEM::<MACRO-FORM>))) (ARGS (CDDR . #1#)))
       (BLOCK SET-STYLES
        `(LET ((THE-SCHEMA ,SCHEMA))
          (KR-SEND THE-SCHEMA :SET-STYLES THE-SCHEMA ,@ARGS))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'SET-FRR-BBOX)
 (SYSTEM::%PUTD 'SET-FRR-BBOX
  (SYSTEM::MAKE-MACRO
   (FUNCTION SET-FRR-BBOX
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (< (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((SCHEMA (CADR . #1=(SYSTEM::<MACRO-FORM>))) (ARGS (CDDR . #1#)))
       (BLOCK SET-FRR-BBOX
        `(LET ((THE-SCHEMA ,SCHEMA))
          (KR-SEND THE-SCHEMA :SET-FRR-BBOX THE-SCHEMA ,@ARGS))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'DOTHINGS)
 (SYSTEM::%SET-DOCUMENTATION 'DOTHINGS 'FUNCTION
  '#1="Same as 'dolist', except 'things' are not a list.  Does not cons.")
 (SYSTEM::%PUTD 'DOTHINGS
  (SYSTEM::MAKE-MACRO
   (FUNCTION DOTHINGS
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     #1#
     (IF (< (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET*
       ((VARNAME (CAADR . #2=(SYSTEM::<MACRO-FORM>))) (THINGS (CDADR . #2#))
        (BODY (CDDR . #2#)))
       (BLOCK DOTHINGS
        (LET
         ((COUNT (LENGTH THINGS)) (TAGNAME (GENSYM "TOP-TAG"))
          (COUNTNAME (GENSYM "COUNT")) CASE-ENTRIES)
         (DOLIST (THING THINGS) (PUSH (LIST (DECF COUNT) THING) CASE-ENTRIES))
         (SETQ CASE-ENTRIES (NREVERSE CASE-ENTRIES))
         `(LET ((,COUNTNAME ,(LENGTH THINGS)) ,VARNAME)
           (TAGBODY ,TAGNAME
            (UNLESS (ZEROP ,COUNTNAME)
             (SETQ ,VARNAME (CASE (DECF ,COUNTNAME) ,@CASE-ENTRIES)) ,@BODY
             (GO ,TAGNAME)))))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'HP-XOR-HACK)
 (SYSTEM::%PUTD 'HP-XOR-HACK
  (SYSTEM::MAKE-MACRO
   (FUNCTION HP-XOR-HACK
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 3.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET*
       ((X-DRAW-FUNCTION (CADR . #1=(SYSTEM::<MACRO-FORM>)))
        (INDEX (CADDR . #1#)))
       (BLOCK HP-XOR-HACK
        `(IF *HP-DISPLAY-TYPE?*
          (IF (EQ ,X-DRAW-FUNCTION ,BOOLE-XOR)
           (IF (EQL *BLACK* ,INDEX) *WHITE*
            (IF (EQL *WHITE* ,INDEX) *BLACK* ,INDEX))
           ,INDEX)
          ,INDEX)))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'GET-THICKNESS)
 (SYSTEM::%PUTD 'GET-THICKNESS
  (SYSTEM::MAKE-MACRO
   (FUNCTION GET-THICKNESS
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((GOB (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK GET-THICKNESS
        `(LET*
          ((LINE-STYLE (G-VALUE ,GOB :LINE-STYLE))
           (THICKNESS (AND LINE-STYLE (G-VALUE LINE-STYLE :LINE-THICKNESS))))
          (IF THICKNESS (MAX THICKNESS 1.) 0.))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'GET-OLD-THICKNESS)
 (SYSTEM::%PUTD 'GET-OLD-THICKNESS
  (SYSTEM::MAKE-MACRO
   (FUNCTION GET-OLD-THICKNESS
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 4.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET*
       ((GOB (CADR . #1=(SYSTEM::<MACRO-FORM>)))
        (LINE-STYLE-INDEX (CADDR . #1#)) (UPDATE-VALS (CADDDR . #1#)))
       (DECLARE (IGNORE GOB))
       (BLOCK GET-OLD-THICKNESS
        `(LET*
          ((LINE-STYLE (AREF ,UPDATE-VALS ,LINE-STYLE-INDEX))
           (THICKNESS (AND LINE-STYLE (G-VALUE LINE-STYLE :LINE-THICKNESS))))
          (IF THICKNESS (MAX THICKNESS 1.) 0.))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'POINT-IN-RECTANGLE)
 (SYSTEM::%PUTD 'POINT-IN-RECTANGLE
  (SYSTEM::MAKE-MACRO
   (FUNCTION POINT-IN-RECTANGLE
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 7.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET*
       ((X (CADR . #1=(SYSTEM::<MACRO-FORM>))) (Y (CADDR . #1#))
        (LEFT (CADDDR . #1#)) (TOP (FIFTH . #1#))
        (RIGHT (CADR . #2=((CDDDDR . #1#)))) (BOTTOM (CADDR . #2#)))
       (BLOCK POINT-IN-RECTANGLE
        `(AND (<= ,LEFT ,X ,RIGHT) (<= ,TOP ,Y ,BOTTOM))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'THE-WIDTH)
 (SYSTEM::%PUTD 'THE-WIDTH
  (SYSTEM::MAKE-MACRO
   (FUNCTION THE-WIDTH
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((TEXT-EXTENTS (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK THE-WIDTH `(FIRST ,TEXT-EXTENTS)))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'THE-ACTUAL-ASCENT)
 (SYSTEM::%PUTD 'THE-ACTUAL-ASCENT
  (SYSTEM::MAKE-MACRO
   (FUNCTION THE-ACTUAL-ASCENT
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((TEXT-EXTENTS (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK THE-ACTUAL-ASCENT `(SECOND ,TEXT-EXTENTS)))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'THE-ACTUAL-DESCENT)
 (SYSTEM::%PUTD 'THE-ACTUAL-DESCENT
  (SYSTEM::MAKE-MACRO
   (FUNCTION THE-ACTUAL-DESCENT
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((TEXT-EXTENTS (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK THE-ACTUAL-DESCENT `(THIRD ,TEXT-EXTENTS)))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'THE-LEFT-BEARING)
 (SYSTEM::%PUTD 'THE-LEFT-BEARING
  (SYSTEM::MAKE-MACRO
   (FUNCTION THE-LEFT-BEARING
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((TEXT-EXTENTS (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK THE-LEFT-BEARING `(FOURTH ,TEXT-EXTENTS)))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'THE-RIGHT-BEARING)
 (SYSTEM::%PUTD 'THE-RIGHT-BEARING
  (SYSTEM::MAKE-MACRO
   (FUNCTION THE-RIGHT-BEARING
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((TEXT-EXTENTS (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK THE-RIGHT-BEARING `(FIFTH ,TEXT-EXTENTS)))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'THE-FONT-ASCENT)
 (SYSTEM::%PUTD 'THE-FONT-ASCENT
  (SYSTEM::MAKE-MACRO
   (FUNCTION THE-FONT-ASCENT
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((TEXT-EXTENTS (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK THE-FONT-ASCENT `(SIXTH ,TEXT-EXTENTS)))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'THE-FONT-DESCENT)
 (SYSTEM::%PUTD 'THE-FONT-DESCENT
  (SYSTEM::MAKE-MACRO
   (FUNCTION THE-FONT-DESCENT
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((TEXT-EXTENTS (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK THE-FONT-DESCENT `(SEVENTH ,TEXT-EXTENTS)))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'READ-IMAGE)
 (SYSTEM::%PUTD 'READ-IMAGE
  (SYSTEM::MAKE-MACRO
   (FUNCTION READ-IMAGE
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (NOT (<= 2. (LENGTH SYSTEM::<MACRO-FORM>) 3.))
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET*
       ((PATHNAME (CADR . #1=(SYSTEM::<MACRO-FORM>)))
        (ROOT-WINDOW (CADDR . #1#)))
       (BLOCK READ-IMAGE
        `(GEM:READ-AN-IMAGE
          (OR ,ROOT-WINDOW (G-VALUE DEVICE-INFO :CURRENT-ROOT))
          ,PATHNAME)))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'WRITE-IMAGE)
 (SYSTEM::%PUTD 'WRITE-IMAGE
  (SYSTEM::MAKE-MACRO
   (FUNCTION WRITE-IMAGE
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (NOT (<= 3. (LENGTH SYSTEM::<MACRO-FORM>) 4.))
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET*
       ((PATHNAME (CADR . #1=(SYSTEM::<MACRO-FORM>))) (IMAGE (CADDR . #1#))
        (ROOT-WINDOW (CADDDR . #1#)))
       (BLOCK WRITE-IMAGE
        `(GEM:WRITE-AN-IMAGE
          (OR ,ROOT-WINDOW (G-VALUE DEVICE-INFO :CURRENT-ROOT)) ,PATHNAME
          ,IMAGE)))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'LEFT-SIDE)
 (SYSTEM::%PUTD 'LEFT-SIDE
  (SYSTEM::MAKE-MACRO
   (FUNCTION LEFT-SIDE
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((GOB (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK LEFT-SIDE `(G-VALUE ,GOB :LEFT)))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'RIGHT-SIDE)
 (SYSTEM::%PUTD 'RIGHT-SIDE
  (SYSTEM::MAKE-MACRO
   (FUNCTION RIGHT-SIDE
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((GOB (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK RIGHT-SIDE `(RIGHT ,GOB)))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'TOP-SIDE)
 (SYSTEM::%PUTD 'TOP-SIDE
  (SYSTEM::MAKE-MACRO
   (FUNCTION TOP-SIDE
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((GOB (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK TOP-SIDE `(G-VALUE ,GOB :TOP)))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'BOTTOM-SIDE)
 (SYSTEM::%PUTD 'BOTTOM-SIDE
  (SYSTEM::MAKE-MACRO
   (FUNCTION BOTTOM-SIDE
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((GOB (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK BOTTOM-SIDE `(BOTTOM ,GOB)))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'EXTRACT-DIR)
 (SYSTEM::%PUTD 'EXTRACT-DIR
  (SYSTEM::MAKE-MACRO
   (FUNCTION EXTRACT-DIR
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((FONT-NAME (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK EXTRACT-DIR
        `(SUBSEQ ,FONT-NAME 0.
          (1+ (POSITION #\/ ,FONT-NAME :FROM-END T)))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'EXTRACT-FONT-NAME)
 (SYSTEM::%PUTD 'EXTRACT-FONT-NAME
  (SYSTEM::MAKE-MACRO
   (FUNCTION EXTRACT-FONT-NAME
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((FONT-NAME (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK EXTRACT-FONT-NAME
        `(SUBSEQ ,FONT-NAME (1+ (POSITION #\/ ,FONT-NAME :FROM-END T))
          (POSITION #\. ,FONT-NAME :FROM-END T))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'GET-PARENT-WIN)
 (SYSTEM::%PUTD 'GET-PARENT-WIN
  (SYSTEM::MAKE-MACRO
   (FUNCTION GET-PARENT-WIN
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 3.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET*
       ((A-WINDOW (CADR . #1=(SYSTEM::<MACRO-FORM>)))
        (DISPLAY-INFO (CADDR . #1#)))
       (BLOCK GET-PARENT-WIN
        `(LET ((WIN-PARENT (G-VALUE ,A-WINDOW :PARENT)))
          (IF WIN-PARENT (G-VALUE WIN-PARENT :DRAWABLE)
           (DISPLAY-INFO-ROOT-WINDOW ,DISPLAY-INFO)))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'OPAL-WINDOW)
 (SYSTEM::%PUTD 'OPAL-WINDOW
  (SYSTEM::MAKE-MACRO
   (FUNCTION OPAL-WINDOW
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((WINDOW-PAIR (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK OPAL-WINDOW `(CDR ,WINDOW-PAIR)))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'CLX-WINDOW)
 (SYSTEM::%PUTD 'CLX-WINDOW
  (SYSTEM::MAKE-MACRO
   (FUNCTION CLX-WINDOW
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (/= (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((WINDOW-PAIR (CADR SYSTEM::<MACRO-FORM>)))
       (BLOCK CLX-WINDOW `(CAR ,WINDOW-PAIR)))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'ADD-ITEM)
 (SYSTEM::%PUTD 'ADD-ITEM
  (SYSTEM::MAKE-MACRO
   (FUNCTION ADD-ITEM
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (< (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((SCHEMA (CADR . #1=(SYSTEM::<MACRO-FORM>))) (ARGS (CDDR . #1#)))
       (BLOCK ADD-ITEM
        `(LET ((THE-SCHEMA ,SCHEMA))
          (KR-SEND THE-SCHEMA :ADD-ITEM THE-SCHEMA ,@ARGS))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'CHANGE-ITEM)
 (SYSTEM::%SET-DOCUMENTATION 'CHANGE-ITEM 'FUNCTION
  '#1="
Change-Item puts the specified item in the :items list, replacing the
item that was previously in the specified position.
    agg  - the aggrelist or gadget to be changed
    item - the new item to put in the :items list
    n    - the position of the old item to be replaced")
 (SYSTEM::%PUTD 'CHANGE-ITEM
  (SYSTEM::MAKE-MACRO
   (FUNCTION CHANGE-ITEM
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     #1#
     (IF (< (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((SCHEMA (CADR . #2=(SYSTEM::<MACRO-FORM>))) (ARGS (CDDR . #2#)))
       (BLOCK CHANGE-ITEM
        `(LET ((THE-SCHEMA ,SCHEMA))
          (KR-SEND THE-SCHEMA :CHANGE-ITEM THE-SCHEMA ,@ARGS))))))))))
(PROGN (SYSTEM::REMOVE-OLD-DEFINITIONS 'REMOVE-ITEM)
 (SYSTEM::%PUTD 'REMOVE-ITEM
  (SYSTEM::MAKE-MACRO
   (FUNCTION REMOVE-ITEM
    (LAMBDA (SYSTEM::<MACRO-FORM> &OPTIONAL SYSTEM::<ENV-ARG>)
     (DECLARE (CONS SYSTEM::<MACRO-FORM>)) (DECLARE (IGNORE SYSTEM::<ENV-ARG>))
     (IF (< (LENGTH SYSTEM::<MACRO-FORM>) 2.)
      (SYSTEM::MACRO-CALL-ERROR SYSTEM::<MACRO-FORM>)
      (LET* ((SCHEMA (CADR . #1=(SYSTEM::<MACRO-FORM>))) (ARGS (CDDR . #1#)))
       (BLOCK REMOVE-ITEM
        `(LET ((THE-SCHEMA ,SCHEMA))
          (KR-SEND THE-SCHEMA :REMOVE-ITEM THE-SCHEMA ,@ARGS))))))))))